   1              		.code	16
   2              		.file	"etharp.c"
  10              	.Ltext0:
  11              		.align	2
  12              		.code	16
  13              		.thumb_func
  15              	etharp_send_ip:
  16              	.LFB5:
  17              		.file 1 "rtos/common/ethernet/lwIP_132/src/netif/etharp.c"
   1:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
   2:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @file
   3:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Address Resolution Protocol module for IP over Ethernet
   4:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
   5:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Functionally, ARP is divided into two parts. The first maps an IP address
   6:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * to a physical address when sending a packet, and the second part answers
   7:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * requests from other machines for our physical address.
   8:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
   9:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * This implementation complies with RFC 826 (Ethernet ARP). It supports
  10:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Gratuitious ARP from RFC3220 (IP Mobility Support for IPv4) section 4.6
  11:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * if an interface calls etharp_gratuitous(our_netif) upon address change.
  12:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
  13:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  14:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /*
  15:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
  16:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Copyright (c) 2003-2004 Leon Woestenberg <leon.woestenberg@axon.tv>
  17:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Copyright (c) 2003-2004 Axon Digital Design B.V., The Netherlands.
  18:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * All rights reserved.
  19:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
  20:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Redistribution and use in source and binary forms, with or without modification,
  21:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * are permitted provided that the following conditions are met:
  22:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
  23:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  24:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *    this list of conditions and the following disclaimer.
  25:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  26:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *    this list of conditions and the following disclaimer in the documentation
  27:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *    and/or other materials provided with the distribution.
  28:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 3. The name of the author may not be used to endorse or promote products
  29:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *    derived from this software without specific prior written permission.
  30:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
  31:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  32:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  33:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  34:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  35:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  36:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  37:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  38:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  39:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  40:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * OF SUCH DAMAGE.
  41:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
  42:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * This file is part of the lwIP TCP/IP stack.
  43:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
  44:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
  45:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  
  46:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include "lwip/opt.h"
  47:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  48:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_ARP /* don't build if not configured for use in lwipopts.h */
  49:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  50:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include "lwip/inet.h"
  51:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include "lwip/ip.h"
  52:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include "lwip/stats.h"
  53:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include "lwip/snmp.h"
  54:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include "lwip/dhcp.h"
  55:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include "lwip/autoip.h"
  56:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include "netif/etharp.h"
  57:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  58:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if PPPOE_SUPPORT
  59:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include "netif/ppp_oe.h"
  60:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* PPPOE_SUPPORT */
  61:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  62:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #include <string.h>
  63:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  64:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /** the time an ARP entry stays valid after its last update,
  65:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *  for ARP_TMR_INTERVAL = 5000, this is
  66:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *  (240 * 5) seconds = 20 minutes.
  67:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
  68:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define ARP_MAXAGE 240
  69:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /** the time an ARP entry stays pending after first request,
  70:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *  for ARP_TMR_INTERVAL = 5000, this is
  71:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *  (2 * 5) seconds = 10 seconds.
  72:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 
  73:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *  @internal Keep this number at least 2, otherwise it might
  74:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *  run out instantly if the timeout occurs directly after a request.
  75:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
  76:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define ARP_MAXPENDING 2
  77:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  78:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define HWTYPE_ETHERNET 1
  79:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  80:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define ARPH_HWLEN(hdr) (ntohs((hdr)->_hwlen_protolen) >> 8)
  81:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define ARPH_PROTOLEN(hdr) (ntohs((hdr)->_hwlen_protolen) & 0xff)
  82:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  83:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define ARPH_HWLEN_SET(hdr, len) (hdr)->_hwlen_protolen = htons(ARPH_PROTOLEN(hdr) | ((len) << 8))
  84:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define ARPH_PROTOLEN_SET(hdr, len) (hdr)->_hwlen_protolen = htons((len) | (ARPH_HWLEN(hdr) << 8))
  85:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  86:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** enum etharp_state {
  87:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ETHARP_STATE_EMPTY = 0,
  88:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ETHARP_STATE_PENDING,
  89:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ETHARP_STATE_STABLE
  90:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** };
  91:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
  92:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** struct etharp_entry {
  93:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING
  94:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /** 
  95:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * Pointer to queue of pending outgoing packets on this ARP entry.
  96:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    */
  97:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct etharp_q_entry *q;
  98:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
  99:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct ip_addr ipaddr;
 100:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct eth_addr ethaddr;
 101:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   enum etharp_state state;
 102:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u8_t ctime;
 103:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct netif *netif;
 104:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** };
 105:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 106:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** const struct eth_addr ethbroadcast = {{0xff,0xff,0xff,0xff,0xff,0xff}};
 107:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** const struct eth_addr ethzero = {{0,0,0,0,0,0}};
 108:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static struct etharp_entry arp_table[ARP_TABLE_SIZE];
 109:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if !LWIP_NETIF_HWADDRHINT
 110:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static u8_t etharp_cached_entry;
 111:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 112:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 113:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 114:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Try hard to create a new entry - we want the IP address to appear in
 115:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * the cache (even if this means removing an active entry or so). */
 116:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define ETHARP_TRY_HARD 1
 117:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define ETHARP_FIND_ONLY  2
 118:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 119:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 120:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #define NETIF_SET_HINT(netif, hint)  if (((netif) != NULL) && ((netif)->addr_hint != NULL))  \
 121:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****                                       *((netif)->addr_hint) = (hint);
 122:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static s8_t find_entry(struct ip_addr *ipaddr, u8_t flags, struct netif *netif);
 123:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 124:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static s8_t find_entry(struct ip_addr *ipaddr, u8_t flags);
 125:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 126:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 127:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static err_t update_arp_entry(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr
 128:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 129:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 130:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /* Some checks, instead of etharp_init(): */
 131:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if (LWIP_ARP && (ARP_TABLE_SIZE > 0x7f))
 132:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   #error "If you want to use ARP, ARP_TABLE_SIZE must fit in an s8_t, so, you have to reduce it in 
 133:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 134:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 135:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 136:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING
 137:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 138:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Free a complete queue of etharp entries
 139:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 140:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param q a qeueue of etharp_q_entry's to free
 141:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 142:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static void
 143:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** free_etharp_q(struct etharp_q_entry *q)
 144:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 145:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct etharp_q_entry *r;
 146:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ASSERT("q != NULL", q != NULL);
 147:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ASSERT("q->p != NULL", q->p != NULL);
 148:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   while (q) {
 149:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     r = q;
 150:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     q = q->next;
 151:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 152:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     pbuf_free(r->p);
 153:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     memp_free(MEMP_ARP_QUEUE, r);
 154:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 155:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 156:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 157:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 158:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 159:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Clears expired entries in the ARP table.
 160:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 161:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * This function should be called every ETHARP_TMR_INTERVAL microseconds (5 seconds),
 162:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * in order to expire entries in the ARP table.
 163:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 164:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** void
 165:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** etharp_tmr(void)
 166:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 167:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u8_t i;
 168:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 169:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 170:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* remove expired entries from the ARP table */
 171:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 172:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     arp_table[i].ctime++;
 173:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if (((arp_table[i].state == ETHARP_STATE_STABLE) &&
 174:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****          (arp_table[i].ctime >= ARP_MAXAGE)) ||
 175:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 176:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****          (arp_table[i].ctime >= ARP_MAXPENDING))) {
 177:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****          /* pending or stable entry has become old! */
 178:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
 179:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****            arp_table[i].state == ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
 180:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* clean up entries that have just been expired */
 181:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* remove from SNMP ARP index tree */
 182:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
 183:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING
 184:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* and empty packet queue */
 185:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       if (arp_table[i].q != NULL) {
 186:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* remove all queued packets */
 187:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: freeing entry %"U16_F", packet queue %p.\n", (u16
 188:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         free_etharp_q(arp_table[i].q);
 189:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         arp_table[i].q = NULL;
 190:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
 191:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 192:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* recycle entry for re-use */      
 193:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       arp_table[i].state = ETHARP_STATE_EMPTY;
 194:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 195:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING
 196:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* still pending entry? (not expired) */
 197:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if (arp_table[i].state == ETHARP_STATE_PENDING) {
 198:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* resend an ARP query here? */
 199:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 200:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 201:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 202:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 203:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 204:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 205:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Search the ARP table for a matching or new entry.
 206:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 
 207:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * If an IP address is given, return a pending or stable ARP entry that matches
 208:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * the address. If no match is found, create a new entry with this address set,
 209:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * but in state ETHARP_EMPTY. The caller must check and possibly change the
 210:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * state of the returned entry.
 211:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 
 212:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * If ipaddr is NULL, return a initialized new entry in state ETHARP_EMPTY.
 213:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 
 214:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * In all cases, attempt to create new entries from an empty entry. If no
 215:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * empty entries are available and ETHARP_TRY_HARD flag is set, recycle
 216:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * old entries. Heuristic choose the least important entry for recycling.
 217:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 218:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ipaddr IP address to find in ARP cache, or to add if not found.
 219:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param flags
 220:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ETHARP_TRY_HARD: Try hard to create a entry by allowing recycling of
 221:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * active (stable or pending) entries.
 222:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *  
 223:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return The ARP entry index that matched or is created, ERR_MEM if no
 224:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * entry is found or could be recycled.
 225:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 226:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static s8_t
 227:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 228:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** find_entry(struct ip_addr *ipaddr, u8_t flags, struct netif *netif)
 229:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 230:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** find_entry(struct ip_addr *ipaddr, u8_t flags)
 231:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 232:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 233:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 234:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   s8_t empty = ARP_TABLE_SIZE;
 235:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u8_t i = 0, age_pending = 0, age_stable = 0;
 236:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING
 237:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* oldest entry with packets on queue */
 238:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   s8_t old_queue = ARP_TABLE_SIZE;
 239:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* its age */
 240:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u8_t age_queue = 0;
 241:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 242:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 243:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* First, test if the last call to this function asked for the
 244:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * same address. If so, we're really fast! */
 245:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (ipaddr) {
 246:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* ipaddr to search for was given */
 247:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 248:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if ((netif != NULL) && (netif->addr_hint != NULL)) {
 249:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* per-pcb cached entry was given */
 250:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       u8_t per_pcb_cache = *(netif->addr_hint);
 251:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       if ((per_pcb_cache < ARP_TABLE_SIZE) && arp_table[per_pcb_cache].state == ETHARP_STATE_STABLE
 252:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* the per-pcb-cached entry is stable */
 253:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         if (ip_addr_cmp(ipaddr, &arp_table[per_pcb_cache].ipaddr)) {
 254:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           /* per-pcb cached entry was the right one! */
 255:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           ETHARP_STATS_INC(etharp.cachehit);
 256:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           return per_pcb_cache;
 257:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         }
 258:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
 259:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 260:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* #if LWIP_NETIF_HWADDRHINT */
 261:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if (arp_table[etharp_cached_entry].state == ETHARP_STATE_STABLE) {
 262:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* the cached entry is stable */
 263:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       if (ip_addr_cmp(ipaddr, &arp_table[etharp_cached_entry].ipaddr)) {
 264:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* cached entry was the right one! */
 265:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         ETHARP_STATS_INC(etharp.cachehit);
 266:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         return etharp_cached_entry;
 267:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
 268:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 269:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* #if LWIP_NETIF_HWADDRHINT */
 270:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 271:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 272:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /**
 273:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * a) do a search through the cache, remember candidates
 274:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * b) select candidate entry
 275:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * c) create new entry
 276:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    */
 277:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 278:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* a) in a single search sweep, do all of this
 279:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 1) remember the first empty entry (if any)
 280:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 2) remember the oldest stable entry (if any)
 281:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 3) remember the oldest pending entry without queued packets (if any)
 282:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 4) remember the oldest pending entry with queued packets (if any)
 283:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 5) search for a matching IP entry, either pending or stable
 284:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    *    until 5 matches, or all entries are searched for.
 285:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    */
 286:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 287:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 288:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* no empty entry found yet and now we do find one? */
 289:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if ((empty == ARP_TABLE_SIZE) && (arp_table[i].state == ETHARP_STATE_EMPTY)) {
 290:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG, ("find_entry: found empty entry %"U16_F"\n", (u16_t)i));
 291:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* remember first empty entry */
 292:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       empty = i;
 293:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 294:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* pending entry? */
 295:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 296:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* if given, does IP address match IP address in ARP entry? */
 297:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 298:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: found matching pending entry %"U16
 299:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* found exact IP address match, simply bail out */
 300:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 301:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         NETIF_SET_HINT(netif, i);
 302:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* #if LWIP_NETIF_HWADDRHINT */
 303:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         etharp_cached_entry = i;
 304:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* #if LWIP_NETIF_HWADDRHINT */
 305:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         return i;
 306:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING
 307:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* pending with queued packets? */
 308:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       } else if (arp_table[i].q != NULL) {
 309:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         if (arp_table[i].ctime >= age_queue) {
 310:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           old_queue = i;
 311:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           age_queue = arp_table[i].ctime;
 312:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         }
 313:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 314:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* pending without queued packets? */
 315:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       } else {
 316:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         if (arp_table[i].ctime >= age_pending) {
 317:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           old_pending = i;
 318:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           age_pending = arp_table[i].ctime;
 319:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         }
 320:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }        
 321:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 322:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* stable entry? */
 323:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     else if (arp_table[i].state == ETHARP_STATE_STABLE) {
 324:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* if given, does IP address match IP address in ARP entry? */
 325:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 326:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: found matching stable entry %"U16_
 327:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* found exact IP address match, simply bail out */
 328:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 329:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         NETIF_SET_HINT(netif, i);
 330:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* #if LWIP_NETIF_HWADDRHINT */
 331:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         etharp_cached_entry = i;
 332:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* #if LWIP_NETIF_HWADDRHINT */
 333:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         return i;
 334:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* remember entry with oldest stable entry in oldest, its age in maxtime */
 335:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       } else if (arp_table[i].ctime >= age_stable) {
 336:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         old_stable = i;
 337:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         age_stable = arp_table[i].ctime;
 338:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
 339:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 340:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 341:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* { we have no match } => try to create a new entry */
 342:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    
 343:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* no empty entry found and not allowed to recycle? */
 344:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_TRY_HARD) == 0))
 345:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* or don't create new entry, only search? */
 346:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       || ((flags & ETHARP_FIND_ONLY) != 0)) {
 347:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: no empty entry found and not allowed t
 348:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return (s8_t)ERR_MEM;
 349:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 350:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   
 351:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* b) choose the least destructive entry to recycle:
 352:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 1) empty entry
 353:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 2) oldest stable entry
 354:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 3) oldest pending entry without queued packets
 355:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 4) oldest pending entry with queued packets
 356:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * 
 357:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * { ETHARP_TRY_HARD is set at this point }
 358:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    */ 
 359:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 360:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* 1) empty entry available? */
 361:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (empty < ARP_TABLE_SIZE) {
 362:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     i = empty;
 363:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting empty entry %"U16_F"\n", (u1
 364:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 365:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* 2) found recyclable stable entry? */
 366:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   else if (old_stable < ARP_TABLE_SIZE) {
 367:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* recycle oldest stable*/
 368:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     i = old_stable;
 369:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest stable entry %"U16_F"
 370:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING
 371:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* no queued packets should exist on stable entries */
 372:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 373:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 374:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* 3) found recyclable pending entry without queued packets? */
 375:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   } else if (old_pending < ARP_TABLE_SIZE) {
 376:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* recycle oldest pending */
 377:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     i = old_pending;
 378:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F
 379:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING
 380:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* 4) found recyclable pending entry with queued packets? */
 381:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   } else if (old_queue < ARP_TABLE_SIZE) {
 382:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* recycle oldest pending */
 383:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     i = old_queue;
 384:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F
 385:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     free_etharp_q(arp_table[i].q);
 386:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     arp_table[i].q = NULL;
 387:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 388:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* no empty or recyclable entries found */
 389:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   } else {
 390:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return (s8_t)ERR_MEM;
 391:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 392:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 393:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* { empty or recyclable entry found } */
 394:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 395:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 396:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (arp_table[i].state != ETHARP_STATE_EMPTY)
 397:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   {
 398:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
 399:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 400:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* recycle entry (no-op for an already empty entry) */
 401:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   arp_table[i].state = ETHARP_STATE_EMPTY;
 402:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 403:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* IP address given? */
 404:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (ipaddr != NULL) {
 405:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* set IP address */
 406:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ip_addr_set(&arp_table[i].ipaddr, ipaddr);
 407:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 408:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   arp_table[i].ctime = 0;
 409:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 410:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   NETIF_SET_HINT(netif, i);
 411:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* #if LWIP_NETIF_HWADDRHINT */
 412:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   etharp_cached_entry = i;
 413:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* #if LWIP_NETIF_HWADDRHINT */
 414:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   return (err_t)i;
 415:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 416:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 417:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 418:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Send an IP packet on the network using netif->linkoutput
 419:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * The ethernet header is filled in before sending.
 420:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 421:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @params netif the lwIP network interface on which to send the packet
 422:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @params p the packet to send, p->payload pointing to the (uninitialized) ethernet header
 423:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @params src the source MAC address to be copied into the ethernet header
 424:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @params dst the destination MAC address to be copied into the ethernet header
 425:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return ERR_OK if the packet was sent, any other err_t on failure
 426:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 427:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static err_t
 428:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
 429:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
  18              		.loc 1 429 0
  19 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  20              	.LCFI0:
  21              	.LVL0:
  22 0002 061C     		mov	r6, r0
  23 0004 0F1C     		mov	r7, r1
  24 0006 151C     		mov	r5, r2
  25 0008 181C     		mov	r0, r3
  26              	.LVL1:
 430:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct eth_hdr *ethhdr = p->payload;
  27              		.loc 1 430 0
  28 000a 4C68     		ldr	r4, [r1, #4]
  29              	.LVL2:
  30 000c 0621     		mov	r1, #6
  31              	.LVL3:
  32              	.L2:
 431:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u8_t k;
 432:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 433:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
 434:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****               (netif->hwaddr_len == ETHARP_HWADDR_LEN));
 435:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   k = ETHARP_HWADDR_LEN;
 436:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   while(k > 0) {
 437:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     k--;
  33              		.loc 1 437 0
  34 000e 4B1E     		sub	r3, r1, #1
  35 0010 1B06     		lsl	r3, r3, #24
  36 0012 190E     		lsr	r1, r3, #24
  37              	.LVL4:
 438:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ethhdr->dest.addr[k] = dst->addr[k];
  38              		.loc 1 438 0
  39 0014 435C     		ldrb	r3, [r0, r1]
  40 0016 6354     		strb	r3, [r4, r1]
 439:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ethhdr->src.addr[k]  = src->addr[k];
  41              		.loc 1 439 0
  42 0018 6218     		add	r2, r4, r1
  43 001a 6B5C     		ldrb	r3, [r5, r1]
  44 001c 1372     		strb	r3, [r2, #8]
  45              		.loc 1 436 0
  46 001e 0029     		cmp	r1, #0
  47 0020 F5D1     		bne	.L2
 440:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 441:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ethhdr->type = htons(ETHTYPE_IP);
  48              		.loc 1 441 0
  49 0022 8020     		mov	r0, #128
  50              	.LVL5:
  51 0024 0001     		lsl	r0, r0, #4
  52 0026 FFF7FEFF 		bl	htons
  53              	.LVL6:
  54 002a 2082     		strh	r0, [r4, #16]
 442:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
 443:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* send the packet */
 444:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   return netif->linkoutput(netif, p);
  55              		.loc 1 444 0
  56 002c B369     		ldr	r3, [r6, #24]
  57 002e 301C     		mov	r0, r6
  58 0030 391C     		mov	r1, r7
  59 0032 00F065FC 		bl	.L5
  60 0036 0006     		lsl	r0, r0, #24
  61 0038 0016     		asr	r0, r0, #24
 445:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
  62              		.loc 1 445 0
  63              		@ sp needed for prologue
  64              	.LVL7:
  65              	.LVL8:
  66              	.LVL9:
  67              	.LVL10:
  68 003a F0BC     		pop	{r4, r5, r6, r7}
  69 003c 02BC     		pop	{r1}
  70 003e 0847     		bx	r1
  71              	.LFE5:
  73              		.align	2
  74              		.global	etharp_request
  75              		.code	16
  76              		.thumb_func
  78              	etharp_request:
  79              	.LFB13:
 446:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 447:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 448:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Update (or insert) a IP/MAC address pair in the ARP cache.
 449:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 450:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * If a pending entry is resolved, any queued packets will be sent
 451:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * at this point.
 452:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 
 453:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ipaddr IP address of the inserted ARP entry.
 454:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ethaddr Ethernet address of the inserted ARP entry.
 455:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param flags Defines behaviour:
 456:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ETHARP_TRY_HARD Allows ARP to insert this as a new item. If not specified,
 457:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * only existing ARP entries will be updated.
 458:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 459:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return
 460:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ERR_OK Succesfully updated ARP cache.
 461:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ERR_MEM If we could not add a new ARP entry when ETHARP_TRY_HARD was set.
 462:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 463:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 464:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @see pbuf_free()
 465:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 466:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static err_t
 467:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** update_arp_entry(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr, u8_t flags)
 468:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 469:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   s8_t i;
 470:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u8_t k;
 471:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry()\n"));
 472:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ASSERT("netif->hwaddr_len == ETHARP_HWADDR_LEN", netif->hwaddr_len == ETHARP_HWADDR_LEN);
 473:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F
 474:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****                                         ip4_addr1(ipaddr), ip4_addr2(ipaddr), ip4_addr3(ipaddr), ip
 475:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****                                         ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
 476:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****                                         ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
 477:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* non-unicast address? */
 478:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (ip_addr_isany(ipaddr) ||
 479:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ip_addr_isbroadcast(ipaddr, netif) ||
 480:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ip_addr_ismulticast(ipaddr)) {
 481:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: will not add non-unicast IP addr
 482:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return ERR_ARG;
 483:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 484:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* find or create ARP entry */
 485:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 486:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   i = find_entry(ipaddr, flags, netif);
 487:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 488:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   i = find_entry(ipaddr, flags);
 489:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 490:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* bail out if no entry could be found */
 491:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (i < 0)
 492:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return (err_t)i;
 493:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   
 494:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* mark it stable */
 495:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   arp_table[i].state = ETHARP_STATE_STABLE;
 496:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* record network interface */
 497:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   arp_table[i].netif = netif;
 498:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 499:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* insert in SNMP ARP index tree */
 500:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);
 501:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 502:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: updating stable entry %"S16_F"\n",
 503:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* update address */
 504:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   k = ETHARP_HWADDR_LEN;
 505:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   while (k > 0) {
 506:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     k--;
 507:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     arp_table[i].ethaddr.addr[k] = ethaddr->addr[k];
 508:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 509:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* reset time stamp */
 510:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   arp_table[i].ctime = 0;
 511:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING
 512:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* this is where we will send out queued packets! */
 513:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   while (arp_table[i].q != NULL) {
 514:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     struct pbuf *p;
 515:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* remember remainder of queue */
 516:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     struct etharp_q_entry *q = arp_table[i].q;
 517:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* pop first item off the queue */
 518:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     arp_table[i].q = q->next;
 519:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* get the packet pointer */
 520:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     p = q->p;
 521:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* now queue entry can be freed */
 522:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     memp_free(MEMP_ARP_QUEUE, q);
 523:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* send the queued IP packet */
 524:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 525:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* free the queued IP packet */
 526:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     pbuf_free(p);
 527:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 528:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 529:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   return ERR_OK;
 530:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 531:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 532:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 533:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Finds (stable) ethernet/IP address pair from ARP table
 534:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * using interface and IP address index.
 535:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @note the addresses in the ARP table are in network order!
 536:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 537:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param netif points to interface index
 538:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ipaddr points to the (network order) IP address index
 539:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param eth_ret points to return pointer
 540:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ip_ret points to return pointer
 541:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return table index if found, -1 otherwise
 542:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 543:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** s8_t
 544:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** etharp_find_addr(struct netif *netif, struct ip_addr *ipaddr,
 545:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****          struct eth_addr **eth_ret, struct ip_addr **ip_ret)
 546:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 547:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   s8_t i;
 548:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 549:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_UNUSED_ARG(netif);
 550:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 551:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 552:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   i = find_entry(ipaddr, ETHARP_FIND_ONLY, NULL);
 553:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 554:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   i = find_entry(ipaddr, ETHARP_FIND_ONLY);
 555:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 556:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if((i >= 0) && arp_table[i].state == ETHARP_STATE_STABLE) {
 557:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       *eth_ret = &arp_table[i].ethaddr;
 558:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       *ip_ret = &arp_table[i].ipaddr;
 559:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       return i;
 560:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 561:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   return -1;
 562:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 563:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 564:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 565:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Updates the ARP table using the given IP packet.
 566:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 567:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Uses the incoming IP packet's source address to update the
 568:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * ARP cache for the local network. The function does not alter
 569:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * or free the packet. This function must be called before the
 570:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * packet p is passed to the IP layer.
 571:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 572:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param netif The lwIP network interface on which the IP packet pbuf arrived.
 573:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param p The IP packet that arrived on netif.
 574:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 575:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return NULL
 576:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 577:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @see pbuf_free()
 578:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 579:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** void
 580:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** etharp_ip_input(struct netif *netif, struct pbuf *p)
 581:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 582:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct eth_hdr *ethhdr;
 583:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct ip_hdr *iphdr;
 584:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 585:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* Only insert an entry if the source IP address of the
 586:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      incoming IP packet comes from a host on the local network. */
 587:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ethhdr = p->payload;
 588:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 589:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ETHARP_SUPPORT_VLAN
 590:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (ethhdr->type == ETHTYPE_VLAN) {
 591:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
 592:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 593:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* ETHARP_SUPPORT_VLAN */
 594:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 595:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* source is not on the local network? */
 596:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (!ip_addr_netcmp(&(iphdr->src), &(netif->ip_addr), &(netif->netmask))) {
 597:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* do nothing */
 598:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return;
 599:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 600:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 601:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
 602:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* update ARP table */
 603:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* @todo We could use ETHARP_TRY_HARD if we think we are going to talk
 604:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * back soon (for example, if the destination IP address is ours. */
 605:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   update_arp_entry(netif, &(iphdr->src), &(ethhdr->src), 0);
 606:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 607:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 608:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 609:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 610:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Responds to ARP requests to us. Upon ARP replies to us, add entry to cache  
 611:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * send out queued IP packets. Updates cache with snooped address pairs.
 612:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 613:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Should be called for incoming ARP packets. The pbuf in the argument
 614:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * is freed by this function.
 615:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 616:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param netif The lwIP network interface on which the ARP packet pbuf arrived.
 617:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ethaddr Ethernet address of netif.
 618:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param p The ARP packet that arrived on netif. Is freed by this function.
 619:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 620:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return NULL
 621:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 622:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @see pbuf_free()
 623:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 624:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** void
 625:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
 626:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 627:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct etharp_hdr *hdr;
 628:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct eth_hdr *ethhdr;
 629:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* these are aligned properly, whereas the ARP header fields might not be */
 630:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct ip_addr sipaddr, dipaddr;
 631:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u8_t i;
 632:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u8_t for_us;
 633:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_AUTOIP
 634:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   const u8_t * ethdst_hwaddr;
 635:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
 636:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 637:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 638:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   
 639:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
 640:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
 641:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (p->len < SIZEOF_ETHARP_PACKET) {
 642:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 643:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
 644:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       (s16_t)SIZEOF_ETHARP_PACKET));
 645:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.lenerr);
 646:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.drop);
 647:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     pbuf_free(p);
 648:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return;
 649:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 650:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 651:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ethhdr = p->payload;
 652:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 653:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ETHARP_SUPPORT_VLAN
 654:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (ethhdr->type == ETHTYPE_VLAN) {
 655:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
 656:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 657:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* ETHARP_SUPPORT_VLAN */
 658:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 659:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* RFC 826 "Packet Reception": */
 660:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if ((hdr->hwtype != htons(HWTYPE_ETHERNET)) ||
 661:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       (hdr->_hwlen_protolen != htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr))) ||
 662:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       (hdr->proto != htons(ETHTYPE_IP)) ||
 663:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       (ethhdr->type != htons(ETHTYPE_ARP)))  {
 664:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 665:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%
 666:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       hdr->hwtype, ARPH_HWLEN(hdr), hdr->proto, ARPH_PROTOLEN(hdr), ethhdr->type));
 667:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.proterr);
 668:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.drop);
 669:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     pbuf_free(p);
 670:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return;
 671:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 672:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ETHARP_STATS_INC(etharp.recv);
 673:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 674:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_AUTOIP
 675:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* We have to check if a host already has configured our random
 676:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * created link local address and continously check if there is
 677:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * a host with this IP-address so we can detect collisions */
 678:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   autoip_arp_reply(netif, hdr);
 679:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
 680:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 681:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
 682:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * structure packing (not using structure copy which breaks strict-aliasing rules). */
 683:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   SMEMCPY(&sipaddr, &hdr->sipaddr, sizeof(sipaddr));
 684:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   SMEMCPY(&dipaddr, &hdr->dipaddr, sizeof(dipaddr));
 685:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 686:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* this interface is not configured? */
 687:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (netif->ip_addr.addr == 0) {
 688:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     for_us = 0;
 689:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   } else {
 690:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* ARP packet directed to us? */
 691:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     for_us = ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 692:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 693:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 694:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* ARP message directed to us? */
 695:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (for_us) {
 696:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* add IP address in ARP cache; assume requester wants to talk to us.
 697:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      * can result in directly sending the queued packets for this host. */
 698:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), ETHARP_TRY_HARD);
 699:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* ARP message not directed to us? */
 700:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   } else {
 701:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* update the source IP address in the cache, if present */
 702:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), 0);
 703:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 704:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 705:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* now act on the message itself */
 706:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   switch (htons(hdr->opcode)) {
 707:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* ARP request? */
 708:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   case ARP_REQUEST:
 709:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* ARP request. If it asked for our address, we send out a
 710:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      * reply. In any case, we time-stamp any existing ARP entry,
 711:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      * and possiby send out an IP packet that was queued on it. */
 712:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 713:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
 714:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* ARP request for our address? */
 715:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if (for_us) {
 716:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 717:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for ou
 718:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* Re-use pbuf to send ARP reply.
 719:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****          Since we are re-using an existing pbuf, we can't call etharp_raw since
 720:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****          that would allocate a new pbuf. */
 721:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       hdr->opcode = htons(ARP_REPLY);
 722:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 723:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       hdr->dipaddr = hdr->sipaddr;
 724:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       SMEMCPY(&hdr->sipaddr, &netif->ip_addr, sizeof(hdr->sipaddr));
 725:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 726:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
 727:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****                   (netif->hwaddr_len == ETHARP_HWADDR_LEN));
 728:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       i = ETHARP_HWADDR_LEN;
 729:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_AUTOIP
 730:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* If we are using Link-Local, ARP packets must be broadcast on the
 731:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****        * link layer. (See RFC3927 Section 2.5) */
 732:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8
 733:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
 734:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 735:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       while(i > 0) {
 736:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         i--;
 737:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         hdr->dhwaddr.addr[i] = hdr->shwaddr.addr[i];
 738:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_AUTOIP
 739:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         ethhdr->dest.addr[i] = ethdst_hwaddr[i];
 740:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else  /* LWIP_AUTOIP */
 741:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         ethhdr->dest.addr[i] = hdr->shwaddr.addr[i];
 742:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
 743:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         hdr->shwaddr.addr[i] = ethaddr->addr[i];
 744:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         ethhdr->src.addr[i] = ethaddr->addr[i];
 745:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
 746:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 747:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
 748:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****          are already correct, we tested that before */
 749:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 750:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* return ARP reply */
 751:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       netif->linkoutput(netif, p);
 752:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* we are not configured? */
 753:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     } else if (netif->ip_addr.addr == 0) {
 754:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* { for_us == 0 and netif->ip_addr.addr == 0 } */
 755:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: we are unconfigured, ARP reque
 756:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* request was not directed to us */
 757:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     } else {
 758:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* { for_us == 0 and netif->ip_addr.addr != 0 } */
 759:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"
 760:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 761:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     break;
 762:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   case ARP_REPLY:
 763:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* ARP reply. We already updated the ARP cache earlier. */
 764:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP reply\n"));
 765:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
 766:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* DHCP wants to know about ARP replies from any host with an
 767:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      * IP address also offered to us by the DHCP server. We do not
 768:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      * want to take a duplicate IP address on a single network.
 769:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      * @todo How should we handle redundant (fail-over) interfaces? */
 770:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     dhcp_arp_reply(netif, &sipaddr);
 771:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
 772:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     break;
 773:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   default:
 774:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"
 775:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.err);
 776:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     break;
 777:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 778:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* free ARP packet */
 779:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   pbuf_free(p);
 780:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 781:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 782:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 783:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Resolve and fill-in Ethernet address header for outgoing IP packet.
 784:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 785:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * For IP multicast and broadcast, corresponding Ethernet addresses
 786:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * are selected and the packet is transmitted on the link.
 787:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 788:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * For unicast addresses, the packet is submitted to etharp_query(). In
 789:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * case the IP address is outside the local network, the IP address of
 790:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * the gateway is used.
 791:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 792:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param netif The lwIP network interface which the IP packet will be sent on.
 793:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param q The pbuf(s) containing the IP packet to be sent.
 794:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ipaddr The IP address of the packet destination.
 795:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 796:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return
 797:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ERR_RTE No route to destination (no gateway to external networks),
 798:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * or the return type of either etharp_query() or etharp_send_ip().
 799:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 800:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** err_t
 801:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** etharp_output(struct netif *netif, struct pbuf *q, struct ip_addr *ipaddr)
 802:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 803:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct eth_addr *dest, mcastaddr;
 804:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 805:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* make room for Ethernet header - should not fail */
 806:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 807:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* bail out */
 808:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 809:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ("etharp_output: could not allocate room for header.\n"));
 810:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LINK_STATS_INC(link.lenerr);
 811:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return ERR_BUF;
 812:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 813:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 814:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* assume unresolved Ethernet address */
 815:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   dest = NULL;
 816:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* Determine on destination hardware address. Broadcasts and multicasts
 817:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * are special, other IP addresses are looked up in the ARP table. */
 818:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 819:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* broadcast destination IP address? */
 820:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (ip_addr_isbroadcast(ipaddr, netif)) {
 821:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* broadcast on Ethernet also */
 822:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     dest = (struct eth_addr *)&ethbroadcast;
 823:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* multicast destination IP address? */
 824:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   } else if (ip_addr_ismulticast(ipaddr)) {
 825:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* Hash IP multicast address to MAC address.*/
 826:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     mcastaddr.addr[0] = 0x01;
 827:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     mcastaddr.addr[1] = 0x00;
 828:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     mcastaddr.addr[2] = 0x5e;
 829:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 830:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     mcastaddr.addr[4] = ip4_addr3(ipaddr);
 831:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     mcastaddr.addr[5] = ip4_addr4(ipaddr);
 832:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* destination Ethernet address is multicast */
 833:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     dest = &mcastaddr;
 834:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* unicast destination IP address? */
 835:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   } else {
 836:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* outside local network? */
 837:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask))) {
 838:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* interface has default gateway? */
 839:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       if (netif->gw.addr != 0) {
 840:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* send to hardware address of default gateway IP address */
 841:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         ipaddr = &(netif->gw);
 842:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* no default gateway available */
 843:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       } else {
 844:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* no route to destination error (default gateway missing) */
 845:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         return ERR_RTE;
 846:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
 847:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 848:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* queue on destination Ethernet address belonging to ipaddr */
 849:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return etharp_query(netif, ipaddr, q);
 850:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 851:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 852:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* continuation for multicast/broadcast destinations */
 853:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* obtain source Ethernet address of the given interface */
 854:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* send packet directly on the link */
 855:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 856:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 857:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 858:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
 859:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Send an ARP request for the given IP address and/or queue a packet.
 860:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 861:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * If the IP address was not yet in the cache, a pending ARP cache entry
 862:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * is added and an ARP request is sent for the given address. The packet
 863:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * is queued on this entry.
 864:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 865:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * If the IP address was already pending in the cache, a new ARP request
 866:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * is sent for the given address. The packet is queued on this entry.
 867:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 868:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * If the IP address was already stable in the cache, and a packet is
 869:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * given, it is directly sent and no ARP request is sent out. 
 870:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 
 871:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * If the IP address was already stable in the cache, and no packet is
 872:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * given, an ARP request is sent out.
 873:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * 
 874:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param netif The lwIP network interface on which ipaddr
 875:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * must be queried for.
 876:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ipaddr The IP address to be resolved.
 877:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param q If non-NULL, a pbuf that must be delivered to the IP address.
 878:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * q is not freed by this function.
 879:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 880:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @note q must only be ONE packet, not a packet queue!
 881:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 882:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return
 883:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ERR_BUF Could not make room for Ethernet header.
 884:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ERR_MEM Hardware address unknown, and no more ARP entries available
 885:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *   to query for address or queue the packet.
 886:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ERR_MEM Could not queue packet due to memory shortage.
 887:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ERR_RTE No route to destination (no gateway to external networks).
 888:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 889:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
 890:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
 891:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** err_t
 892:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** etharp_query(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
 893:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 894:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 895:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   err_t result = ERR_MEM;
 896:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   s8_t i; /* ARP entry index */
 897:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 898:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* non-unicast address? */
 899:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (ip_addr_isbroadcast(ipaddr, netif) ||
 900:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ip_addr_ismulticast(ipaddr) ||
 901:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ip_addr_isany(ipaddr)) {
 902:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address 
 903:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return ERR_ARG;
 904:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 905:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 906:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* find entry in ARP cache, ask to create entry if queueing packet */
 907:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 908:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   i = find_entry(ipaddr, ETHARP_TRY_HARD, netif);
 909:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 910:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   i = find_entry(ipaddr, ETHARP_TRY_HARD);
 911:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 912:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 913:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* could not find or create entry? */
 914:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (i < 0) {
 915:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 916:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if (q) {
 917:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 918:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ETHARP_STATS_INC(etharp.memerr);
 919:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 920:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return (err_t)i;
 921:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 922:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 923:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* mark a fresh entry as pending (we just sent a request) */
 924:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 925:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     arp_table[i].state = ETHARP_STATE_PENDING;
 926:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 927:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 928:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* { i is either a STABLE or (new or existing) PENDING entry } */
 929:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 930:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ((arp_table[i].state == ETHARP_STATE_PENDING) ||
 931:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    (arp_table[i].state == ETHARP_STATE_STABLE)));
 932:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
 933:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* do we have a pending entry? or an implicit query request? */
 934:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 935:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* try to resolve it; send out ARP request */
 936:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     result = etharp_request(netif, ipaddr);
 937:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if (result != ERR_OK) {
 938:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* ARP request couldn't be sent */
 939:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* We don't re-send arp request in etharp_tmr, but we still queue packets,
 940:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****          since this failure could be temporary, and the next packet calling
 941:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****          etharp_query again could lead to sending the queued packets. */
 942:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
 943:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
 944:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   
 945:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* packet given? */
 946:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (q != NULL) {
 947:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* stable entry? */
 948:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if (arp_table[i].state == ETHARP_STATE_STABLE) {
 949:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* we have a valid IP->Ethernet address mapping */
 950:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* send the packet */
 951:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 952:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* pending entry? (either just created or already pending */
 953:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 954:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ARP_QUEUEING /* queue the given q packet */
 955:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       struct pbuf *p;
 956:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       int copy_needed = 0;
 957:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
 958:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****        * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
 959:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****        * PBUF_ROMs can be left as they are, since ROM must not get changed. */
 960:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       p = q;
 961:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       while (p) {
 962:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 963:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         if(p->type != PBUF_ROM) {
 964:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           copy_needed = 1;
 965:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           break;
 966:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         }
 967:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         p = p->next;
 968:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
 969:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       if(copy_needed) {
 970:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* copy the whole packet into new pbufs */
 971:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 972:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         if(p != NULL) {
 973:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           if (pbuf_copy(p, q) != ERR_OK) {
 974:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             pbuf_free(p);
 975:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             p = NULL;
 976:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           }
 977:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         }
 978:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       } else {
 979:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* referencing the old pbuf is enough */
 980:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         p = q;
 981:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         pbuf_ref(p);
 982:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
 983:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* packet could be taken over? */
 984:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       if (p != NULL) {
 985:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* queue packet ... */
 986:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         struct etharp_q_entry *new_entry;
 987:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* allocate a new arp queue entry */
 988:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         new_entry = memp_malloc(MEMP_ARP_QUEUE);
 989:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         if (new_entry != NULL) {
 990:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           new_entry->next = 0;
 991:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           new_entry->p = p;
 992:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           if(arp_table[i].q != NULL) {
 993:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             /* queue was already existent, append the new entry to the end */
 994:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             struct etharp_q_entry *r;
 995:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             r = arp_table[i].q;
 996:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             while (r->next != NULL) {
 997:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****               r = r->next;
 998:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             }
 999:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             r->next = new_entry;
1000:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           } else {
1001:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             /* queue did not exist, first item in queue */
1002:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****             arp_table[i].q = new_entry;
1003:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           }
1004:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry 
1005:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           result = ERR_OK;
1006:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         } else {
1007:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           /* the pool MEMP_ARP_QUEUE is empty */
1008:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           pbuf_free(p);
1009:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF
1010:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****           /* { result == ERR_MEM } through initialization */
1011:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         }
1012:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       } else {
1013:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         ETHARP_STATS_INC(etharp.memerr);
1014:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_R
1015:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* { result == ERR_MEM } through initialization */
1016:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
1017:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else /* ARP_QUEUEING == 0 */
1018:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* q && state == PENDING && ARP_QUEUEING == 0 => result = ERR_MEM */
1019:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* { result == ERR_MEM } through initialization */
1020:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: Ethernet destination address unkno
1021:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif
1022:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
1023:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
1024:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   return result;
1025:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
1026:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1027:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
1028:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Send a raw ARP packet (opcode and all addresses can be modified)
1029:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
1030:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param netif the lwip network interface on which to send the ARP packet
1031:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ethsrc_addr the source MAC address for the ethernet header
1032:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ethdst_addr the destination MAC address for the ethernet header
1033:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param hwsrc_addr the source MAC address for the ARP protocol header
1034:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ipsrc_addr the source IP address for the ARP protocol header
1035:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param hwdst_addr the destination MAC address for the ARP protocol header
1036:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ipdst_addr the destination IP address for the ARP protocol header
1037:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param opcode the type of the ARP packet
1038:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return ERR_OK if the ARP packet has been sent
1039:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *         ERR_MEM if the ARP packet couldn't be allocated
1040:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *         any other err_t on failure
1041:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
1042:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if !LWIP_AUTOIP
1043:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** static
1044:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
1045:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** err_t
1046:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
1047:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****            const struct eth_addr *ethdst_addr,
1048:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****            const struct eth_addr *hwsrc_addr, const struct ip_addr *ipsrc_addr,
1049:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****            const struct eth_addr *hwdst_addr, const struct ip_addr *ipdst_addr,
1050:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****            const u16_t opcode)
1051:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
1052:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct pbuf *p;
1053:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   err_t result = ERR_OK;
1054:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u8_t k; /* ARP entry index */
1055:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct eth_hdr *ethhdr;
1056:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct etharp_hdr *hdr;
1057:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_AUTOIP
1058:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   const u8_t * ethdst_hwaddr;
1059:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
1060:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1061:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* allocate a pbuf for the outgoing ARP request packet */
1062:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
1063:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* could allocate a pbuf for an ARP request? */
1064:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (p == NULL) {
1065:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
1066:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ("etharp_raw: could not allocate pbuf for ARP request.\n"));
1067:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.memerr);
1068:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     return ERR_MEM;
1069:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
1070:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
1071:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****               (p->len >= SIZEOF_ETHARP_PACKET));
1072:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1073:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ethhdr = p->payload;
1074:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
1075:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
1076:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   hdr->opcode = htons(opcode);
1077:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1078:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
1079:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****               (netif->hwaddr_len == ETHARP_HWADDR_LEN));
1080:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   k = ETHARP_HWADDR_LEN;
1081:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_AUTOIP
1082:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* If we are using Link-Local, ARP packets must be broadcast on the
1083:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****    * link layer. (See RFC3927 Section 2.5) */
1084:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8_t*)
1085:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
1086:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* Write MAC-Addresses (combined loop for both headers) */
1087:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   while(k > 0) {
1088:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     k--;
1089:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* Write the ARP MAC-Addresses */
1090:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     hdr->shwaddr.addr[k] = hwsrc_addr->addr[k];
1091:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     hdr->dhwaddr.addr[k] = hwdst_addr->addr[k];
1092:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* Write the Ethernet MAC-Addresses */
1093:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if LWIP_AUTOIP
1094:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ethhdr->dest.addr[k] = ethdst_hwaddr[k];
1095:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #else  /* LWIP_AUTOIP */
1096:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ethhdr->dest.addr[k] = ethdst_addr->addr[k];
1097:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
1098:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ethhdr->src.addr[k]  = ethsrc_addr->addr[k];
1099:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
1100:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   hdr->sipaddr = *(struct ip_addr2 *)ipsrc_addr;
1101:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   hdr->dipaddr = *(struct ip_addr2 *)ipdst_addr;
1102:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1103:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   hdr->hwtype = htons(HWTYPE_ETHERNET);
1104:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   hdr->proto = htons(ETHTYPE_IP);
1105:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* set hwlen and protolen together */
1106:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   hdr->_hwlen_protolen = htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr));
1107:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1108:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ethhdr->type = htons(ETHTYPE_ARP);
1109:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* send ARP query */
1110:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   result = netif->linkoutput(netif, p);
1111:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ETHARP_STATS_INC(etharp.xmit);
1112:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* free ARP query packet */
1113:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   pbuf_free(p);
1114:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   p = NULL;
1115:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* could not allocate pbuf for ARP request */
1116:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1117:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   return result;
1118:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
1119:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1120:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
1121:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Send an ARP request packet asking for ipaddr.
1122:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
1123:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param netif the lwip network interface on which to send the request
1124:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param ipaddr the IP address for which to ask
1125:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @return ERR_OK if the request has been sent
1126:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *         ERR_MEM if the ARP packet couldn't be allocated
1127:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *         any other err_t on failure
1128:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
1129:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** err_t
1130:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** etharp_request(struct netif *netif, struct ip_addr *ipaddr)
1131:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
  80              		.loc 1 1131 0
  81 0040 F0B5     		push	{r4, r5, r6, r7, lr}
  82              	.LCFI1:
  83 0042 5746     		mov	r7, sl
  84 0044 4E46     		mov	r6, r9
  85 0046 4546     		mov	r5, r8
  86 0048 E0B4     		push	{r5, r6, r7}
  87              	.LCFI2:
  88              	.LVL11:
  89 004a 8046     		mov	r8, r0
  90 004c 8946     		mov	r9, r1
1132:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
1133:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
  91              		.loc 1 1133 0
  92 004e 071C     		mov	r7, r0
  93 0050 2737     		add	r7, r7, #39
  94              	.LBB4:
  95              		.loc 1 1062 0
  96 0052 0320     		mov	r0, #3
  97              	.LVL12:
  98 0054 2A21     		mov	r1, #42
  99              	.LVL13:
 100 0056 0022     		mov	r2, #0
 101 0058 FFF7FEFF 		bl	pbuf_alloc
 102 005c 8246     		mov	sl, r0
 103              	.LVL14:
 104              	.LBB5:
 105              		.loc 1 1064 0
 106 005e 0028     		cmp	r0, #0
 107 0060 05D1     		bne	.L7
 108              		.loc 1 1067 0
 109 0062 2A4A     		ldr	r2, .L12
 110 0064 938C     		ldrh	r3, [r2, #36]
 111 0066 0133     		add	r3, r3, #1
 112 0068 9384     		strh	r3, [r2, #36]
 113 006a FF24     		mov	r4, #255
 114              	.LVL15:
 115 006c 44E0     		b	.L8
 116              	.LVL16:
 117              	.L7:
 118              		.loc 1 1073 0
 119 006e 5146     		mov	r1, sl
 120 0070 4D68     		ldr	r5, [r1, #4]
 121              	.LVL17:
 122              		.loc 1 1074 0
 123 0072 2C1C     		mov	r4, r5
 124              	.LVL18:
 125 0074 0E34     		add	r4, r4, #14
 126              	.LBE5:
 127              		.loc 1 1076 0
 128 0076 0120     		mov	r0, #1
 129 0078 FFF7FEFF 		bl	htons
 130              	.LBB6:
 131 007c E080     		strh	r0, [r4, #6]
 132 007e 0621     		mov	r1, #6
 133              	.LVL19:
 134              		.loc 1 1091 0
 135 0080 234E     		ldr	r6, .L12+4
 136              		.loc 1 1096 0
 137 0082 2448     		ldr	r0, .L12+8
 138              	.L9:
 139              		.loc 1 1088 0
 140 0084 4B1E     		sub	r3, r1, #1
 141 0086 1B06     		lsl	r3, r3, #24
 142 0088 190E     		lsr	r1, r3, #24
 143              	.LVL20:
 144              		.loc 1 1090 0
 145 008a 6218     		add	r2, r4, r1
 146 008c 7B5C     		ldrb	r3, [r7, r1]
 147 008e 1372     		strb	r3, [r2, #8]
 148              		.loc 1 1091 0
 149 0090 735C     		ldrb	r3, [r6, r1]
 150 0092 1375     		strb	r3, [r2, #20]
 151              		.loc 1 1096 0
 152 0094 435C     		ldrb	r3, [r0, r1]
 153 0096 6B54     		strb	r3, [r5, r1]
 154              		.loc 1 1098 0
 155 0098 6A18     		add	r2, r5, r1
 156 009a 7B5C     		ldrb	r3, [r7, r1]
 157 009c 1372     		strb	r3, [r2, #8]
 158              		.loc 1 1087 0
 159 009e 0029     		cmp	r1, #0
 160 00a0 F0D1     		bne	.L9
 161              		.loc 1 1100 0
 162 00a2 4346     		mov	r3, r8
 163 00a4 0433     		add	r3, r3, #4
 164              	.LBE6:
 165 00a6 1A88     		ldrh	r2, [r3]
 166 00a8 5B88     		ldrh	r3, [r3, #2]
 167 00aa 6382     		strh	r3, [r4, #18]
 168 00ac 2282     		strh	r2, [r4, #16]
 169              		.loc 1 1101 0
 170 00ae 4B46     		mov	r3, r9
 171 00b0 1A88     		ldrh	r2, [r3]
 172 00b2 5B88     		ldrh	r3, [r3, #2]
 173 00b4 E383     		strh	r3, [r4, #30]
 174 00b6 A283     		strh	r2, [r4, #28]
 175              		.loc 1 1103 0
 176 00b8 0120     		mov	r0, #1
 177 00ba FFF7FEFF 		bl	htons
 178              	.LVL21:
 179              	.LBB7:
 180 00be 2080     		strh	r0, [r4]
 181              	.LBE7:
 182              		.loc 1 1104 0
 183 00c0 8020     		mov	r0, #128
 184 00c2 0001     		lsl	r0, r0, #4
 185 00c4 FFF7FEFF 		bl	htons
 186              	.LBB8:
 187 00c8 6080     		strh	r0, [r4, #2]
 188              	.LBE8:
 189              		.loc 1 1106 0
 190 00ca 1348     		ldr	r0, .L12+12
 191 00cc FFF7FEFF 		bl	htons
 192              	.LBB9:
 193 00d0 A080     		strh	r0, [r4, #4]
 194              	.LBE9:
 195              		.loc 1 1108 0
 196 00d2 1248     		ldr	r0, .L12+16
 197 00d4 FFF7FEFF 		bl	htons
 198              	.LBB10:
 199 00d8 2882     		strh	r0, [r5, #16]
 200              	.LBE10:
 201              		.loc 1 1110 0
 202 00da 4146     		mov	r1, r8
 203 00dc 8B69     		ldr	r3, [r1, #24]
 204 00de 4046     		mov	r0, r8
 205 00e0 5146     		mov	r1, sl
 206 00e2 00F00DFC 		bl	.L5
 207 00e6 0006     		lsl	r0, r0, #24
 208 00e8 040E     		lsr	r4, r0, #24
 209              	.LVL22:
 210              	.LBB11:
 211              		.loc 1 1111 0
 212 00ea 084A     		ldr	r2, .L12
 213 00ec 138B     		ldrh	r3, [r2, #24]
 214 00ee 0133     		add	r3, r3, #1
 215 00f0 1383     		strh	r3, [r2, #24]
 216              		.loc 1 1113 0
 217 00f2 5046     		mov	r0, sl
 218 00f4 FFF7FEFF 		bl	pbuf_free
 219              	.L8:
 220 00f8 2006     		lsl	r0, r4, #24
 221 00fa 0016     		asr	r0, r0, #24
 222              	.LBE11:
 223              	.LBE4:
1134:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****                     (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
1135:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****                     ipaddr, ARP_REQUEST);
1136:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 224              		.loc 1 1136 0
 225              		@ sp needed for prologue
 226              	.LVL23:
 227              	.LVL24:
 228              	.LVL25:
 229              	.LVL26:
 230              	.LVL27:
 231 00fc 1CBC     		pop	{r2, r3, r4}
 232 00fe 9046     		mov	r8, r2
 233 0100 9946     		mov	r9, r3
 234 0102 A246     		mov	sl, r4
 235 0104 F0BC     		pop	{r4, r5, r6, r7}
 236 0106 02BC     		pop	{r1}
 237 0108 0847     		bx	r1
 238              	.L13:
 239 010a C046     		.align	2
 240              	.L12:
 241 010c 00000000 		.word	lwip_stats
 242 0110 00000000 		.word	ethzero
 243 0114 00000000 		.word	ethbroadcast
 244 0118 04060000 		.word	1540
 245 011c 06080000 		.word	2054
 246              	.LFE13:
 248              		.align	2
 249              		.code	16
 250              		.thumb_func
 252              	free_etharp_q:
 253              	.LFB2:
 254              		.loc 1 144 0
 255 0120 30B5     		push	{r4, r5, lr}
 256              	.LCFI3:
 257              	.LVL28:
 258 0122 041C     		mov	r4, r0
 259              		.loc 1 148 0
 260 0124 0028     		cmp	r0, #0
 261 0126 0BD0     		beq	.L17
 262              	.LVL29:
 263              	.L18:
 264              		.loc 1 150 0
 265 0128 2568     		ldr	r5, [r4]
 266              	.LVL30:
 267              		.loc 1 152 0
 268 012a 6068     		ldr	r0, [r4, #4]
 269 012c FFF7FEFF 		bl	pbuf_free
 270              		.loc 1 153 0
 271 0130 0A20     		mov	r0, #10
 272 0132 211C     		mov	r1, r4
 273 0134 FFF7FEFF 		bl	memp_free
 274              		.loc 1 148 0
 275 0138 002D     		cmp	r5, #0
 276 013a 01D0     		beq	.L17
 277 013c 2C1C     		mov	r4, r5
 278 013e F3E7     		b	.L18
 279              	.LVL31:
 280              	.L17:
 281              		.loc 1 155 0
 282              		@ sp needed for prologue
 283              	.LVL32:
 284              	.LVL33:
 285 0140 30BC     		pop	{r4, r5}
 286 0142 01BC     		pop	{r0}
 287 0144 0047     		bx	r0
 288              	.LFE2:
 290 0146 C046     		.align	2
 291              		.code	16
 292              		.thumb_func
 294              	find_entry:
 295              	.LFB4:
 296              		.loc 1 232 0
 297 0148 F0B5     		push	{r4, r5, r6, r7, lr}
 298              	.LCFI4:
 299 014a 5F46     		mov	r7, fp
 300 014c 5646     		mov	r6, sl
 301 014e 4D46     		mov	r5, r9
 302 0150 4446     		mov	r4, r8
 303 0152 F0B4     		push	{r4, r5, r6, r7}
 304              	.LCFI5:
 305              	.LVL34:
 306 0154 82B0     		sub	sp, sp, #8
 307              	.LCFI6:
 308 0156 8246     		mov	sl, r0
 309 0158 0906     		lsl	r1, r1, #24
 310              	.LVL35:
 311 015a 090E     		lsr	r1, r1, #24
 312 015c 0091     		str	r1, [sp]
 313              	.LVL36:
 314              		.loc 1 245 0
 315 015e 0028     		cmp	r0, #0
 316 0160 18D0     		beq	.L20
 317              		.loc 1 261 0
 318 0162 674B     		ldr	r3, .L39
 319 0164 1878     		ldrb	r0, [r3]
 320              	.LVL37:
 321 0166 674A     		ldr	r2, .L39+4
 322 0168 C300     		lsl	r3, r0, #3
 323 016a 1B1A     		sub	r3, r3, r0
 324 016c 9B00     		lsl	r3, r3, #2
 325 016e D218     		add	r2, r2, r3
 326 0170 1369     		ldr	r3, [r2, #16]
 327 0172 022B     		cmp	r3, #2
 328 0174 0ED1     		bne	.L20
 329              		.loc 1 263 0
 330 0176 6349     		ldr	r1, .L39+4
 331 0178 C300     		lsl	r3, r0, #3
 332 017a 1B1A     		sub	r3, r3, r0
 333 017c 0133     		add	r3, r3, #1
 334 017e 9B00     		lsl	r3, r3, #2
 335 0180 5446     		mov	r4, sl
 336 0182 2268     		ldr	r2, [r4]
 337 0184 5B58     		ldr	r3, [r3, r1]
 338 0186 9A42     		cmp	r2, r3
 339 0188 04D1     		bne	.L20
 340              		.loc 1 265 0
 341 018a 5F4A     		ldr	r2, .L39+8
 342 018c D38D     		ldrh	r3, [r2, #46]
 343 018e 0133     		add	r3, r3, #1
 344 0190 D385     		strh	r3, [r2, #46]
 345 0192 A9E0     		b	.L21
 346              	.LVL38:
 347              	.L20:
 348              		.loc 1 266 0
 349 0194 5D49     		ldr	r1, .L39+12
 350 0196 0A22     		mov	r2, #10
 351 0198 0192     		str	r2, [sp, #4]
 352              	.LVL39:
 353 019a 9346     		mov	fp, r2
 354              	.LVL40:
 355 019c 9046     		mov	r8, r2
 356              	.LVL41:
 357 019e 0020     		mov	r0, #0
 358              	.LVL42:
 359 01a0 8446     		mov	ip, r0
 360              	.LVL43:
 361 01a2 0027     		mov	r7, #0
 362              	.LVL44:
 363 01a4 9146     		mov	r9, r2
 364              	.LVL45:
 365 01a6 0026     		mov	r6, #0
 366              	.LVL46:
 367              	.L30:
 368              		.loc 1 289 0
 369 01a8 4446     		mov	r4, r8
 370 01aa 2306     		lsl	r3, r4, #24
 371 01ac 1B16     		asr	r3, r3, #24
 372 01ae 0A2B     		cmp	r3, #10
 373 01b0 07D1     		bne	.L22
 374 01b2 CB68     		ldr	r3, [r1, #12]
 375 01b4 002B     		cmp	r3, #0
 376 01b6 04D1     		bne	.L22
 377 01b8 8046     		mov	r8, r0
 378              	.LVL47:
 379 01ba 6546     		mov	r5, ip
 380 01bc 3C1C     		mov	r4, r7
 381 01be 321C     		mov	r2, r6
 382 01c0 34E0     		b	.L23
 383              	.LVL48:
 384              	.L22:
 385              		.loc 1 295 0
 386 01c2 CB68     		ldr	r3, [r1, #12]
 387 01c4 012B     		cmp	r3, #1
 388 01c6 1BD1     		bne	.L24
 389              		.loc 1 297 0
 390 01c8 5246     		mov	r2, sl
 391 01ca 002A     		cmp	r2, #0
 392 01cc 06D0     		beq	.L25
 393 01ce 1268     		ldr	r2, [r2]
 394 01d0 0B68     		ldr	r3, [r1]
 395 01d2 9A42     		cmp	r2, r3
 396 01d4 02D1     		bne	.L25
 397              		.loc 1 303 0
 398 01d6 4A4B     		ldr	r3, .L39
 399 01d8 1870     		strb	r0, [r3]
 400 01da 85E0     		b	.L21
 401              	.L25:
 402              		.loc 1 308 0
 403 01dc 0B1F     		sub	r3, r1, #4
 404 01de 1B68     		ldr	r3, [r3]
 405 01e0 002B     		cmp	r3, #0
 406 01e2 06D0     		beq	.L26
 407              		.loc 1 309 0
 408 01e4 0A7C     		ldrb	r2, [r1, #16]
 409              	.LVL49:
 410 01e6 B242     		cmp	r2, r6
 411 01e8 1DD3     		bcc	.L27
 412              	.LVL50:
 413 01ea 8146     		mov	r9, r0
 414              	.LVL51:
 415 01ec 6546     		mov	r5, ip
 416 01ee 3C1C     		mov	r4, r7
 417 01f0 1CE0     		b	.L23
 418              	.LVL52:
 419              	.L26:
 420              		.loc 1 316 0
 421 01f2 0D7C     		ldrb	r5, [r1, #16]
 422              	.LVL53:
 423 01f4 AC45     		cmp	ip, r5
 424 01f6 16D8     		bhi	.L27
 425 01f8 0190     		str	r0, [sp, #4]
 426              	.LVL54:
 427 01fa 3C1C     		mov	r4, r7
 428 01fc 321C     		mov	r2, r6
 429 01fe 15E0     		b	.L23
 430              	.LVL55:
 431              	.L24:
 432              		.loc 1 323 0
 433 0200 022B     		cmp	r3, #2
 434 0202 10D1     		bne	.L27
 435              		.loc 1 325 0
 436 0204 5346     		mov	r3, sl
 437 0206 002B     		cmp	r3, #0
 438 0208 06D0     		beq	.L28
 439 020a 1A68     		ldr	r2, [r3]
 440 020c 0B68     		ldr	r3, [r1]
 441 020e 9A42     		cmp	r2, r3
 442 0210 02D1     		bne	.L28
 443              		.loc 1 331 0
 444 0212 3B4B     		ldr	r3, .L39
 445 0214 1870     		strb	r0, [r3]
 446 0216 67E0     		b	.L21
 447              	.LVL56:
 448              	.L28:
 449              		.loc 1 335 0
 450 0218 0C7C     		ldrb	r4, [r1, #16]
 451              	.LVL57:
 452 021a A742     		cmp	r7, r4
 453 021c 03D8     		bhi	.L27
 454 021e 8346     		mov	fp, r0
 455              	.LVL58:
 456 0220 6546     		mov	r5, ip
 457 0222 321C     		mov	r2, r6
 458 0224 02E0     		b	.L23
 459              	.LVL59:
 460              	.L27:
 461 0226 6546     		mov	r5, ip
 462 0228 3C1C     		mov	r4, r7
 463 022a 321C     		mov	r2, r6
 464              	.LVL60:
 465              	.L23:
 466              		.loc 1 287 0
 467 022c 431C     		add	r3, r0, #1
 468 022e 1B06     		lsl	r3, r3, #24
 469 0230 180E     		lsr	r0, r3, #24
 470              	.LVL61:
 471 0232 1C31     		add	r1, r1, #28
 472 0234 0A28     		cmp	r0, #10
 473 0236 03D0     		beq	.L29
 474 0238 AC46     		mov	ip, r5
 475 023a 271C     		mov	r7, r4
 476 023c 161C     		mov	r6, r2
 477 023e B3E7     		b	.L30
 478              	.L29:
 479              		.loc 1 344 0
 480 0240 4446     		mov	r4, r8
 481              	.LVL62:
 482 0242 2306     		lsl	r3, r4, #24
 483 0244 1B16     		asr	r3, r3, #24
 484 0246 0A2B     		cmp	r3, #10
 485 0248 02D1     		bne	.L31
 486 024a 009A     		ldr	r2, [sp]
 487              	.LVL63:
 488 024c D207     		lsl	r2, r2, #31
 489 024e 4AD5     		bpl	.L32
 490              	.LVL64:
 491              	.L31:
 492 0250 009B     		ldr	r3, [sp]
 493 0252 9B07     		lsl	r3, r3, #30
 494 0254 47D4     		bmi	.L32
 495              	.LVL65:
 496              		.loc 1 361 0
 497 0256 4446     		mov	r4, r8
 498 0258 2306     		lsl	r3, r4, #24
 499 025a 1B16     		asr	r3, r3, #24
 500 025c 092B     		cmp	r3, #9
 501 025e 02DC     		bgt	.L33
 502              		.loc 1 362 0
 503 0260 2306     		lsl	r3, r4, #24
 504 0262 1E0E     		lsr	r6, r3, #24
 505              	.LVL66:
 506 0264 1FE0     		b	.L34
 507              	.LVL67:
 508              	.L33:
 509              		.loc 1 366 0
 510 0266 5A46     		mov	r2, fp
 511 0268 1306     		lsl	r3, r2, #24
 512 026a 1B16     		asr	r3, r3, #24
 513 026c 092B     		cmp	r3, #9
 514 026e 02DC     		bgt	.L35
 515              		.loc 1 368 0
 516 0270 1306     		lsl	r3, r2, #24
 517 0272 1E0E     		lsr	r6, r3, #24
 518              	.LVL68:
 519 0274 17E0     		b	.L34
 520              	.LVL69:
 521              	.L35:
 522              		.loc 1 375 0
 523 0276 019C     		ldr	r4, [sp, #4]
 524 0278 2306     		lsl	r3, r4, #24
 525 027a 1B16     		asr	r3, r3, #24
 526 027c 092B     		cmp	r3, #9
 527 027e 02DC     		bgt	.L36
 528              	.LVL70:
 529              		.loc 1 377 0
 530 0280 2306     		lsl	r3, r4, #24
 531 0282 1E0E     		lsr	r6, r3, #24
 532              	.LVL71:
 533 0284 0FE0     		b	.L34
 534              	.LVL72:
 535              	.L36:
 536              		.loc 1 381 0
 537 0286 4A46     		mov	r2, r9
 538 0288 1306     		lsl	r3, r2, #24
 539 028a 1B16     		asr	r3, r3, #24
 540 028c 092B     		cmp	r3, #9
 541 028e 2ADC     		bgt	.L32
 542              		.loc 1 383 0
 543 0290 1306     		lsl	r3, r2, #24
 544 0292 1E0E     		lsr	r6, r3, #24
 545              	.LVL73:
 546              		.loc 1 385 0
 547 0294 1B4D     		ldr	r5, .L39+4
 548              	.LVL74:
 549 0296 F400     		lsl	r4, r6, #3
 550 0298 A41B     		sub	r4, r4, r6
 551 029a A400     		lsl	r4, r4, #2
 552 029c 6059     		ldr	r0, [r4, r5]
 553 029e FFF73FFF 		bl	free_etharp_q
 554              	.LVL75:
 555              		.loc 1 386 0
 556 02a2 0023     		mov	r3, #0
 557 02a4 6351     		str	r3, [r4, r5]
 558              	.LVL76:
 559              	.L34:
 560              		.loc 1 401 0
 561 02a6 301C     		mov	r0, r6
 562 02a8 164B     		ldr	r3, .L39+4
 563 02aa F200     		lsl	r2, r6, #3
 564              	.LVL77:
 565 02ac 921B     		sub	r2, r2, r6
 566 02ae 9200     		lsl	r2, r2, #2
 567 02b0 9B18     		add	r3, r3, r2
 568 02b2 1033     		add	r3, r3, #16
 569 02b4 0022     		mov	r2, #0
 570 02b6 1A60     		str	r2, [r3]
 571              		.loc 1 404 0
 572 02b8 5346     		mov	r3, sl
 573 02ba 002B     		cmp	r3, #0
 574 02bc 07D0     		beq	.L37
 575              		.loc 1 406 0
 576 02be 114B     		ldr	r3, .L39+4
 577 02c0 F200     		lsl	r2, r6, #3
 578              	.LVL78:
 579 02c2 921B     		sub	r2, r2, r6
 580 02c4 0132     		add	r2, r2, #1
 581 02c6 9200     		lsl	r2, r2, #2
 582 02c8 5446     		mov	r4, sl
 583 02ca 2168     		ldr	r1, [r4]
 584 02cc D150     		str	r1, [r2, r3]
 585              	.LVL79:
 586              	.L37:
 587              		.loc 1 408 0
 588 02ce 0D4A     		ldr	r2, .L39+4
 589 02d0 C300     		lsl	r3, r0, #3
 590 02d2 1B1A     		sub	r3, r3, r0
 591 02d4 9B00     		lsl	r3, r3, #2
 592 02d6 D218     		add	r2, r2, r3
 593 02d8 1432     		add	r2, r2, #20
 594 02da 0023     		mov	r3, #0
 595 02dc 1370     		strb	r3, [r2]
 596              		.loc 1 412 0
 597 02de 084B     		ldr	r3, .L39
 598 02e0 1E70     		strb	r6, [r3]
 599              		.loc 1 414 0
 600 02e2 301C     		mov	r0, r6
 601 02e4 00E0     		b	.L21
 602              	.LVL80:
 603              	.L32:
 604 02e6 FF20     		mov	r0, #255
 605              	.LVL81:
 606              	.L21:
 607 02e8 0006     		lsl	r0, r0, #24
 608              	.LVL82:
 609 02ea 0016     		asr	r0, r0, #24
 610              		.loc 1 415 0
 611 02ec 02B0     		add	sp, sp, #8
 612              		@ sp needed for prologue
 613              	.LVL83:
 614              	.LVL84:
 615              	.LVL85:
 616              	.LVL86:
 617              	.LVL87:
 618              	.LVL88:
 619              	.LVL89:
 620 02ee 3CBC     		pop	{r2, r3, r4, r5}
 621 02f0 9046     		mov	r8, r2
 622 02f2 9946     		mov	r9, r3
 623 02f4 A246     		mov	sl, r4
 624 02f6 AB46     		mov	fp, r5
 625 02f8 F0BC     		pop	{r4, r5, r6, r7}
 626 02fa 02BC     		pop	{r1}
 627 02fc 0847     		bx	r1
 628              	.L40:
 629 02fe C046     		.align	2
 630              	.L39:
 631 0300 18010000 		.word	etharp_cached_entry
 632 0304 00000000 		.word	arp_table
 633 0308 00000000 		.word	lwip_stats
 634 030c 04000000 		.word	arp_table+4
 635              	.LFE4:
 637              		.align	2
 638              		.global	etharp_query
 639              		.code	16
 640              		.thumb_func
 642              	etharp_query:
 643              	.LFB11:
 644              		.loc 1 893 0
 645 0310 F0B5     		push	{r4, r5, r6, r7, lr}
 646              	.LCFI7:
 647 0312 4746     		mov	r7, r8
 648 0314 80B4     		push	{r7}
 649              	.LCFI8:
 650              	.LVL90:
 651 0316 071C     		mov	r7, r0
 652 0318 0E1C     		mov	r6, r1
 653 031a 151C     		mov	r5, r2
 654              		.loc 1 899 0
 655 031c 081C     		mov	r0, r1
 656              	.LVL91:
 657 031e 391C     		mov	r1, r7
 658              	.LVL92:
 659 0320 FFF7FEFF 		bl	ip_addr_isbroadcast
 660              	.LVL93:
 661 0324 0028     		cmp	r0, #0
 662 0326 00D0     		beq	.LCB639
 663 0328 A1E0     		b	.L42	@long jump
 664              	.LCB639:
 665 032a 3168     		ldr	r1, [r6]
 666 032c 8846     		mov	r8, r1
 667 032e F020     		mov	r0, #240
 668 0330 0006     		lsl	r0, r0, #24
 669 0332 FFF7FEFF 		bl	ntohl
 670 0336 041C     		mov	r4, r0
 671 0338 E020     		mov	r0, #224
 672 033a 0006     		lsl	r0, r0, #24
 673 033c FFF7FEFF 		bl	ntohl
 674 0340 4346     		mov	r3, r8
 675 0342 1C40     		and	r4, r4, r3
 676 0344 8442     		cmp	r4, r0
 677 0346 00D1     		bne	.LCB652
 678 0348 91E0     		b	.L42	@long jump
 679              	.LCB652:
 680 034a 002E     		cmp	r6, #0
 681 034c 00D1     		bne	.LCB654
 682 034e 8EE0     		b	.L42	@long jump
 683              	.LCB654:
 684 0350 3368     		ldr	r3, [r6]
 685 0352 002B     		cmp	r3, #0
 686 0354 00D1     		bne	.LCB657
 687 0356 8AE0     		b	.L42	@long jump
 688              	.LCB657:
 689              		.loc 1 910 0
 690 0358 301C     		mov	r0, r6
 691 035a 0121     		mov	r1, #1
 692 035c FFF7F4FE 		bl	find_entry
 693 0360 0006     		lsl	r0, r0, #24
 694              		.loc 1 914 0
 695 0362 010E     		lsr	r1, r0, #24
 696              	.LVL94:
 697 0364 0028     		cmp	r0, #0
 698 0366 07DA     		bge	.L43
 699              		.loc 1 916 0
 700 0368 002D     		cmp	r5, #0
 701 036a 00D1     		bne	.LCB670
 702 036c 82E0     		b	.L44	@long jump
 703              	.LCB670:
 704              		.loc 1 918 0
 705 036e 4A4A     		ldr	r2, .L64
 706 0370 938C     		ldrh	r3, [r2, #36]
 707 0372 0133     		add	r3, r3, #1
 708 0374 9384     		strh	r3, [r2, #36]
 709 0376 7DE0     		b	.L44
 710              	.L43:
 711              		.loc 1 924 0
 712 0378 0B06     		lsl	r3, r1, #24
 713 037a 1B16     		asr	r3, r3, #24
 714 037c 9846     		mov	r8, r3
 715 037e 474A     		ldr	r2, .L64+4
 716 0380 DB00     		lsl	r3, r3, #3
 717 0382 4146     		mov	r1, r8
 718              	.LVL95:
 719 0384 5B1A     		sub	r3, r3, r1
 720 0386 9B00     		lsl	r3, r3, #2
 721 0388 D218     		add	r2, r2, r3
 722 038a 1369     		ldr	r3, [r2, #16]
 723 038c 002B     		cmp	r3, #0
 724 038e 07D1     		bne	.L45
 725              		.loc 1 925 0
 726 0390 424B     		ldr	r3, .L64+4
 727 0392 CA00     		lsl	r2, r1, #3
 728 0394 521A     		sub	r2, r2, r1
 729 0396 9200     		lsl	r2, r2, #2
 730 0398 9B18     		add	r3, r3, r2
 731 039a 0122     		mov	r2, #1
 732 039c 1A61     		str	r2, [r3, #16]
 733 039e 05E0     		b	.L46
 734              	.L45:
 735              		.loc 1 934 0
 736 03a0 012B     		cmp	r3, #1
 737 03a2 03D0     		beq	.L46
 738 03a4 002D     		cmp	r5, #0
 739 03a6 01D0     		beq	.L46
 740 03a8 FF26     		mov	r6, #255
 741              	.LVL96:
 742 03aa 05E0     		b	.L47
 743              	.LVL97:
 744              	.L46:
 745              		.loc 1 936 0
 746 03ac 381C     		mov	r0, r7
 747 03ae 311C     		mov	r1, r6
 748 03b0 FFF7FEFF 		bl	etharp_request
 749 03b4 0006     		lsl	r0, r0, #24
 750 03b6 060E     		lsr	r6, r0, #24
 751              	.LVL98:
 752              	.L47:
 753              		.loc 1 946 0
 754 03b8 002D     		cmp	r5, #0
 755 03ba 5AD0     		beq	.L48
 756              		.loc 1 948 0
 757 03bc 374A     		ldr	r2, .L64+4
 758 03be 4146     		mov	r1, r8
 759 03c0 CB00     		lsl	r3, r1, #3
 760 03c2 5B1A     		sub	r3, r3, r1
 761 03c4 9B00     		lsl	r3, r3, #2
 762 03c6 D218     		add	r2, r2, r3
 763 03c8 1369     		ldr	r3, [r2, #16]
 764 03ca 022B     		cmp	r3, #2
 765 03cc 0FD1     		bne	.L49
 766              		.loc 1 951 0
 767 03ce 3A1C     		mov	r2, r7
 768 03d0 2732     		add	r2, r2, #39
 769 03d2 C900     		lsl	r1, r1, #3
 770 03d4 4346     		mov	r3, r8
 771 03d6 C91A     		sub	r1, r1, r3
 772 03d8 8900     		lsl	r1, r1, #2
 773 03da 0831     		add	r1, r1, #8
 774 03dc 2F4B     		ldr	r3, .L64+4
 775 03de 5B18     		add	r3, r3, r1
 776 03e0 381C     		mov	r0, r7
 777 03e2 291C     		mov	r1, r5
 778 03e4 FFF70CFE 		bl	etharp_send_ip
 779 03e8 0006     		lsl	r0, r0, #24
 780 03ea 010E     		lsr	r1, r0, #24
 781              	.LVL99:
 782 03ec 42E0     		b	.L44
 783              	.LVL100:
 784              	.L49:
 785              		.loc 1 953 0
 786 03ee 012B     		cmp	r3, #1
 787 03f0 3FD1     		bne	.L48
 788 03f2 2A1C     		mov	r2, r5
 789              	.LVL101:
 790              	.L51:
 791              	.LBB12:
 792              		.loc 1 963 0
 793 03f4 137B     		ldrb	r3, [r2, #12]
 794 03f6 012B     		cmp	r3, #1
 795 03f8 03D1     		bne	.L50
 796              		.loc 1 967 0
 797 03fa 1268     		ldr	r2, [r2]
 798              		.loc 1 961 0
 799 03fc 002A     		cmp	r2, #0
 800 03fe F9D1     		bne	.L51
 801 0400 3FE0     		b	.L63
 802              	.L50:
 803              		.loc 1 971 0
 804 0402 1189     		ldrh	r1, [r2, #8]
 805 0404 0320     		mov	r0, #3
 806 0406 0022     		mov	r2, #0
 807              	.LVL102:
 808 0408 FFF7FEFF 		bl	pbuf_alloc
 809 040c 041C     		mov	r4, r0
 810              	.LVL103:
 811              		.loc 1 972 0
 812 040e 0028     		cmp	r0, #0
 813 0410 3CD0     		beq	.L53
 814              	.LVL104:
 815              		.loc 1 973 0
 816 0412 291C     		mov	r1, r5
 817 0414 FFF7FEFF 		bl	pbuf_copy
 818              	.LVL105:
 819 0418 0006     		lsl	r0, r0, #24
 820 041a 0028     		cmp	r0, #0
 821 041c 03D0     		beq	.L54
 822              		.loc 1 974 0
 823 041e 201C     		mov	r0, r4
 824 0420 FFF7FEFF 		bl	pbuf_free
 825 0424 32E0     		b	.L53
 826              	.L54:
 827              	.LBB13:
 828              		.loc 1 988 0
 829 0426 0A20     		mov	r0, #10
 830 0428 FFF7FEFF 		bl	memp_malloc
 831              		.loc 1 989 0
 832 042c 0028     		cmp	r0, #0
 833 042e 19D0     		beq	.L55
 834              	.LVL106:
 835              		.loc 1 990 0
 836 0430 0023     		mov	r3, #0
 837 0432 0360     		str	r3, [r0]
 838              		.loc 1 991 0
 839 0434 4460     		str	r4, [r0, #4]
 840              		.loc 1 992 0
 841 0436 194A     		ldr	r2, .L64+4
 842 0438 4146     		mov	r1, r8
 843 043a CB00     		lsl	r3, r1, #3
 844 043c 5B1A     		sub	r3, r3, r1
 845 043e 9B00     		lsl	r3, r3, #2
 846 0440 9B58     		ldr	r3, [r3, r2]
 847              	.LVL107:
 848 0442 002B     		cmp	r3, #0
 849 0444 06D0     		beq	.L56
 850              	.L59:
 851              	.LBB14:
 852              		.loc 1 996 0
 853 0446 1A1C     		mov	r2, r3
 854 0448 1B68     		ldr	r3, [r3]
 855 044a 002B     		cmp	r3, #0
 856 044c FBD1     		bne	.L59
 857              		.loc 1 999 0
 858 044e 1060     		str	r0, [r2]
 859 0450 0021     		mov	r1, #0
 860              	.LVL108:
 861 0452 0FE0     		b	.L44
 862              	.LVL109:
 863              	.L56:
 864              	.LBE14:
 865              		.loc 1 1002 0
 866 0454 114A     		ldr	r2, .L64+4
 867 0456 4146     		mov	r1, r8
 868 0458 CB00     		lsl	r3, r1, #3
 869              	.LVL110:
 870 045a 5B1A     		sub	r3, r3, r1
 871 045c 9B00     		lsl	r3, r3, #2
 872 045e 9850     		str	r0, [r3, r2]
 873 0460 0021     		mov	r1, #0
 874              	.LVL111:
 875 0462 07E0     		b	.L44
 876              	.LVL112:
 877              	.L55:
 878              		.loc 1 1008 0
 879 0464 201C     		mov	r0, r4
 880              	.LVL113:
 881 0466 FFF7FEFF 		bl	pbuf_free
 882 046a 311C     		mov	r1, r6
 883              	.LVL114:
 884 046c 02E0     		b	.L44
 885              	.LVL115:
 886              	.L42:
 887 046e F621     		mov	r1, #246
 888              	.LVL116:
 889 0470 00E0     		b	.L44
 890              	.LVL117:
 891              	.L48:
 892 0472 311C     		mov	r1, r6
 893              	.LVL118:
 894              	.L44:
 895 0474 0806     		lsl	r0, r1, #24
 896              	.LVL119:
 897 0476 0016     		asr	r0, r0, #24
 898              	.LBE13:
 899              	.LBE12:
 900              		.loc 1 1025 0
 901              		@ sp needed for prologue
 902              	.LVL120:
 903              	.LVL121:
 904              	.LVL122:
 905              	.LVL123:
 906 0478 04BC     		pop	{r2}
 907 047a 9046     		mov	r8, r2
 908 047c F0BC     		pop	{r4, r5, r6, r7}
 909 047e 02BC     		pop	{r1}
 910 0480 0847     		bx	r1
 911              	.LVL124:
 912              	.L63:
 913              	.LBB15:
 914              		.loc 1 981 0
 915 0482 281C     		mov	r0, r5
 916 0484 FFF7FEFF 		bl	pbuf_ref
 917              	.LVL125:
 918 0488 2C1C     		mov	r4, r5
 919              	.LVL126:
 920 048a CCE7     		b	.L54
 921              	.LVL127:
 922              	.L53:
 923              		.loc 1 1013 0
 924 048c 024A     		ldr	r2, .L64
 925 048e 938C     		ldrh	r3, [r2, #36]
 926 0490 0133     		add	r3, r3, #1
 927 0492 9384     		strh	r3, [r2, #36]
 928 0494 311C     		mov	r1, r6
 929              	.LVL128:
 930 0496 EDE7     		b	.L44
 931              	.L65:
 932              		.align	2
 933              	.L64:
 934 0498 00000000 		.word	lwip_stats
 935 049c 00000000 		.word	arp_table
 936              	.LBE15:
 937              	.LFE11:
 939              		.align	2
 940              		.global	etharp_output
 941              		.code	16
 942              		.thumb_func
 944              	etharp_output:
 945              	.LFB10:
 946              		.loc 1 802 0
 947 04a0 F0B5     		push	{r4, r5, r6, r7, lr}
 948              	.LCFI9:
 949 04a2 4746     		mov	r7, r8
 950 04a4 80B4     		push	{r7}
 951              	.LCFI10:
 952              	.LVL129:
 953 04a6 82B0     		sub	sp, sp, #8
 954              	.LCFI11:
 955 04a8 061C     		mov	r6, r0
 956 04aa 0D1C     		mov	r5, r1
 957 04ac 171C     		mov	r7, r2
 958              		.loc 1 806 0
 959 04ae 081C     		mov	r0, r1
 960              	.LVL130:
 961 04b0 1421     		mov	r1, #20
 962              	.LVL131:
 963 04b2 FFF7FEFF 		bl	pbuf_header
 964              	.LVL132:
 965 04b6 0028     		cmp	r0, #0
 966 04b8 05D0     		beq	.L67
 967              		.loc 1 810 0
 968 04ba 2D4A     		ldr	r2, .L75
 969 04bc 5389     		ldrh	r3, [r2, #10]
 970 04be 0133     		add	r3, r3, #1
 971 04c0 5381     		strh	r3, [r2, #10]
 972 04c2 FE20     		mov	r0, #254
 973 04c4 4BE0     		b	.L68
 974              	.L67:
 975              		.loc 1 820 0
 976 04c6 381C     		mov	r0, r7
 977 04c8 311C     		mov	r1, r6
 978 04ca FFF7FEFF 		bl	ip_addr_isbroadcast
 979 04ce 0028     		cmp	r0, #0
 980 04d0 01D0     		beq	.L69
 981              		.loc 1 822 0
 982 04d2 284B     		ldr	r3, .L75+4
 983              	.LVL133:
 984 04d4 3BE0     		b	.L70
 985              	.LVL134:
 986              	.L69:
 987              		.loc 1 824 0
 988 04d6 3B68     		ldr	r3, [r7]
 989 04d8 9846     		mov	r8, r3
 990 04da F020     		mov	r0, #240
 991 04dc 0006     		lsl	r0, r0, #24
 992 04de FFF7FEFF 		bl	ntohl
 993 04e2 041C     		mov	r4, r0
 994 04e4 E020     		mov	r0, #224
 995 04e6 0006     		lsl	r0, r0, #24
 996 04e8 FFF7FEFF 		bl	ntohl
 997 04ec 4346     		mov	r3, r8
 998 04ee 1C40     		and	r4, r4, r3
 999 04f0 8442     		cmp	r4, r0
 1000 04f2 17D1     		bne	.L71
 1001              		.loc 1 826 0
 1002 04f4 6C46     		mov	r4, sp
 1003 04f6 0123     		mov	r3, #1
 1004 04f8 2370     		strb	r3, [r4]
 1005              		.loc 1 827 0
 1006 04fa 0023     		mov	r3, #0
 1007 04fc 6370     		strb	r3, [r4, #1]
 1008              		.loc 1 828 0
 1009 04fe 5E23     		mov	r3, #94
 1010 0500 A370     		strb	r3, [r4, #2]
 1011              		.loc 1 829 0
 1012 0502 3868     		ldr	r0, [r7]
 1013 0504 FFF7FEFF 		bl	ntohl
 1014 0508 4002     		lsl	r0, r0, #9
 1015 050a 400E     		lsr	r0, r0, #25
 1016 050c E070     		strb	r0, [r4, #3]
 1017              		.loc 1 830 0
 1018 050e 3868     		ldr	r0, [r7]
 1019 0510 FFF7FEFF 		bl	ntohl
 1020 0514 000A     		lsr	r0, r0, #8
 1021 0516 2071     		strb	r0, [r4, #4]
 1022              		.loc 1 831 0
 1023 0518 3868     		ldr	r0, [r7]
 1024 051a FFF7FEFF 		bl	ntohl
 1025 051e 6071     		strb	r0, [r4, #5]
 1026 0520 6B46     		mov	r3, sp
 1027              	.LVL135:
 1028 0522 14E0     		b	.L70
 1029              	.LVL136:
 1030              	.L71:
 1031              		.loc 1 837 0
 1032 0524 7368     		ldr	r3, [r6, #4]
 1033 0526 3A68     		ldr	r2, [r7]
 1034 0528 5340     		eor	r3, r3, r2
 1035 052a B268     		ldr	r2, [r6, #8]
 1036 052c 1342     		tst	r3, r2
 1037 052e 06D0     		beq	.L72
 1038              		.loc 1 839 0
 1039 0530 F368     		ldr	r3, [r6, #12]
 1040 0532 002B     		cmp	r3, #0
 1041 0534 01D1     		bne	.L73
 1042 0536 FC20     		mov	r0, #252
 1043 0538 11E0     		b	.L68
 1044              	.L73:
 1045              		.loc 1 841 0
 1046 053a 371C     		mov	r7, r6
 1047 053c 0C37     		add	r7, r7, #12
 1048              	.L72:
 1049              		.loc 1 849 0
 1050 053e 301C     		mov	r0, r6
 1051 0540 391C     		mov	r1, r7
 1052 0542 2A1C     		mov	r2, r5
 1053 0544 FFF7FEFF 		bl	etharp_query
 1054 0548 0006     		lsl	r0, r0, #24
 1055 054a 000E     		lsr	r0, r0, #24
 1056 054c 07E0     		b	.L68
 1057              	.LVL137:
 1058              	.L70:
 1059              		.loc 1 855 0
 1060 054e 321C     		mov	r2, r6
 1061 0550 2732     		add	r2, r2, #39
 1062 0552 301C     		mov	r0, r6
 1063 0554 291C     		mov	r1, r5
 1064 0556 FFF753FD 		bl	etharp_send_ip
 1065              	.LVL138:
 1066 055a 0006     		lsl	r0, r0, #24
 1067 055c 000E     		lsr	r0, r0, #24
 1068              	.L68:
 1069 055e 0006     		lsl	r0, r0, #24
 1070 0560 0016     		asr	r0, r0, #24
 1071              		.loc 1 856 0
 1072 0562 02B0     		add	sp, sp, #8
 1073              		@ sp needed for prologue
 1074              	.LVL139:
 1075              	.LVL140:
 1076              	.LVL141:
 1077 0564 04BC     		pop	{r2}
 1078 0566 9046     		mov	r8, r2
 1079 0568 F0BC     		pop	{r4, r5, r6, r7}
 1080 056a 02BC     		pop	{r1}
 1081 056c 0847     		bx	r1
 1082              	.L76:
 1083 056e C046     		.align	2
 1084              	.L75:
 1085 0570 00000000 		.word	lwip_stats
 1086 0574 00000000 		.word	ethbroadcast
 1087              	.LFE10:
 1089              		.align	2
 1090              		.global	etharp_find_addr
 1091              		.code	16
 1092              		.thumb_func
 1094              	etharp_find_addr:
 1095              	.LFB7:
 1096              		.loc 1 546 0
 1097 0578 70B5     		push	{r4, r5, r6, lr}
 1098              	.LCFI12:
 1099              	.LVL142:
 1100 057a 151C     		mov	r5, r2
 1101 057c 1E1C     		mov	r6, r3
 1102              		.loc 1 554 0
 1103 057e 081C     		mov	r0, r1
 1104              	.LVL143:
 1105 0580 0221     		mov	r1, #2
 1106              	.LVL144:
 1107 0582 FFF7E1FD 		bl	find_entry
 1108              	.LVL145:
 1109 0586 0006     		lsl	r0, r0, #24
 1110              		.loc 1 556 0
 1111 0588 040E     		lsr	r4, r0, #24
 1112              	.LVL146:
 1113 058a 0028     		cmp	r0, #0
 1114 058c 15DB     		blt	.L78
 1115 058e 2306     		lsl	r3, r4, #24
 1116 0590 1916     		asr	r1, r3, #24
 1117 0592 0D4A     		ldr	r2, .L81
 1118 0594 CB00     		lsl	r3, r1, #3
 1119 0596 5B1A     		sub	r3, r3, r1
 1120 0598 9B00     		lsl	r3, r3, #2
 1121 059a D218     		add	r2, r2, r3
 1122 059c 1369     		ldr	r3, [r2, #16]
 1123 059e 022B     		cmp	r3, #2
 1124 05a0 0BD1     		bne	.L78
 1125              		.loc 1 557 0
 1126 05a2 CB00     		lsl	r3, r1, #3
 1127 05a4 5B1A     		sub	r3, r3, r1
 1128 05a6 9A00     		lsl	r2, r3, #2
 1129 05a8 0832     		add	r2, r2, #8
 1130 05aa 0749     		ldr	r1, .L81
 1131 05ac 8A18     		add	r2, r1, r2
 1132 05ae 2A60     		str	r2, [r5]
 1133              		.loc 1 558 0
 1134 05b0 0133     		add	r3, r3, #1
 1135 05b2 9B00     		lsl	r3, r3, #2
 1136 05b4 C918     		add	r1, r1, r3
 1137 05b6 3160     		str	r1, [r6]
 1138 05b8 00E0     		b	.L79
 1139              	.L78:
 1140              		.loc 1 559 0
 1141 05ba FF24     		mov	r4, #255
 1142              	.LVL147:
 1143              	.L79:
 1144 05bc 2006     		lsl	r0, r4, #24
 1145 05be 0016     		asr	r0, r0, #24
 1146              		.loc 1 562 0
 1147              		@ sp needed for prologue
 1148              	.LVL148:
 1149              	.LVL149:
 1150              	.LVL150:
 1151 05c0 70BC     		pop	{r4, r5, r6}
 1152 05c2 02BC     		pop	{r1}
 1153 05c4 0847     		bx	r1
 1154              	.L82:
 1155 05c6 C046     		.align	2
 1156              	.L81:
 1157 05c8 00000000 		.word	arp_table
 1158              	.LFE7:
 1160              		.align	2
 1161              		.global	etharp_tmr
 1162              		.code	16
 1163              		.thumb_func
 1165              	etharp_tmr:
 1166              	.LFB3:
 1167              		.loc 1 166 0
 1168 05cc F0B5     		push	{r4, r5, r6, r7, lr}
 1169              	.LCFI13:
 1170              		.loc 1 166 0
 1171 05ce 114D     		ldr	r5, .L91
 1172 05d0 2C1C     		mov	r4, r5
 1173 05d2 143C     		sub	r4, r4, #20
 1174              		.loc 1 193 0
 1175 05d4 0027     		mov	r7, #0
 1176              		.loc 1 171 0
 1177 05d6 104E     		ldr	r6, .L91+4
 1178              	.L88:
 1179              		.loc 1 172 0
 1180 05d8 2B78     		ldrb	r3, [r5]
 1181 05da 0133     		add	r3, r3, #1
 1182 05dc 1B06     		lsl	r3, r3, #24
 1183 05de 1B0E     		lsr	r3, r3, #24
 1184 05e0 2B70     		strb	r3, [r5]
 1185              		.loc 1 173 0
 1186 05e2 2269     		ldr	r2, [r4, #16]
 1187 05e4 022A     		cmp	r2, #2
 1188 05e6 02D1     		bne	.L84
 1189 05e8 EF2B     		cmp	r3, #239
 1190 05ea 04D8     		bhi	.L85
 1191 05ec 0AE0     		b	.L86
 1192              	.L84:
 1193 05ee 012A     		cmp	r2, #1
 1194 05f0 08D1     		bne	.L86
 1195 05f2 012B     		cmp	r3, #1
 1196 05f4 06D9     		bls	.L86
 1197              	.L85:
 1198              		.loc 1 185 0
 1199 05f6 2068     		ldr	r0, [r4]
 1200 05f8 0028     		cmp	r0, #0
 1201 05fa 02D0     		beq	.L87
 1202              		.loc 1 188 0
 1203 05fc FFF790FD 		bl	free_etharp_q
 1204              		.loc 1 189 0
 1205 0600 2760     		str	r7, [r4]
 1206              	.L87:
 1207              		.loc 1 193 0
 1208 0602 2761     		str	r7, [r4, #16]
 1209              	.L86:
 1210 0604 1C35     		add	r5, r5, #28
 1211 0606 1C34     		add	r4, r4, #28
 1212              		.loc 1 171 0
 1213 0608 B442     		cmp	r4, r6
 1214 060a E5D1     		bne	.L88
 1215              		.loc 1 202 0
 1216              		@ sp needed for prologue
 1217 060c F0BC     		pop	{r4, r5, r6, r7}
 1218 060e 01BC     		pop	{r0}
 1219 0610 0047     		bx	r0
 1220              	.L92:
 1221 0612 C046     		.align	2
 1222              	.L91:
 1223 0614 14000000 		.word	arp_table+20
 1224 0618 18010000 		.word	arp_table+280
 1225              	.LFE3:
 1227              		.align	2
 1228              		.code	16
 1229              		.thumb_func
 1231              	update_arp_entry:
 1232              	.LFB6:
 1233              		.loc 1 468 0
 1234 061c F0B5     		push	{r4, r5, r6, r7, lr}
 1235              	.LCFI14:
 1236 061e 5746     		mov	r7, sl
 1237 0620 4646     		mov	r6, r8
 1238 0622 C0B4     		push	{r6, r7}
 1239              	.LCFI15:
 1240              	.LVL151:
 1241 0624 041C     		mov	r4, r0
 1242 0626 0E1C     		mov	r6, r1
 1243 0628 151C     		mov	r5, r2
 1244 062a 1B06     		lsl	r3, r3, #24
 1245              	.LVL152:
 1246 062c 1F0E     		lsr	r7, r3, #24
 1247              	.LVL153:
 1248              		.loc 1 478 0
 1249 062e 0029     		cmp	r1, #0
 1250 0630 5AD0     		beq	.L94
 1251              	.LVL154:
 1252 0632 0B68     		ldr	r3, [r1]
 1253 0634 002B     		cmp	r3, #0
 1254 0636 57D0     		beq	.L94
 1255 0638 081C     		mov	r0, r1
 1256 063a 211C     		mov	r1, r4
 1257              	.LVL155:
 1258 063c FFF7FEFF 		bl	ip_addr_isbroadcast
 1259 0640 0028     		cmp	r0, #0
 1260 0642 51D1     		bne	.L94
 1261 0644 3268     		ldr	r2, [r6]
 1262 0646 9246     		mov	sl, r2
 1263 0648 F020     		mov	r0, #240
 1264 064a 0006     		lsl	r0, r0, #24
 1265 064c FFF7FEFF 		bl	ntohl
 1266 0650 8046     		mov	r8, r0
 1267 0652 E020     		mov	r0, #224
 1268 0654 0006     		lsl	r0, r0, #24
 1269 0656 FFF7FEFF 		bl	ntohl
 1270 065a 4346     		mov	r3, r8
 1271 065c 5246     		mov	r2, sl
 1272 065e 1340     		and	r3, r3, r2
 1273 0660 8342     		cmp	r3, r0
 1274 0662 41D0     		beq	.L94
 1275              		.loc 1 488 0
 1276 0664 301C     		mov	r0, r6
 1277 0666 391C     		mov	r1, r7
 1278 0668 FFF76EFD 		bl	find_entry
 1279 066c 0006     		lsl	r0, r0, #24
 1280              		.loc 1 491 0
 1281 066e 030E     		lsr	r3, r0, #24
 1282              	.LVL156:
 1283 0670 0028     		cmp	r0, #0
 1284 0672 3CDB     		blt	.L95
 1285              		.loc 1 495 0
 1286 0674 1B06     		lsl	r3, r3, #24
 1287              	.LVL157:
 1288 0676 1E16     		asr	r6, r3, #24
 1289              	.LVL158:
 1290 0678 2148     		ldr	r0, .L100
 1291 067a F100     		lsl	r1, r6, #3
 1292 067c 891B     		sub	r1, r1, r6
 1293 067e 8900     		lsl	r1, r1, #2
 1294 0680 4318     		add	r3, r0, r1
 1295 0682 0222     		mov	r2, #2
 1296 0684 1A61     		str	r2, [r3, #16]
 1297              		.loc 1 497 0
 1298 0686 9C61     		str	r4, [r3, #24]
 1299              		.loc 1 507 0
 1300 0688 6A79     		ldrb	r2, [r5, #5]
 1301 068a 5A73     		strb	r2, [r3, #13]
 1302 068c 2A79     		ldrb	r2, [r5, #4]
 1303 068e 1A73     		strb	r2, [r3, #12]
 1304 0690 EA78     		ldrb	r2, [r5, #3]
 1305 0692 DA72     		strb	r2, [r3, #11]
 1306 0694 AA78     		ldrb	r2, [r5, #2]
 1307 0696 9A72     		strb	r2, [r3, #10]
 1308 0698 6A78     		ldrb	r2, [r5, #1]
 1309 069a 5A72     		strb	r2, [r3, #9]
 1310 069c 2A78     		ldrb	r2, [r5]
 1311 069e 1A72     		strb	r2, [r3, #8]
 1312              		.loc 1 510 0
 1313 06a0 1433     		add	r3, r3, #20
 1314 06a2 0022     		mov	r2, #0
 1315 06a4 1A70     		strb	r2, [r3]
 1316              		.loc 1 513 0
 1317 06a6 0958     		ldr	r1, [r1, r0]
 1318 06a8 0029     		cmp	r1, #0
 1319 06aa 1FD0     		beq	.L96
 1320              	.LBB16:
 1321              		.loc 1 524 0
 1322 06ac 271C     		mov	r7, r4
 1323              	.LVL159:
 1324 06ae 2737     		add	r7, r7, #39
 1325              		.loc 1 518 0
 1326 06b0 8046     		mov	r8, r0
 1327 06b2 F300     		lsl	r3, r6, #3
 1328 06b4 9B1B     		sub	r3, r3, r6
 1329 06b6 9B00     		lsl	r3, r3, #2
 1330 06b8 9A46     		mov	sl, r3
 1331              	.L97:
 1332 06ba 0B68     		ldr	r3, [r1]
 1333 06bc 5246     		mov	r2, sl
 1334 06be 4244     		add	r2, r2, r8
 1335 06c0 1360     		str	r3, [r2]
 1336              		.loc 1 520 0
 1337 06c2 4E68     		ldr	r6, [r1, #4]
 1338              	.LVL160:
 1339              		.loc 1 522 0
 1340 06c4 0A20     		mov	r0, #10
 1341 06c6 FFF7FEFF 		bl	memp_free
 1342              		.loc 1 524 0
 1343 06ca 201C     		mov	r0, r4
 1344 06cc 311C     		mov	r1, r6
 1345 06ce 3A1C     		mov	r2, r7
 1346 06d0 2B1C     		mov	r3, r5
 1347 06d2 FFF795FC 		bl	etharp_send_ip
 1348              		.loc 1 526 0
 1349 06d6 301C     		mov	r0, r6
 1350 06d8 FFF7FEFF 		bl	pbuf_free
 1351              	.LBE16:
 1352              		.loc 1 513 0
 1353 06dc 5346     		mov	r3, sl
 1354 06de 4344     		add	r3, r3, r8
 1355 06e0 1968     		ldr	r1, [r3]
 1356 06e2 0029     		cmp	r1, #0
 1357 06e4 E9D1     		bne	.L97
 1358 06e6 01E0     		b	.L96
 1359              	.LVL161:
 1360              	.L94:
 1361 06e8 F623     		mov	r3, #246
 1362              	.LVL162:
 1363 06ea 00E0     		b	.L95
 1364              	.LVL163:
 1365              	.L96:
 1366 06ec 0023     		mov	r3, #0
 1367              	.LVL164:
 1368              	.L95:
 1369 06ee 1806     		lsl	r0, r3, #24
 1370 06f0 0016     		asr	r0, r0, #24
 1371              		.loc 1 530 0
 1372              		@ sp needed for prologue
 1373              	.LVL165:
 1374              	.LVL166:
 1375              	.LVL167:
 1376              	.LVL168:
 1377 06f2 0CBC     		pop	{r2, r3}
 1378 06f4 9046     		mov	r8, r2
 1379 06f6 9A46     		mov	sl, r3
 1380 06f8 F0BC     		pop	{r4, r5, r6, r7}
 1381 06fa 02BC     		pop	{r1}
 1382 06fc 0847     		bx	r1
 1383              	.L101:
 1384 06fe C046     		.align	2
 1385              	.L100:
 1386 0700 00000000 		.word	arp_table
 1387              	.LFE6:
 1389              		.align	2
 1390              		.global	etharp_ip_input
 1391              		.code	16
 1392              		.thumb_func
 1394              	etharp_ip_input:
 1395              	.LFB8:
 1396              		.loc 1 581 0
 1397 0704 10B5     		push	{r4, lr}
 1398              	.LCFI16:
 1399              	.LVL169:
 1400              		.loc 1 584 0
 1401 0706 0028     		cmp	r0, #0
 1402 0708 0ED0     		beq	.L104
 1403              		.loc 1 587 0
 1404 070a 4C68     		ldr	r4, [r1, #4]
 1405              	.LVL170:
 1406              		.loc 1 588 0
 1407 070c 211C     		mov	r1, r4
 1408              	.LVL171:
 1409 070e 0E31     		add	r1, r1, #14
 1410              		.loc 1 596 0
 1411 0710 4368     		ldr	r3, [r0, #4]
 1412 0712 CA68     		ldr	r2, [r1, #12]
 1413 0714 5340     		eor	r3, r3, r2
 1414 0716 8268     		ldr	r2, [r0, #8]
 1415 0718 1342     		tst	r3, r2
 1416 071a 05D1     		bne	.L104
 1417              		.loc 1 605 0
 1418 071c 0C31     		add	r1, r1, #12
 1419              	.LVL172:
 1420 071e 221C     		mov	r2, r4
 1421 0720 0832     		add	r2, r2, #8
 1422 0722 0023     		mov	r3, #0
 1423 0724 FFF77AFF 		bl	update_arp_entry
 1424              	.LVL173:
 1425              	.L104:
 1426              		.loc 1 606 0
 1427              		@ sp needed for prologue
 1428              	.LVL174:
 1429 0728 10BC     		pop	{r4}
 1430 072a 01BC     		pop	{r0}
 1431 072c 0047     		bx	r0
 1432              	.LFE8:
 1434 072e C046     		.align	2
 1435              		.global	etharp_arp_input
 1436              		.code	16
 1437              		.thumb_func
 1439              	etharp_arp_input:
 1440              	.LFB9:
 1441              		.loc 1 626 0
 1442 0730 F0B5     		push	{r4, r5, r6, r7, lr}
 1443              	.LCFI17:
 1444 0732 5746     		mov	r7, sl
 1445 0734 4E46     		mov	r6, r9
 1446 0736 4546     		mov	r5, r8
 1447 0738 E0B4     		push	{r5, r6, r7}
 1448              	.LCFI18:
 1449              	.LVL175:
 1450 073a 82B0     		sub	sp, sp, #8
 1451              	.LCFI19:
 1452 073c 051C     		mov	r5, r0
 1453 073e 8A46     		mov	sl, r1
 1454 0740 161C     		mov	r6, r2
 1455              		.loc 1 637 0
 1456 0742 0028     		cmp	r0, #0
 1457 0744 00D1     		bne	.LCB1461
 1458 0746 90E0     		b	.L117	@long jump
 1459              	.LCB1461:
 1460              	.LVL176:
 1461              		.loc 1 641 0
 1462 0748 5389     		ldrh	r3, [r2, #10]
 1463 074a 292B     		cmp	r3, #41
 1464 074c 0AD8     		bhi	.L107
 1465              	.LVL177:
 1466              		.loc 1 645 0
 1467 074e 4B4B     		ldr	r3, .L120
 1468 0750 5A8C     		ldrh	r2, [r3, #34]
 1469              	.LVL178:
 1470 0752 0132     		add	r2, r2, #1
 1471 0754 5A84     		strh	r2, [r3, #34]
 1472              		.loc 1 646 0
 1473 0756 DA8B     		ldrh	r2, [r3, #30]
 1474 0758 0132     		add	r2, r2, #1
 1475 075a DA83     		strh	r2, [r3, #30]
 1476              		.loc 1 647 0
 1477 075c 301C     		mov	r0, r6
 1478              	.LVL179:
 1479 075e FFF7FEFF 		bl	pbuf_free
 1480 0762 82E0     		b	.L117
 1481              	.LVL180:
 1482              	.L107:
 1483              		.loc 1 651 0
 1484 0764 5168     		ldr	r1, [r2, #4]
 1485 0766 8846     		mov	r8, r1
 1486              	.LVL181:
 1487              		.loc 1 652 0
 1488 0768 0F1C     		mov	r7, r1
 1489              	.LVL182:
 1490 076a 0E37     		add	r7, r7, #14
 1491              		.loc 1 660 0
 1492 076c 3C88     		ldrh	r4, [r7]
 1493 076e 0120     		mov	r0, #1
 1494              	.LVL183:
 1495 0770 FFF7FEFF 		bl	htons
 1496              	.LVL184:
 1497 0774 8442     		cmp	r4, r0
 1498 0776 13D1     		bne	.L108
 1499 0778 BC88     		ldrh	r4, [r7, #4]
 1500 077a 4148     		ldr	r0, .L120+4
 1501 077c FFF7FEFF 		bl	htons
 1502 0780 8442     		cmp	r4, r0
 1503 0782 0DD1     		bne	.L108
 1504 0784 7C88     		ldrh	r4, [r7, #2]
 1505 0786 8020     		mov	r0, #128
 1506 0788 0001     		lsl	r0, r0, #4
 1507 078a FFF7FEFF 		bl	htons
 1508 078e 8442     		cmp	r4, r0
 1509 0790 06D1     		bne	.L108
 1510 0792 4246     		mov	r2, r8
 1511 0794 148A     		ldrh	r4, [r2, #16]
 1512 0796 3B48     		ldr	r0, .L120+8
 1513 0798 FFF7FEFF 		bl	htons
 1514 079c 8442     		cmp	r4, r0
 1515 079e 0AD0     		beq	.L109
 1516              	.L108:
 1517              		.loc 1 667 0
 1518 07a0 364B     		ldr	r3, .L120
 1519 07a2 1A8D     		ldrh	r2, [r3, #40]
 1520 07a4 0132     		add	r2, r2, #1
 1521 07a6 1A85     		strh	r2, [r3, #40]
 1522              		.loc 1 668 0
 1523 07a8 DA8B     		ldrh	r2, [r3, #30]
 1524 07aa 0132     		add	r2, r2, #1
 1525 07ac DA83     		strh	r2, [r3, #30]
 1526              		.loc 1 669 0
 1527 07ae 301C     		mov	r0, r6
 1528 07b0 FFF7FEFF 		bl	pbuf_free
 1529 07b4 59E0     		b	.L117
 1530              	.L109:
 1531              		.loc 1 672 0
 1532 07b6 314A     		ldr	r2, .L120
 1533 07b8 538B     		ldrh	r3, [r2, #26]
 1534 07ba 0133     		add	r3, r3, #1
 1535 07bc 5383     		strh	r3, [r2, #26]
 1536              		.loc 1 683 0
 1537 07be 1023     		mov	r3, #16
 1538 07c0 DB19     		add	r3, r3, r7
 1539 07c2 9946     		mov	r9, r3
 1540 07c4 1B68     		ldr	r3, [r3]
 1541 07c6 0193     		str	r3, [sp, #4]
 1542              		.loc 1 684 0
 1543 07c8 FB69     		ldr	r3, [r7, #28]
 1544 07ca 0093     		str	r3, [sp]
 1545              		.loc 1 687 0
 1546 07cc 6A68     		ldr	r2, [r5, #4]
 1547 07ce 002A     		cmp	r2, #0
 1548 07d0 0CD0     		beq	.L110
 1549              		.loc 1 691 0
 1550 07d2 9B1A     		sub	r3, r3, r2
 1551 07d4 5C42     		neg	r4, r3
 1552 07d6 5C41     		adc	r4, r4, r3
 1553              	.LVL185:
 1554              		.loc 1 695 0
 1555 07d8 002C     		cmp	r4, #0
 1556 07da 08D0     		beq	.L111
 1557              		.loc 1 698 0
 1558 07dc 3A1C     		mov	r2, r7
 1559 07de 0832     		add	r2, r2, #8
 1560 07e0 281C     		mov	r0, r5
 1561 07e2 01A9     		add	r1, sp, #4
 1562 07e4 0123     		mov	r3, #1
 1563 07e6 FFF719FF 		bl	update_arp_entry
 1564 07ea 07E0     		b	.L112
 1565              	.LVL186:
 1566              	.L110:
 1567 07ec 0024     		mov	r4, #0
 1568              	.LVL187:
 1569              	.L111:
 1570              		.loc 1 702 0
 1571 07ee 3A1C     		mov	r2, r7
 1572 07f0 0832     		add	r2, r2, #8
 1573 07f2 281C     		mov	r0, r5
 1574 07f4 01A9     		add	r1, sp, #4
 1575 07f6 0023     		mov	r3, #0
 1576 07f8 FFF710FF 		bl	update_arp_entry
 1577              	.L112:
 1578              		.loc 1 706 0
 1579 07fc F888     		ldrh	r0, [r7, #6]
 1580 07fe FFF7FEFF 		bl	htons
 1581 0802 0128     		cmp	r0, #1
 1582 0804 02D0     		beq	.L114
 1583 0806 0228     		cmp	r0, #2
 1584 0808 28D1     		bne	.L119
 1585 080a 2BE0     		b	.L115
 1586              	.L114:
 1587              		.loc 1 715 0
 1588 080c 002C     		cmp	r4, #0
 1589 080e 29D0     		beq	.L115
 1590              		.loc 1 721 0
 1591 0810 0220     		mov	r0, #2
 1592 0812 FFF7FEFF 		bl	htons
 1593 0816 F880     		strh	r0, [r7, #6]
 1594              		.loc 1 723 0
 1595 0818 3A8A     		ldrh	r2, [r7, #16]
 1596 081a 7B8A     		ldrh	r3, [r7, #18]
 1597 081c FB83     		strh	r3, [r7, #30]
 1598 081e BA83     		strh	r2, [r7, #28]
 1599              		.loc 1 724 0
 1600 0820 6B68     		ldr	r3, [r5, #4]
 1601 0822 4946     		mov	r1, r9
 1602 0824 0B60     		str	r3, [r1]
 1603 0826 0620     		mov	r0, #6
 1604              	.LVL188:
 1605              	.L116:
 1606              		.loc 1 736 0
 1607 0828 431E     		sub	r3, r0, #1
 1608 082a 1B06     		lsl	r3, r3, #24
 1609 082c 180E     		lsr	r0, r3, #24
 1610              	.LVL189:
 1611              		.loc 1 737 0
 1612 082e 3918     		add	r1, r7, r0
 1613 0830 0A1C     		mov	r2, r1
 1614 0832 0832     		add	r2, r2, #8
 1615 0834 1378     		ldrb	r3, [r2]
 1616 0836 0B75     		strb	r3, [r1, #20]
 1617              		.loc 1 741 0
 1618 0838 1378     		ldrb	r3, [r2]
 1619 083a 4146     		mov	r1, r8
 1620 083c 0B54     		strb	r3, [r1, r0]
 1621              		.loc 1 743 0
 1622 083e 5146     		mov	r1, sl
 1623 0840 0B5C     		ldrb	r3, [r1, r0]
 1624 0842 1370     		strb	r3, [r2]
 1625              		.loc 1 744 0
 1626 0844 4346     		mov	r3, r8
 1627 0846 1A18     		add	r2, r3, r0
 1628 0848 0B5C     		ldrb	r3, [r1, r0]
 1629 084a 1372     		strb	r3, [r2, #8]
 1630              		.loc 1 735 0
 1631 084c 0028     		cmp	r0, #0
 1632 084e EBD1     		bne	.L116
 1633              		.loc 1 751 0
 1634 0850 AB69     		ldr	r3, [r5, #24]
 1635 0852 281C     		mov	r0, r5
 1636              	.LVL190:
 1637 0854 311C     		mov	r1, r6
 1638 0856 00F053F8 		bl	.L5
 1639 085a 03E0     		b	.L115
 1640              	.L119:
 1641              		.loc 1 775 0
 1642 085c 074A     		ldr	r2, .L120
 1643 085e 938D     		ldrh	r3, [r2, #44]
 1644 0860 0133     		add	r3, r3, #1
 1645 0862 9385     		strh	r3, [r2, #44]
 1646              	.L115:
 1647              		.loc 1 779 0
 1648 0864 301C     		mov	r0, r6
 1649 0866 FFF7FEFF 		bl	pbuf_free
 1650              	.LVL191:
 1651              	.L117:
 1652              		.loc 1 780 0
 1653 086a 02B0     		add	sp, sp, #8
 1654              		@ sp needed for prologue
 1655              	.LVL192:
 1656              	.LVL193:
 1657              	.LVL194:
 1658              	.LVL195:
 1659              	.LVL196:
 1660              	.LVL197:
 1661 086c 1CBC     		pop	{r2, r3, r4}
 1662 086e 9046     		mov	r8, r2
 1663 0870 9946     		mov	r9, r3
 1664 0872 A246     		mov	sl, r4
 1665 0874 F0BC     		pop	{r4, r5, r6, r7}
 1666 0876 01BC     		pop	{r0}
 1667 0878 0047     		bx	r0
 1668              	.L121:
 1669 087a C046     		.align	2
 1670              	.L120:
 1671 087c 00000000 		.word	lwip_stats
 1672 0880 04060000 		.word	1540
 1673 0884 06080000 		.word	2054
 1674              	.LFE9:
 1676              		.align	2
 1677              		.global	ethernet_input
 1678              		.code	16
 1679              		.thumb_func
 1681              	ethernet_input:
 1682              	.LFB14:
1137:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1138:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** /**
1139:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * Process received ethernet frames. Using this function instead of directly
1140:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * calling ip_input and passing ARP frames through etharp in ethernetif_input,
1141:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * the ARP cache is protected from concurrent access.
1142:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  *
1143:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param p the recevied packet, p->payload pointing to the ethernet header
1144:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  * @param netif the network interface on which the packet was received
1145:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****  */
1146:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** err_t
1147:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** ethernet_input(struct pbuf *p, struct netif *netif)
1148:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** {
 1683              		.loc 1 1148 0
 1684 0888 30B5     		push	{r4, r5, lr}
 1685              	.LCFI20:
 1686              	.LVL198:
 1687 088a 041C     		mov	r4, r0
 1688 088c 0D1C     		mov	r5, r1
1149:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   struct eth_hdr* ethhdr;
1150:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   u16_t type;
1151:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1152:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* points to packet payload, which starts with an Ethernet header */
1153:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   ethhdr = p->payload;
1154:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
1155:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     ("ethernet_input: dest:%02x:%02x:%02x:%02x:%02x:%02x, src:%02x:%02x:%02x:%02x:%02x:%02x, type:%
1156:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      (unsigned)ethhdr->dest.addr[0], (unsigned)ethhdr->dest.addr[1], (unsigned)ethhdr->dest.addr[2]
1157:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5]
1158:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
1159:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
1160:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      (unsigned)htons(ethhdr->type)));
1161:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1162:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   type = htons(ethhdr->type);
 1689              		.loc 1 1162 0
 1690 088e 4368     		ldr	r3, [r0, #4]
 1691 0890 188A     		ldrh	r0, [r3, #16]
 1692              	.LVL199:
 1693 0892 FFF7FEFF 		bl	htons
 1694              	.LVL200:
1163:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ETHARP_SUPPORT_VLAN
1164:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   if (type == ETHTYPE_VLAN) {
1165:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     struct eth_vlan_hdr *vlan = (struct eth_vlan_hdr*)(((char*)ethhdr) + SIZEOF_ETH_HDR);
1166:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #ifdef ETHARP_VLAN_CHECK /* if not, allow all VLANs */
1167:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     if (VLAN_ID(vlan) != ETHARP_VLAN_CHECK) {
1168:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* silently ignore this packet: not for our VLAN */
1169:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       pbuf_free(p);
1170:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       return ERR_OK;
1171:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     }
1172:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* ETHARP_VLAN_CHECK */
1173:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     type = htons(vlan->tpid);
1174:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
1175:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* ETHARP_SUPPORT_VLAN */
1176:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1177:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   switch (type) {
 1695              		.loc 1 1177 0
 1696 0896 8023     		mov	r3, #128
 1697 0898 1B01     		lsl	r3, r3, #4
 1698 089a 9842     		cmp	r0, r3
 1699 089c 03D0     		beq	.L124
 1700              	.LVL201:
 1701 089e 164B     		ldr	r3, .L131
 1702 08a0 9842     		cmp	r0, r3
 1703 08a2 1BD1     		bne	.L129
 1704 08a4 13E0     		b	.L130
 1705              	.L124:
1178:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     /* IP packet? */
1179:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     case ETHTYPE_IP:
1180:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if ETHARP_TRUST_IP_MAC
1181:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* update ARP table */
1182:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       etharp_ip_input(netif, p);
 1706              		.loc 1 1182 0
 1707 08a6 281C     		mov	r0, r5
 1708              	.LVL202:
 1709 08a8 211C     		mov	r1, r4
 1710 08aa FFF7FEFF 		bl	etharp_ip_input
1183:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* ETHARP_TRUST_IP_MAC */
1184:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* skip Ethernet header */
1185:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       if(pbuf_header(p, -(s16_t)SIZEOF_ETH_HDR)) {
 1711              		.loc 1 1185 0
 1712 08ae 0E21     		mov	r1, #14
 1713 08b0 4942     		neg	r1, r1
 1714 08b2 201C     		mov	r0, r4
 1715 08b4 FFF7FEFF 		bl	pbuf_header
 1716 08b8 0028     		cmp	r0, #0
 1717 08ba 03D0     		beq	.L126
1186:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         LWIP_ASSERT("Can't move over header in packet", 0);
1187:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         pbuf_free(p);
 1718              		.loc 1 1187 0
 1719 08bc 201C     		mov	r0, r4
 1720 08be FFF7FEFF 		bl	pbuf_free
 1721 08c2 15E0     		b	.L127
 1722              	.L126:
1188:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         p = NULL;
1189:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       } else {
1190:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         /* pass to IP layer */
1191:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****         ip_input(p, netif);
 1723              		.loc 1 1191 0
 1724 08c4 201C     		mov	r0, r4
 1725 08c6 291C     		mov	r1, r5
 1726 08c8 FFF7FEFF 		bl	ip_input
 1727 08cc 10E0     		b	.L127
 1728              	.LVL203:
 1729              	.L130:
1192:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       }
1193:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       break;
1194:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       
1195:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     case ETHTYPE_ARP:
1196:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       /* pass p to ARP module */
1197:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 1730              		.loc 1 1197 0
 1731 08ce 291C     		mov	r1, r5
 1732 08d0 2731     		add	r1, r1, #39
 1733 08d2 281C     		mov	r0, r5
 1734              	.LVL204:
 1735 08d4 221C     		mov	r2, r4
 1736 08d6 FFF7FEFF 		bl	etharp_arp_input
 1737 08da 09E0     		b	.L127
 1738              	.LVL205:
 1739              	.L129:
1198:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       break;
1199:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1200:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #if PPPOE_SUPPORT
1201:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     case ETHTYPE_PPPOEDISC: /* PPP Over Ethernet Discovery Stage */
1202:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       pppoe_disc_input(netif, p);
1203:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       break;
1204:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1205:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     case ETHTYPE_PPPOE: /* PPP Over Ethernet Session Stage */
1206:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       pppoe_data_input(netif, p);
1207:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       break;
1208:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** #endif /* PPPOE_SUPPORT */
1209:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1210:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****     default:
1211:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ETHARP_STATS_INC(etharp.proterr);
 1740              		.loc 1 1211 0
 1741 08dc 074B     		ldr	r3, .L131+4
 1742 08de 1A8D     		ldrh	r2, [r3, #40]
 1743 08e0 0132     		add	r2, r2, #1
 1744 08e2 1A85     		strh	r2, [r3, #40]
1212:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       ETHARP_STATS_INC(etharp.drop);
 1745              		.loc 1 1212 0
 1746 08e4 DA8B     		ldrh	r2, [r3, #30]
 1747 08e6 0132     		add	r2, r2, #1
 1748 08e8 DA83     		strh	r2, [r3, #30]
1213:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       pbuf_free(p);
 1749              		.loc 1 1213 0
 1750 08ea 201C     		mov	r0, r4
 1751              	.LVL206:
 1752 08ec FFF7FEFF 		bl	pbuf_free
 1753              	.L127:
1214:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       p = NULL;
1215:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****       break;
1216:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   }
1217:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** 
1218:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   /* This means the pbuf is freed or consumed,
1219:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****      so the caller doesn't have to free it again */
1220:rtos/common/ethernet/lwIP_132/src/netif/etharp.c ****   return ERR_OK;
1221:rtos/common/ethernet/lwIP_132/src/netif/etharp.c **** }
 1754              		.loc 1 1221 0
 1755 08f0 0020     		mov	r0, #0
 1756              		@ sp needed for prologue
 1757              	.LVL207:
 1758              	.LVL208:
 1759 08f2 30BC     		pop	{r4, r5}
 1760 08f4 02BC     		pop	{r1}
 1761 08f6 0847     		bx	r1
 1762              	.L132:
 1763              		.align	2
 1764              	.L131:
 1765 08f8 06080000 		.word	2054
 1766 08fc 00000000 		.word	lwip_stats
 1767              	.LFE14:
 1769              		.global	ethbroadcast
 1770              		.section	.rodata
 1771              		.align	2
 1774              	ethbroadcast:
 1775 0000 FF       		.byte	-1
 1776 0001 FF       		.byte	-1
 1777 0002 FF       		.byte	-1
 1778 0003 FF       		.byte	-1
 1779 0004 FF       		.byte	-1
 1780 0005 FF       		.byte	-1
 1781 0006 0000     		.space	2
 1782              		.global	ethzero
 1783              		.align	2
 1786              	ethzero:
 1787 0008 00000000 		.space	8
 1787      00000000 
 1788              		.bss
 1789              		.align	2
 1790              	arp_table:
 1791 0000 00000000 		.space	280
 1791      00000000 
 1791      00000000 
 1791      00000000 
 1791      00000000 
 1792              	etharp_cached_entry:
 1793 0118 00       		.space	1
 2122              	.Letext0:
 6627              		.code 16
 6628              		.align	1
 6629              	.L5:
 6630 0900 1847C046 		bx	r3
DEFINED SYMBOLS
                            *ABS*:00000000 etharp.c
     /tmp/ccAEwvzd.s:1      .text:00000000 $t
     /tmp/ccAEwvzd.s:15     .text:00000000 etharp_send_ip
     /tmp/ccAEwvzd.s:78     .text:00000040 etharp_request
     /tmp/ccAEwvzd.s:241    .text:0000010c $d
     /tmp/ccAEwvzd.s:1786   .rodata:00000008 ethzero
     /tmp/ccAEwvzd.s:1774   .rodata:00000000 ethbroadcast
     /tmp/ccAEwvzd.s:249    .text:00000120 $t
     /tmp/ccAEwvzd.s:252    .text:00000120 free_etharp_q
     /tmp/ccAEwvzd.s:294    .text:00000148 find_entry
     /tmp/ccAEwvzd.s:631    .text:00000300 $d
     /tmp/ccAEwvzd.s:1792   .bss:00000118 etharp_cached_entry
     /tmp/ccAEwvzd.s:1790   .bss:00000000 arp_table
     /tmp/ccAEwvzd.s:642    .text:00000310 etharp_query
     /tmp/ccAEwvzd.s:639    .text:00000310 $t
     /tmp/ccAEwvzd.s:934    .text:00000498 $d
     /tmp/ccAEwvzd.s:944    .text:000004a0 etharp_output
     /tmp/ccAEwvzd.s:941    .text:000004a0 $t
     /tmp/ccAEwvzd.s:1085   .text:00000570 $d
     /tmp/ccAEwvzd.s:1094   .text:00000578 etharp_find_addr
     /tmp/ccAEwvzd.s:1091   .text:00000578 $t
     /tmp/ccAEwvzd.s:1157   .text:000005c8 $d
     /tmp/ccAEwvzd.s:1165   .text:000005cc etharp_tmr
     /tmp/ccAEwvzd.s:1162   .text:000005cc $t
     /tmp/ccAEwvzd.s:1223   .text:00000614 $d
     /tmp/ccAEwvzd.s:1228   .text:0000061c $t
     /tmp/ccAEwvzd.s:1231   .text:0000061c update_arp_entry
     /tmp/ccAEwvzd.s:1386   .text:00000700 $d
     /tmp/ccAEwvzd.s:1394   .text:00000704 etharp_ip_input
     /tmp/ccAEwvzd.s:1391   .text:00000704 $t
     /tmp/ccAEwvzd.s:1439   .text:00000730 etharp_arp_input
     /tmp/ccAEwvzd.s:1671   .text:0000087c $d
     /tmp/ccAEwvzd.s:1681   .text:00000888 ethernet_input
     /tmp/ccAEwvzd.s:1678   .text:00000888 $t
     /tmp/ccAEwvzd.s:1765   .text:000008f8 $d
     /tmp/ccAEwvzd.s:1775   .rodata:00000000 $d
     /tmp/ccAEwvzd.s:6627   .text:00000900 $t

UNDEFINED SYMBOLS
htons
pbuf_alloc
pbuf_free
lwip_stats
memp_free
ip_addr_isbroadcast
ntohl
pbuf_copy
memp_malloc
pbuf_ref
pbuf_header
ip_input
