   1              		.code	16
   2              		.file	"ppp.c"
  10              	.Ltext0:
  11              		.align	2
  12              		.global	pppIOCtl
  13              		.code	16
  14              		.thumb_func
  16              	pppIOCtl:
  17              	.LFB304:
  18              		.file 1 "rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c"
   1:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*****************************************************************************
   2:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * ppp.c - Network Point to Point Protocol program file.
   3:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** *
   4:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * Copyright (c) 2003 by Marc Boucher, Services Informatiques (MBSI) inc.
   5:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * portions Copyright (c) 1997 by Global Election Systems Inc.
   6:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** *
   7:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * The authors hereby grant permission to use, copy, modify, distribute,
   8:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * and license this software and its documentation for any purpose, provided
   9:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * that existing copyright notices are retained in all copies and that this
  10:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * notice and the following disclaimer are included verbatim in any
  11:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * distributions. No written agreement, license, or royalty fee is required
  12:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * for any of the authorized uses.
  13:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** *
  14:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * THIS SOFTWARE IS PROVIDED BY THE CONTRIBUTORS *AS IS* AND ANY EXPRESS OR
  15:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  16:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  17:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  18:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  19:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  20:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  21:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  22:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  23:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  24:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** *
  25:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** ******************************************************************************
  26:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * REVISION HISTORY
  27:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** *
  28:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * 03-01-01 Marc Boucher <marc@mbsi.ca>
  29:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** *   Ported to lwIP.
  30:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** * 97-11-05 Guy Lancaster <lancasterg@acm.org>, Global Election Systems Inc.
  31:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** *   Original.
  32:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** *****************************************************************************/
  33:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
  34:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
  35:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * ppp_defs.h - PPP definitions.
  36:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  *
  37:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * if_pppvar.h - private structures and declarations for PPP.
  38:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  *
  39:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Copyright (c) 1994 The Australian National University.
  40:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * All rights reserved.
  41:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  *
  42:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Permission to use, copy, modify, and distribute this software and its
  43:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * documentation is hereby granted, provided that the above copyright
  44:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * notice appears in all copies.  This software is provided without any
  45:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * warranty, express or implied. The Australian National University
  46:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * makes no representations about the suitability of this software for
  47:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * any purpose.
  48:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  *
  49:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * IN NO EVENT SHALL THE AUSTRALIAN NATIONAL UNIVERSITY BE LIABLE TO ANY
  50:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  51:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  52:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * THE AUSTRALIAN NATIONAL UNIVERSITY HAVE BEEN ADVISED OF THE POSSIBILITY
  53:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * OF SUCH DAMAGE.
  54:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  *
  55:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * THE AUSTRALIAN NATIONAL UNIVERSITY SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  56:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  57:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
  58:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * ON AN "AS IS" BASIS, AND THE AUSTRALIAN NATIONAL UNIVERSITY HAS NO
  59:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
  60:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * OR MODIFICATIONS.
  61:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
  62:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
  63:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
  64:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * if_ppp.h - Point-to-Point Protocol definitions.
  65:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  *
  66:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Copyright (c) 1989 Carnegie Mellon University.
  67:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * All rights reserved.
  68:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  *
  69:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Redistribution and use in source and binary forms are permitted
  70:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * provided that the above copyright notice and this paragraph are
  71:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * duplicated in all such forms and that any documentation,
  72:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * advertising materials, and other materials related to such
  73:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * distribution and use acknowledge that the software was developed
  74:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * by Carnegie Mellon University.  The name of the
  75:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * University may not be used to endorse or promote products derived
  76:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * from this software without specific prior written permission.
  77:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
  78:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
  79:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  80:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
  81:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
  82:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "lwip/opt.h"
  83:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
  84:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPP_SUPPORT /* don't build if not configured for use in lwipopts.h */
  85:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
  86:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "lwip/ip.h" /* for ip_input() */
  87:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
  88:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "ppp.h"
  89:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "pppdebug.h"
  90:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
  91:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "randm.h"
  92:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "fsm.h"
  93:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PAP_SUPPORT
  94:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "pap.h"
  95:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PAP_SUPPORT */
  96:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if CHAP_SUPPORT
  97:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "chap.h"
  98:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* CHAP_SUPPORT */
  99:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "ipcp.h"
 100:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "lcp.h"
 101:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "magic.h"
 102:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "auth.h"
 103:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if VJ_SUPPORT
 104:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "vj.h"
 105:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* VJ_SUPPORT */
 106:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 107:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "netif/ppp_oe.h"
 108:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 109:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 110:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include <string.h>
 111:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 112:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #include "dbg.h"
 113:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 114:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*************************/
 115:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*** LOCAL DEFINITIONS ***/
 116:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*************************/
 117:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 118:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
 119:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * The basic PPP frame.
 120:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
 121:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #define PPP_ADDRESS(p)  (((u_char *)(p))[0])
 122:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #define PPP_CONTROL(p)  (((u_char *)(p))[1])
 123:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #define PPP_PROTOCOL(p) ((((u_char *)(p))[2] << 8) + ((u_char *)(p))[3])
 124:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 125:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* PPP packet parser states.  Current state indicates operation yet to be
 126:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * completed. */
 127:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** typedef enum {
 128:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PDIDLE = 0,  /* Idle state - waiting. */
 129:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PDSTART,     /* Process start flag. */
 130:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PDADDRESS,   /* Process address field. */
 131:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PDCONTROL,   /* Process control field. */
 132:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PDPROTOCOL1, /* Process protocol field 1. */
 133:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PDPROTOCOL2, /* Process protocol field 2. */
 134:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PDDATA       /* Process data byte. */
 135:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** } PPPDevStates;
 136:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 137:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #define ESCAPE_P(accm, c) ((accm)[(c) >> 3] & pppACCMMask[c & 0x07])
 138:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 139:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /************************/
 140:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*** LOCAL DATA TYPES ***/
 141:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /************************/
 142:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
 143:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * PPP interface control block.
 144:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
 145:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** typedef struct PPPControl_s {
 146:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   char openFlag;                /* True when in use. */
 147:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 148:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct netif *ethif;
 149:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pppoe_softc *pppoe_sc;
 150:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 151:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int  if_up;                   /* True when the interface is up. */
 152:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int  errCode;                 /* Code indicating why interface is down. */
 153:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 154:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   sio_fd_t fd;                  /* File device ID of port. */
 155:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int  kill_link;               /* Shut the link down. */
 156:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int  sig_hup;                 /* Carrier lost. */
 157:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *inHead, *inTail; /* The input packet. */
 158:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDevStates inState;         /* The input process state. */
 159:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   char inEscaped;               /* Escape next character. */
 160:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u16_t inProtocol;             /* The input protocol code. */
 161:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u16_t inFCS;                  /* Input Frame Check Sequence value. */
 162:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 163:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int  mtu;                     /* Peer's mru */
 164:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int  pcomp;                   /* Does peer accept protocol compression? */
 165:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int  accomp;                  /* Does peer accept addr/ctl compression? */
 166:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_long lastXMit;              /* Time of last transmission. */
 167:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   ext_accm inACCM;              /* Async-Ctl-Char-Map for input. */
 168:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   ext_accm outACCM;             /* Async-Ctl-Char-Map for output. */
 169:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT && VJ_SUPPORT
 170:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int  vjEnabled;               /* Flag indicating VJ compression enabled. */
 171:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct vjcompress vjComp;     /* Van Jacobson compression header. */
 172:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT && VJ_SUPPORT */
 173:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 174:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct netif netif;
 175:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 176:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct ppp_addrs addrs;
 177:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 178:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   void (*linkStatusCB)(void *ctx, int errCode, void *arg);
 179:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   void *linkStatusCtx;
 180:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 181:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** } PPPControl;
 182:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 183:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 184:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
 185:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Ioctl definitions.
 186:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
 187:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 188:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** struct npioctl {
 189:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int         protocol; /* PPP procotol, e.g. PPP_IP */
 190:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   enum NPmode mode;
 191:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** };
 192:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 193:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 194:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 195:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /***********************************/
 196:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*** LOCAL FUNCTION DECLARATIONS ***/
 197:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /***********************************/
 198:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 199:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void pppMain(void *pd);
 200:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void pppDrop(PPPControl *pc);
 201:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void pppInProc(int pd, u_char *s, int l);
 202:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 203:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 204:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 205:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /******************************/
 206:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*** PUBLIC DATA STRUCTURES ***/
 207:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /******************************/
 208:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** u_long subnetMask;
 209:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 210:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static PPPControl pppControl[NUM_PPP]; /* The PPP interface control blocks. */
 211:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 212:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
 213:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * PPP Data Link Layer "protocol" table.
 214:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * One entry per supported protocol.
 215:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * The last entry must be NULL.
 216:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
 217:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** struct protent *ppp_protocols[] = {
 218:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   &lcp_protent,
 219:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PAP_SUPPORT
 220:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   &pap_protent,
 221:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PAP_SUPPORT */
 222:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if CHAP_SUPPORT
 223:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   &chap_protent,
 224:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* CHAP_SUPPORT */
 225:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if CBCP_SUPPORT
 226:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   &cbcp_protent,
 227:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* CBCP_SUPPORT */
 228:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   &ipcp_protent,
 229:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if CCP_SUPPORT
 230:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   &ccp_protent,
 231:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* CCP_SUPPORT */
 232:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   NULL
 233:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** };
 234:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 235:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 236:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
 237:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Buffers for outgoing packets.  This must be accessed only from the appropriate
 238:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * PPP task so that it doesn't need to be protected to avoid collisions.
 239:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
 240:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** u_char outpacket_buf[NUM_PPP][PPP_MRU+PPP_HDRLEN];
 241:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 242:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 243:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*****************************/
 244:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*** LOCAL DATA STRUCTURES ***/
 245:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*****************************/
 246:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 247:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 248:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
 249:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * FCS lookup table as calculated by genfcstab.
 250:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
 251:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static const u_short fcstab[256] = {
 252:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
 253:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
 254:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
 255:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
 256:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
 257:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
 258:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
 259:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
 260:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
 261:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
 262:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
 263:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
 264:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
 265:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
 266:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
 267:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
 268:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
 269:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
 270:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
 271:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
 272:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
 273:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
 274:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
 275:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
 276:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
 277:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
 278:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
 279:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
 280:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
 281:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
 282:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
 283:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
 284:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** };
 285:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 286:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* PPP's Asynchronous-Control-Character-Map.  The mask array is used
 287:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * to select the specific bit for a character. */
 288:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static u_char pppACCMMask[] = {
 289:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x01,
 290:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x02,
 291:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x04,
 292:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x08,
 293:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x10,
 294:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x20,
 295:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x40,
 296:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   0x80
 297:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** };
 298:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 299:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 300:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
 301:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppMainWakeup(int pd)
 302:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 303:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_DEBUG, "pppMainWakeup: unit %d\n", pd));
 304:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   sio_read_abort(pppControl[pd].fd);
 305:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 306:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 307:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 308:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
 309:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppLinkTerminated(int pd)
 310:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 311:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_DEBUG, "pppLinkTerminated: unit %d\n", pd));
 312:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 313:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 314:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pppControl[pd].ethif) {
 315:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppoe_disconnect(pppControl[pd].pppoe_sc);
 316:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else
 317:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 318:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   {
 319:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 320:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppMainWakeup(pd);
 321:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 322:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 323:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 324:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 325:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
 326:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppLinkDown(int pd)
 327:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 328:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_DEBUG, "pppLinkDown: unit %d\n", pd));
 329:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 330:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 331:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pppControl[pd].ethif) {
 332:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppoe_disconnect(pppControl[pd].pppoe_sc);
 333:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else
 334:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 335:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   {
 336:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 337:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppMainWakeup(pd);
 338:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 339:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 340:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 341:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 342:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* these callbacks are necessary because lcp_* functions
 343:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    must be called in the same context as pppInput(),
 344:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    namely the tcpip_thread(), essentially because
 345:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    they manipulate timeouts which are thread-private
 346:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** */
 347:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 348:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void
 349:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppStartCB(void *arg)
 350:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 351:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pd = (int)arg;
 352:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 353:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_DEBUG, "pppStartCB: unit %d\n", pd));
 354:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   lcp_lowerup(pd);
 355:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   lcp_open(pd); /* Start protocol */
 356:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 357:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 358:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void
 359:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppStopCB(void *arg)
 360:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 361:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pd = (int)arg;
 362:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 363:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_DEBUG, "pppStopCB: unit %d\n", pd));
 364:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   lcp_close(pd, "User request");
 365:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 366:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 367:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void
 368:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppHupCB(void *arg)
 369:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 370:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pd = (int)arg;
 371:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 372:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_DEBUG, "pppHupCB: unit %d\n", pd));
 373:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   lcp_lowerdown(pd);
 374:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   link_terminated(pd);
 375:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 376:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 377:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /***********************************/
 378:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*** PUBLIC FUNCTION DEFINITIONS ***/
 379:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /***********************************/
 380:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* Initialize the PPP subsystem. */
 381:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 382:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** struct ppp_settings ppp_settings;
 383:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 384:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
 385:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppInit(void)
 386:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 387:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct protent *protp;
 388:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int i, j;
 389:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 390:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   memset(&ppp_settings, 0, sizeof(ppp_settings));
 391:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPP_USEPEERSDNS == 1
 392:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    ppp_settings.usepeerdns = 1;
 393:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #else
 394:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   ppp_settings.usepeerdns = 0;
 395:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif
 396:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pppSetAuth(PPPAUTHTYPE_NONE, NULL, NULL);
 397:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 398:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   magicInit();
 399:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 400:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   subnetMask = htonl(0xffffff00);
 401:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 402:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   for (i = 0; i < NUM_PPP; i++) {
 403:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppControl[i].openFlag = 0;
 404:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 405:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     /*
 406:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****      * Initialize to the standard option set.
 407:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****      */
 408:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     for (j = 0; (protp = ppp_protocols[j]) != NULL; ++j) {
 409:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       (*protp->init)(i);
 410:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 411:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 412:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 413:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 414:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pppoe_init();
 415:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 416:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 417:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 418:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
 419:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppSetAuth(enum pppAuthType authType, const char *user, const char *passwd)
 420:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 421:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   switch(authType) {
 422:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPPAUTHTYPE_NONE:
 423:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     default:
 424:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #ifdef LWIP_PPP_STRICT_PAP_REJECT
 425:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       ppp_settings.refuse_pap = 1;
 426:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #else  /* LWIP_PPP_STRICT_PAP_REJECT */
 427:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* some providers request pap and accept an empty login/pw */
 428:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       ppp_settings.refuse_pap = 0;
 429:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* LWIP_PPP_STRICT_PAP_REJECT */
 430:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       ppp_settings.refuse_chap = 1;
 431:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 432:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 433:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPPAUTHTYPE_ANY:
 434:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Warning: Using PPPAUTHTYPE_ANY might have security consequences.
 435:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * RFC 1994 says:
 436:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        *
 437:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * In practice, within or associated with each PPP server, there is a
 438:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * database which associates "user" names with authentication
 439:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * information ("secrets").  It is not anticipated that a particular
 440:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * named user would be authenticated by multiple methods.  This would
 441:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * make the user vulnerable to attacks which negotiate the least secure
 442:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * method from among a set (such as PAP rather than CHAP).  If the same
 443:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * secret was used, PAP would reveal the secret to be used later with
 444:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * CHAP.
 445:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        *
 446:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * Instead, for each user name there should be an indication of exactly
 447:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * one method used to authenticate that user name.  If a user needs to
 448:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * make use of different authentication methods under different
 449:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * circumstances, then distinct user names SHOULD be employed, each of
 450:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * which identifies exactly one authentication method.
 451:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        *
 452:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        */
 453:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       ppp_settings.refuse_pap = 0;
 454:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       ppp_settings.refuse_chap = 0;
 455:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 456:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 457:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPPAUTHTYPE_PAP:
 458:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       ppp_settings.refuse_pap = 0;
 459:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       ppp_settings.refuse_chap = 1;
 460:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 461:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 462:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPPAUTHTYPE_CHAP:
 463:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       ppp_settings.refuse_pap = 1;
 464:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       ppp_settings.refuse_chap = 0;
 465:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 466:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 467:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 468:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(user) {
 469:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     strncpy(ppp_settings.user, user, sizeof(ppp_settings.user)-1);
 470:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     ppp_settings.user[sizeof(ppp_settings.user)-1] = '\0';
 471:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
 472:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     ppp_settings.user[0] = '\0';
 473:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 474:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 475:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(passwd) {
 476:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     strncpy(ppp_settings.passwd, passwd, sizeof(ppp_settings.passwd)-1);
 477:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     ppp_settings.passwd[sizeof(ppp_settings.passwd)-1] = '\0';
 478:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
 479:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     ppp_settings.passwd[0] = '\0';
 480:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 481:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 482:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 483:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 484:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* Open a new PPP connection using the given I/O device.
 485:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * This initializes the PPP control block but does not
 486:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * attempt to negotiate the LCP session.  If this port
 487:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * connects to a modem, the modem connection must be
 488:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * established before calling this.
 489:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Return a new PPP connection descriptor on success or
 490:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * an error code (negative) on failure. */
 491:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
 492:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppOverSerialOpen(sio_fd_t fd, void (*linkStatusCB)(void *ctx, int errCode, void *arg), void *linkS
 493:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 494:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc;
 495:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pd;
 496:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 497:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Find a free PPP session descriptor. Critical region? */
 498:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   for (pd = 0; pd < NUM_PPP && pppControl[pd].openFlag != 0; pd++);
 499:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 500:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd >= NUM_PPP) {
 501:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pd = PPPERR_OPEN;
 502:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
 503:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppControl[pd].openFlag = !0;
 504:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 505:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 506:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Launch a deamon thread. */
 507:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd >= 0) {
 508:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppControl[pd].openFlag = 1;
 509:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 510:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_init(pd);
 511:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc = &pppControl[pd];
 512:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->fd = fd;
 513:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 514:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->ethif= NULL;
 515:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 516:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->kill_link = 0;
 517:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->sig_hup = 0;
 518:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->if_up = 0;
 519:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->errCode = 0;
 520:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inState = PDIDLE;
 521:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inHead = NULL;
 522:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inTail = NULL;
 523:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inEscaped = 0;
 524:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->lastXMit = 0;
 525:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 526:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if VJ_SUPPORT
 527:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->vjEnabled = 0;
 528:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     vj_compress_init(&pc->vjComp);
 529:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* VJ_SUPPORT */
 530:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 531:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     /*
 532:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****      * Default the in and out accm so that escape and flag characters
 533:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****      * are always escaped.
 534:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****      */
 535:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     memset(pc->inACCM, 0, sizeof(ext_accm));
 536:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inACCM[15] = 0x60;
 537:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     memset(pc->outACCM, 0, sizeof(ext_accm));
 538:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->outACCM[15] = 0x60;
 539:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 540:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->linkStatusCB = linkStatusCB;
 541:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->linkStatusCtx = linkStatusCtx;
 542:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 543:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     sys_thread_new(PPP_THREAD_NAME, pppMain, (void*)pd, PPP_THREAD_STACKSIZE, PPP_THREAD_PRIO);
 544:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if(!linkStatusCB) {
 545:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       while(pd >= 0 && !pc->if_up) {
 546:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         sys_msleep(500);
 547:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         if (lcp_phase[pd] == PHASE_DEAD) {
 548:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           pppClose(pd);
 549:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           if (pc->errCode) {
 550:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pd = pc->errCode;
 551:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           } else {
 552:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pd = PPPERR_CONNECT;
 553:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           }
 554:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         }
 555:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
 556:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 557:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 558:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 559:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return pd;
 560:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 561:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 562:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 563:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 564:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void pppOverEthernetLinkStatusCB(int pd, int up);
 565:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 566:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
 567:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppOverEthernetClose(int pd)
 568:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 569:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl* pc = &pppControl[pd];
 570:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 571:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* *TJL* There's no lcp_deinit */
 572:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   lcp_close(pd, NULL);
 573:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 574:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pppoe_destroy(&pc->netif);
 575:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 576:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 577:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int pppOverEthernetOpen(struct netif *ethif, const char *service_name, const char *concentrator_nam
 578:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 579:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc;
 580:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pd;
 581:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 582:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(service_name);
 583:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(concentrator_name);
 584:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 585:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Find a free PPP session descriptor. Critical region? */
 586:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   for (pd = 0; pd < NUM_PPP && pppControl[pd].openFlag != 0; pd++);
 587:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd >= NUM_PPP) {
 588:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pd = PPPERR_OPEN;
 589:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
 590:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppControl[pd].openFlag = !0;
 591:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 592:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 593:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* PPP session descriptor found, start PPPoE */
 594:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd >= 0) {
 595:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 596:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppControl[pd].openFlag = 1;
 597:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 598:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_init(pd);
 599:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 600:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_wantoptions[pd].mru = PPPOE_MAXMTU;
 601:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_wantoptions[pd].neg_asyncmap = 0;
 602:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_wantoptions[pd].neg_pcompression = 0;
 603:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_wantoptions[pd].neg_accompression = 0;
 604:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 605:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_allowoptions[pd].mru = PPPOE_MAXMTU;
 606:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_allowoptions[pd].neg_asyncmap = 0;
 607:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_allowoptions[pd].neg_pcompression = 0;
 608:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     lcp_allowoptions[pd].neg_accompression = 0;
 609:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 610:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc = &pppControl[pd];
 611:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->if_up = 0;
 612:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->errCode = 0;
 613:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->lastXMit = 0;
 614:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 615:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->kill_link = 0;
 616:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->sig_hup = 0;
 617:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inState = PDIDLE;
 618:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inHead = NULL;
 619:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inTail = NULL;
 620:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inEscaped = 0;
 621:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if VJ_SUPPORT
 622:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->vjEnabled = 0;
 623:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* VJ_SUPPORT */
 624:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 625:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->ethif= ethif;
 626:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 627:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     memset(pc->inACCM,  0, sizeof(ext_accm));
 628:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     memset(pc->outACCM, 0, sizeof(ext_accm));
 629:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 630:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->linkStatusCB  = linkStatusCB;
 631:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->linkStatusCtx = linkStatusCtx;
 632:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 633:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if(pppoe_create(ethif, pd, pppOverEthernetLinkStatusCB, &pc->pppoe_sc) != ERR_OK) {
 634:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pc->openFlag = 0;
 635:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       return PPPERR_OPEN;
 636:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 637:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 638:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppoe_connect(pc->pppoe_sc);
 639:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 640:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if(!linkStatusCB) {
 641:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       while(pd >= 0 && !pc->if_up) {
 642:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         sys_msleep(500);
 643:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         if (lcp_phase[pd] == PHASE_DEAD) {
 644:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           pppClose(pd);
 645:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           if (pc->errCode) {
 646:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pd = pc->errCode;
 647:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           } else {
 648:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pd = PPPERR_CONNECT;
 649:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           }
 650:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         }
 651:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
 652:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 653:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 654:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 655:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return pd;
 656:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 657:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 658:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 659:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 660:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* Close a PPP connection and release the descriptor.
 661:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Any outstanding packets in the queues are dropped.
 662:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Return 0 on success, an error code on failure. */
 663:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
 664:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppClose(int pd)
 665:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 666:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
 667:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int st = 0;
 668:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 669:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Disconnect */
 670:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 671:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pc->ethif) {
 672:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_DEBUG, "pppClose: unit %d kill_link -> pppStopCB\n", pd));
 673:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->errCode = PPPERR_USER;
 674:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     /* This will leave us at PHASE_DEAD. */
 675:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tcpip_callback(pppStopCB, (void*)pd);
 676:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else
 677:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 678:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   {
 679:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 680:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->kill_link = !0;
 681:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppMainWakeup(pd);
 682:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 683:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 684:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 685:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(!pc->linkStatusCB) {
 686:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     while(st >= 0 && lcp_phase[pd] != PHASE_DEAD) {
 687:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       sys_msleep(500);
 688:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 689:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 690:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 691:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 692:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return st;
 693:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 694:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 695:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* This function is called when carrier is lost on the PPP channel. */
 696:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
 697:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppSigHUP(int pd)
 698:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 699:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
 700:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 701:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 702:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pc->ethif) {
 703:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_DEBUG, "pppSigHUP: unit %d sig_hup -> pppHupCB\n", pd));
 704:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tcpip_callback(pppHupCB, (void*)pd);
 705:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else
 706:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 707:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   {
 708:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 709:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->sig_hup = 1;
 710:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pppMainWakeup(pd);
 711:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 712:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 713:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 714:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 715:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 716:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void
 717:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** nPut(PPPControl *pc, struct pbuf *nb)
 718:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 719:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *b;
 720:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int c;
 721:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 722:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   for(b = nb; b != NULL; b = b->next) {
 723:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if((c = sio_write(pc->fd, b->payload, b->len)) != b->len) {
 724:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_WARNING,
 725:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                "PPP nPut: incomplete sio_write(%d,, %u) = %d\n", pc->fd, b->len, c));
 726:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       LINK_STATS_INC(link.err);
 727:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pc->lastXMit = 0; /* prepend PPP_FLAG to next packet */
 728:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 729:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 730:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 731:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 732:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pbuf_free(nb);
 733:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LINK_STATS_INC(link.xmit);
 734:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 735:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 736:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
 737:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * pppAppend - append given character to end of given pbuf.  If outACCM
 738:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * is not NULL and the character needs to be escaped, do so.
 739:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * If pbuf is full, append another.
 740:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Return the current pbuf.
 741:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
 742:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static struct pbuf *
 743:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppAppend(u_char c, struct pbuf *nb, ext_accm *outACCM)
 744:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 745:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *tb = nb;
 746:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 747:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Make sure there is room for the character and an escape code.
 748:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * Sure we don't quite fill the buffer if the character doesn't
 749:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * get escaped but is one character worth complicating this? */
 750:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Note: We assume no packet header. */
 751:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (nb && (PBUF_POOL_BUFSIZE - nb->len) < 2) {
 752:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tb = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
 753:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if (tb) {
 754:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       nb->next = tb;
 755:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     } else {
 756:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       LINK_STATS_INC(link.memerr);
 757:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 758:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     nb = tb;
 759:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 760:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 761:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (nb) {
 762:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if (outACCM && ESCAPE_P(*outACCM, c)) {
 763:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       *((u_char*)nb->payload + nb->len++) = PPP_ESCAPE;
 764:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       *((u_char*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 765:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     } else {
 766:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       *((u_char*)nb->payload + nb->len++) = c;
 767:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 768:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 769:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 770:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return tb;
 771:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 772:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 773:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 774:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 775:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static err_t
 776:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppifOutputOverEthernet(int pd, struct pbuf *p)
 777:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 778:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
 779:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *pb;
 780:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_short protocol = PPP_IP;
 781:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int i=0;
 782:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 783:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pb = pbuf_alloc(PBUF_LINK, pppoe_hdrlen + sizeof(protocol), PBUF_RAM);
 784:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(!pb) {
 785:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.memerr);
 786:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.proterr);
 787:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return ERR_MEM;
 788:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 789:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 790:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pbuf_header(pb, -pppoe_hdrlen);
 791:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 792:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->lastXMit = sys_jiffies();
 793:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 794:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (!pc->pcomp || protocol > 0xFF) {
 795:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     *((u_char*)pb->payload + i++) = (protocol >> 8) & 0xFF;
 796:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 797:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   *((u_char*)pb->payload + i) = protocol & 0xFF;
 798:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 799:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pbuf_chain(pb, p);
 800:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 801:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pppoe_xmit(pc->pppoe_sc, pb) != ERR_OK) {
 802:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.err);
 803:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return PPPERR_DEVICE;
 804:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 805:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 806:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LINK_STATS_INC(link.xmit);
 807:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return ERR_OK;
 808:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 809:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 810:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 811:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* Send a packet on the given connection. */
 812:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static err_t
 813:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppifOutput(struct netif *netif, struct pbuf *pb, struct ip_addr *ipaddr)
 814:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 815:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pd = (int)netif->state;
 816:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
 817:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 818:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_short protocol = PPP_IP;
 819:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_int fcsOut = PPP_INITFCS;
 820:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *headMB = NULL, *tailMB = NULL, *p;
 821:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_char c;
 822:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 823:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 824:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(ipaddr);
 825:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 826:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Validate parameters. */
 827:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* We let any protocol value go through - it can't hurt us
 828:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * and the peer will just drop it if it's not accepting it. */
 829:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd < 0 || pd >= NUM_PPP || !pc->openFlag || !pb) {
 830:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING, "pppifOutput[%d]: bad parms prot=%d pb=%p\n",
 831:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               pd, PPP_IP, pb));
 832:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.opterr);
 833:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.drop);
 834:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return ERR_ARG;
 835:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 836:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 837:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Check that the link is up. */
 838:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (lcp_phase[pd] == PHASE_DEAD) {
 839:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_ERR, "pppifOutput[%d]: link not up\n", pd));
 840:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.rterr);
 841:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.drop);
 842:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return ERR_RTE;
 843:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 844:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 845:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
 846:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pc->ethif) {
 847:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return pppifOutputOverEthernet(pd, pb);
 848:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 849:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
 850:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 851:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 852:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Grab an output buffer. */
 853:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   headMB = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
 854:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (headMB == NULL) {
 855:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING, "pppifOutput[%d]: first alloc fail\n", pd));
 856:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.memerr);
 857:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.drop);
 858:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return ERR_MEM;
 859:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 860:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 861:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if VJ_SUPPORT
 862:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /*
 863:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * Attempt Van Jacobson header compression if VJ is configured and
 864:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * this is an IP packet.
 865:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    */
 866:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (protocol == PPP_IP && pc->vjEnabled) {
 867:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     switch (vj_compress_tcp(&pc->vjComp, pb)) {
 868:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       case TYPE_IP:
 869:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         /* No change...
 870:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            protocol = PPP_IP_PROTOCOL; */
 871:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         break;
 872:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       case TYPE_COMPRESSED_TCP:
 873:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         protocol = PPP_VJC_COMP;
 874:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         break;
 875:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       case TYPE_UNCOMPRESSED_TCP:
 876:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         protocol = PPP_VJC_UNCOMP;
 877:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         break;
 878:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       default:
 879:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         PPPDEBUG((LOG_WARNING, "pppifOutput[%d]: bad IP packet\n", pd));
 880:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         LINK_STATS_INC(link.proterr);
 881:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         LINK_STATS_INC(link.drop);
 882:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         pbuf_free(headMB);
 883:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         return ERR_VAL;
 884:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 885:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 886:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* VJ_SUPPORT */
 887:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 888:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tailMB = headMB;
 889:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 890:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Build the PPP header. */
 891:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if ((sys_jiffies() - pc->lastXMit) >= PPP_MAXIDLEFLAG) {
 892:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tailMB = pppAppend(PPP_FLAG, tailMB, NULL);
 893:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 894:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 895:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->lastXMit = sys_jiffies();
 896:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (!pc->accomp) {
 897:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     fcsOut = PPP_FCS(fcsOut, PPP_ALLSTATIONS);
 898:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tailMB = pppAppend(PPP_ALLSTATIONS, tailMB, &pc->outACCM);
 899:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     fcsOut = PPP_FCS(fcsOut, PPP_UI);
 900:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tailMB = pppAppend(PPP_UI, tailMB, &pc->outACCM);
 901:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 902:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (!pc->pcomp || protocol > 0xFF) {
 903:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     c = (protocol >> 8) & 0xFF;
 904:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     fcsOut = PPP_FCS(fcsOut, c);
 905:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tailMB = pppAppend(c, tailMB, &pc->outACCM);
 906:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 907:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   c = protocol & 0xFF;
 908:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   fcsOut = PPP_FCS(fcsOut, c);
 909:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tailMB = pppAppend(c, tailMB, &pc->outACCM);
 910:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 911:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Load packet. */
 912:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   for(p = pb; p; p = p->next) {
 913:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     int n;
 914:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     u_char *sPtr;
 915:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 916:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     sPtr = (u_char*)p->payload;
 917:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     n = p->len;
 918:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     while (n-- > 0) {
 919:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       c = *sPtr++;
 920:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 921:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Update FCS before checking for special characters. */
 922:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       fcsOut = PPP_FCS(fcsOut, c);
 923:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 924:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Copy to output buffer escaping special characters. */
 925:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       tailMB = pppAppend(c, tailMB, &pc->outACCM);
 926:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
 927:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 928:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 929:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Add FCS and trailing flag. */
 930:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   c = ~fcsOut & 0xFF;
 931:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tailMB = pppAppend(c, tailMB, &pc->outACCM);
 932:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   c = (~fcsOut >> 8) & 0xFF;
 933:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tailMB = pppAppend(c, tailMB, &pc->outACCM);
 934:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tailMB = pppAppend(PPP_FLAG, tailMB, NULL);
 935:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 936:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* If we failed to complete the packet, throw it away. */
 937:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (!tailMB) {
 938:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING,
 939:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              "pppifOutput[%d]: Alloc err - dropping proto=%d\n",
 940:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               pd, protocol));
 941:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pbuf_free(headMB);
 942:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.memerr);
 943:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.drop);
 944:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return ERR_MEM;
 945:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
 946:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 947:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Send it. */
 948:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_INFO, "pppifOutput[%d]: proto=0x%04X\n", pd, protocol));
 949:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 950:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   nPut(pc, headMB);
 951:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 952:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 953:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return ERR_OK;
 954:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 955:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 956:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* Get and set parameters for the given connection.
 957:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Return 0 on success, an error code on failure. */
 958:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
 959:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppIOCtl(int pd, int cmd, void *arg)
 960:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
  19              		.loc 1 960 0
  20 0000 10B5     		push	{r4, lr}
  21              	.LCFI0:
  22              	.LVL0:
  23 0002 141C     		mov	r4, r2
 961:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
 962:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int st = 0;
 963:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
 964:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd < 0 || pd >= NUM_PPP) {
  24              		.loc 1 964 0
  25 0004 0028     		cmp	r0, #0
  26 0006 27D1     		bne	.L2
  27              	.LVL1:
 965:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     st = PPPERR_PARAM;
 966:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
 967:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     switch(cmd) {
  28              		.loc 1 967 0
  29 0008 6529     		cmp	r1, #101
  30 000a 10D0     		beq	.L4
  31 000c 6529     		cmp	r1, #101
  32 000e 02DC     		bgt	.L7
  33 0010 6429     		cmp	r1, #100
  34 0012 21D1     		bne	.L2
  35 0014 04E0     		b	.L10
  36              	.L7:
  37 0016 6629     		cmp	r1, #102
  38 0018 10D0     		beq	.L5
  39 001a 6729     		cmp	r1, #103
  40 001c 1CD1     		bne	.L2
  41 001e 14E0     		b	.L11
  42              	.L10:
 968:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPPCTLG_UPSTATUS:      /* Get the PPP up status. */
 969:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if (arg) {
  43              		.loc 1 969 0
  44 0020 002A     		cmp	r2, #0
  45 0022 19D0     		beq	.L2
  46              	.LVL2:
 970:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         *(int *)arg = (int)(pc->if_up);
  47              		.loc 1 970 0
  48 0024 0F4B     		ldr	r3, .L12
  49 0026 5B68     		ldr	r3, [r3, #4]
  50 0028 1360     		str	r3, [r2]
  51 002a 0020     		mov	r0, #0
  52              	.LVL3:
  53 002c 16E0     		b	.L8
  54              	.LVL4:
  55              	.L4:
 971:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       } else {
 972:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         st = PPPERR_PARAM;
 973:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
 974:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 975:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPPCTLS_ERRCODE:       /* Set the PPP error code. */
 976:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if (arg) {
  56              		.loc 1 976 0
  57 002e 002A     		cmp	r2, #0
  58 0030 12D0     		beq	.L2
  59              	.LVL5:
 977:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         pc->errCode = *(int *)arg;
  60              		.loc 1 977 0
  61 0032 0C4A     		ldr	r2, .L12
  62              	.LVL6:
  63 0034 2368     		ldr	r3, [r4]
  64 0036 9360     		str	r3, [r2, #8]
  65 0038 0020     		mov	r0, #0
  66              	.LVL7:
  67 003a 0FE0     		b	.L8
  68              	.LVL8:
  69              	.L5:
 978:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       } else {
 979:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         st = PPPERR_PARAM;
 980:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
 981:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 982:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPPCTLG_ERRCODE:       /* Get the PPP error code. */
 983:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if (arg) {
  70              		.loc 1 983 0
  71 003c 002A     		cmp	r2, #0
  72 003e 0BD0     		beq	.L2
  73              	.LVL9:
 984:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         *(int *)arg = (int)(pc->errCode);
  74              		.loc 1 984 0
  75 0040 084B     		ldr	r3, .L12
  76 0042 9B68     		ldr	r3, [r3, #8]
  77 0044 1360     		str	r3, [r2]
  78 0046 0020     		mov	r0, #0
  79              	.LVL10:
  80 0048 08E0     		b	.L8
  81              	.LVL11:
  82              	.L11:
 985:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       } else {
 986:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         st = PPPERR_PARAM;
 987:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
 988:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 989:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
 990:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPPCTLG_FD:
 991:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if (arg) {
  83              		.loc 1 991 0
  84 004a 002A     		cmp	r2, #0
  85 004c 04D0     		beq	.L2
  86              	.LVL12:
 992:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         *(sio_fd_t *)arg = pc->fd;
  87              		.loc 1 992 0
  88 004e 054B     		ldr	r3, .L12
  89 0050 DB68     		ldr	r3, [r3, #12]
  90 0052 1360     		str	r3, [r2]
  91 0054 0020     		mov	r0, #0
  92              	.LVL13:
  93 0056 01E0     		b	.L8
  94              	.LVL14:
  95              	.L2:
  96 0058 0120     		mov	r0, #1
  97              	.LVL15:
  98 005a 4042     		neg	r0, r0
  99              	.L8:
 100              	.LVL16:
 993:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       } else {
 994:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         st = PPPERR_PARAM;
 995:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
 996:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
 997:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
 998:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     default:
 999:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       st = PPPERR_PARAM;
1000:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
1001:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
1002:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1003:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1004:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return st;
1005:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 101              		.loc 1 1005 0
 102              		@ sp needed for prologue
 103              	.LVL17:
 104 005c 10BC     		pop	{r4}
 105 005e 02BC     		pop	{r1}
 106 0060 0847     		bx	r1
 107              	.L13:
 108 0062 C046     		.align	2
 109              	.L12:
 110 0064 00000000 		.word	pppControl
 111              	.LFE304:
 113              		.align	2
 114              		.global	pppMTU
 115              		.code	16
 116              		.thumb_func
 118              	pppMTU:
 119              	.LFB305:
1006:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1007:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1008:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Return the Maximum Transmission Unit for the given PPP connection.
1009:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1010:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** u_int
1011:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppMTU(int pd)
1012:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 120              		.loc 1 1012 0
 121              	.LVL18:
1013:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1014:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_int st;
1015:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1016:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Validate parameters. */
1017:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd < 0 || pd >= NUM_PPP || !pc->openFlag) {
 122              		.loc 1 1017 0
 123 0068 0028     		cmp	r0, #0
 124 006a 06D1     		bne	.L15
 125 006c 044B     		ldr	r3, .L18
 126 006e 1B78     		ldrb	r3, [r3]
 127 0070 002B     		cmp	r3, #0
 128 0072 02D0     		beq	.L15
1018:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     st = 0;
1019:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
1020:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     st = pc->mtu;
 129              		.loc 1 1020 0
 130 0074 024B     		ldr	r3, .L18
 131 0076 D86A     		ldr	r0, [r3, #44]
 132              	.LVL19:
 133 0078 00E0     		b	.L16
 134              	.LVL20:
 135              	.L15:
 136 007a 0020     		mov	r0, #0
 137              	.LVL21:
 138              	.L16:
 139              	.LVL22:
1021:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1022:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1023:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return st;
1024:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 140              		.loc 1 1024 0
 141              		@ sp needed for prologue
 142 007c 7047     		bx	lr
 143              	.L19:
 144 007e C046     		.align	2
 145              	.L18:
 146 0080 00000000 		.word	pppControl
 147              	.LFE305:
 149              		.align	2
 150              		.global	get_idle_time
 151              		.code	16
 152              		.thumb_func
 154              	get_idle_time:
 155              	.LFB310:
1025:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1026:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
1027:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1028:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppWriteOverEthernet(int pd, const u_char *s, int n)
1029:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1030:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1031:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *pb;
1032:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1033:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* skip address & flags */
1034:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   s += 2;
1035:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   n -= 2;
1036:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1037:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pb = pbuf_alloc(PBUF_LINK, pppoe_hdrlen + n, PBUF_RAM);
1038:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(!pb) {
1039:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.memerr);
1040:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.proterr);
1041:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return PPPERR_ALLOC;
1042:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1043:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1044:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pbuf_header(pb, -pppoe_hdrlen);
1045:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1046:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->lastXMit = sys_jiffies();
1047:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1048:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   MEMCPY(pb->payload, s, n);
1049:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1050:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pppoe_xmit(pc->pppoe_sc, pb) != ERR_OK) {
1051:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.err);
1052:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return PPPERR_DEVICE;
1053:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1054:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1055:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LINK_STATS_INC(link.xmit);
1056:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return PPPERR_NONE;
1057:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1058:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
1059:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1060:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1061:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Write n characters to a ppp link.
1062:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  *  RETURN: >= 0 Number of characters written
1063:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  *           -1 Failed to write to device
1064:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1065:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1066:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppWrite(int pd, const u_char *s, int n)
1067:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1068:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1069:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
1070:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_char c;
1071:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_int fcsOut;
1072:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *headMB, *tailMB;
1073:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
1074:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1075:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
1076:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pc->ethif) {
1077:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return pppWriteOverEthernet(pd, s, n);
1078:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1079:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
1080:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1081:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
1082:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   headMB = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
1083:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (headMB == NULL) {
1084:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.memerr);
1085:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.proterr);
1086:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return PPPERR_ALLOC;
1087:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1088:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1089:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tailMB = headMB;
1090:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1091:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* If the link has been idle, we'll send a fresh flag character to
1092:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * flush any noise. */
1093:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if ((sys_jiffies() - pc->lastXMit) >= PPP_MAXIDLEFLAG) {
1094:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tailMB = pppAppend(PPP_FLAG, tailMB, NULL);
1095:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1096:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->lastXMit = sys_jiffies();
1097:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1098:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   fcsOut = PPP_INITFCS;
1099:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Load output buffer. */
1100:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   while (n-- > 0) {
1101:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     c = *s++;
1102:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1103:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     /* Update FCS before checking for special characters. */
1104:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     fcsOut = PPP_FCS(fcsOut, c);
1105:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1106:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     /* Copy to output buffer escaping special characters. */
1107:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tailMB = pppAppend(c, tailMB, &pc->outACCM);
1108:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1109:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1110:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Add FCS and trailing flag. */
1111:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   c = ~fcsOut & 0xFF;
1112:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tailMB = pppAppend(c, tailMB, &pc->outACCM);
1113:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   c = (~fcsOut >> 8) & 0xFF;
1114:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tailMB = pppAppend(c, tailMB, &pc->outACCM);
1115:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tailMB = pppAppend(PPP_FLAG, tailMB, NULL);
1116:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1117:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* If we failed to complete the packet, throw it away.
1118:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * Otherwise send it. */
1119:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (!tailMB) {
1120:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING,
1121:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              "pppWrite[%d]: Alloc err - dropping pbuf len=%d\n", pd, headMB->len));
1122:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            /*"pppWrite[%d]: Alloc err - dropping %d:%.*H", pd, headMB->len, LWIP_MIN(headMB->len * 
1123:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pbuf_free(headMB);
1124:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.memerr);
1125:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LINK_STATS_INC(link.proterr);
1126:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return PPPERR_ALLOC;
1127:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1128:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1129:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_INFO, "pppWrite[%d]: len=%d\n", pd, headMB->len));
1130:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                    /* "pppWrite[%d]: %d:%.*H", pd, headMB->len, LWIP_MIN(headMB->len * 2, 40), head
1131:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   nPut(pc, headMB);
1132:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
1133:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1134:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return PPPERR_NONE;
1135:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1136:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1137:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1138:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * ppp_send_config - configure the transmit characteristics of
1139:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * the ppp interface.
1140:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1141:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
1142:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** ppp_send_config( int unit, int mtu, u32_t asyncmap, int pcomp, int accomp)
1143:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1144:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[unit];
1145:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int i;
1146:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1147:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->mtu = mtu;
1148:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->pcomp = pcomp;
1149:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->accomp = accomp;
1150:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1151:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Load the ACCM bits for the 32 control codes. */
1152:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   for (i = 0; i < 32/8; i++) {
1153:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->outACCM[i] = (u_char)((asyncmap >> (8 * i)) & 0xFF);
1154:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1155:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_INFO, "ppp_send_config[%d]: outACCM=%X %X %X %X\n",
1156:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             unit,
1157:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pc->outACCM[0], pc->outACCM[1], pc->outACCM[2], pc->outACCM[3]));
1158:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1159:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1160:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1161:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1162:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * ppp_set_xaccm - set the extended transmit ACCM for the interface.
1163:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1164:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
1165:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** ppp_set_xaccm(int unit, ext_accm *accm)
1166:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1167:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   SMEMCPY(pppControl[unit].outACCM, accm, sizeof(ext_accm));
1168:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_INFO, "ppp_set_xaccm[%d]: outACCM=%X %X %X %X\n",
1169:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             unit,
1170:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pppControl[unit].outACCM[0],
1171:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pppControl[unit].outACCM[1],
1172:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pppControl[unit].outACCM[2],
1173:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pppControl[unit].outACCM[3]));
1174:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1175:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1176:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1177:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1178:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * ppp_recv_config - configure the receive-side characteristics of
1179:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * the ppp interface.
1180:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1181:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
1182:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** ppp_recv_config( int unit, int mru, u32_t asyncmap, int pcomp, int accomp)
1183:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1184:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[unit];
1185:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int i;
1186:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1187:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(accomp);
1188:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(pcomp);
1189:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(mru);
1190:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1191:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* Load the ACCM bits for the 32 control codes. */
1192:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   for (i = 0; i < 32 / 8; i++) {
1193:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inACCM[i] = (u_char)(asyncmap >> (i * 8));
1194:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1195:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_INFO, "ppp_recv_config[%d]: inACCM=%X %X %X %X\n",
1196:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             unit,
1197:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pc->inACCM[0], pc->inACCM[1], pc->inACCM[2], pc->inACCM[3]));
1198:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1199:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1200:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if 0
1201:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1202:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * ccp_test - ask kernel whether a given compression method
1203:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * is acceptable for use.  Returns 1 if the method and parameters
1204:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * are OK, 0 if the method is known but the parameters are not OK
1205:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * (e.g. code size should be reduced), or -1 if the method is unknown.
1206:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1207:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1208:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** ccp_test( int unit, int opt_len,  int for_transmit, u_char *opt_ptr)
1209:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1210:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return 0; /* XXX Currently no compression. */
1211:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1212:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1213:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1214:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * ccp_flags_set - inform kernel about the current state of CCP.
1215:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1216:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
1217:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** ccp_flags_set(int unit, int isopen, int isup)
1218:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1219:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* XXX */
1220:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1221:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1222:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1223:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * ccp_fatal_error - returns 1 if decompression was disabled as a
1224:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * result of an error detected after decompression of a packet,
1225:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * 0 otherwise.  This is necessary because of patent nonsense.
1226:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1227:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1228:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** ccp_fatal_error(int unit)
1229:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1230:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* XXX */
1231:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return 0;
1232:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1233:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif
1234:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1235:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1236:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * get_idle_time - return how long the link has been idle.
1237:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1238:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1239:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** get_idle_time(int u, struct ppp_idle *ip)
1240:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 156              		.loc 1 1240 0
 157              	.LVL23:
1241:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* XXX */
1242:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(u);
1243:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(ip);
1244:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1245:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return 0;
1246:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 158              		.loc 1 1246 0
 159 0084 0020     		mov	r0, #0
 160              	.LVL24:
 161              		@ sp needed for prologue
 162 0086 7047     		bx	lr
 163              	.LFE310:
 165              		.align	2
 166              		.code	16
 167              		.thumb_func
 169              	pppifNetifInit:
 170              	.LFB313:
1247:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1248:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1249:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1250:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Return user specified netmask, modified by any mask we might determine
1251:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * for address `addr' (in network byte order).
1252:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Here we scan through the system's list of interfaces, looking for
1253:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * any non-point-to-point interfaces which might appear to be on the same
1254:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * network as `addr'.  If we find any, we OR in their netmask to the
1255:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * user-specified netmask.
1256:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1257:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** u32_t
1258:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** GetMask(u32_t addr)
1259:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1260:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u32_t mask, nmask;
1261:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1262:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   htonl(addr);
1263:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (IN_CLASSA(addr)) { /* determine network mask for address class */
1264:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     nmask = IN_CLASSA_NET;
1265:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else if (IN_CLASSB(addr)) {
1266:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     nmask = IN_CLASSB_NET;
1267:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
1268:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     nmask = IN_CLASSC_NET;
1269:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1270:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1271:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* class D nets are disallowed by bad_ip_adrs */
1272:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   mask = subnetMask | htonl(nmask);
1273:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1274:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* XXX
1275:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * Scan through the system's network interfaces.
1276:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * Get each netmask and OR them into our mask.
1277:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    */
1278:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1279:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return mask;
1280:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1281:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1282:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1283:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * sifvjcomp - config tcp header compression
1284:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1285:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1286:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** sifvjcomp(int pd, int vjcomp, int cidcomp, int maxcid)
1287:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1288:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT && VJ_SUPPORT
1289:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1290:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1291:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->vjEnabled = vjcomp;
1292:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->vjComp.compressSlot = cidcomp;
1293:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->vjComp.maxSlotIndex = maxcid;
1294:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_INFO, "sifvjcomp: VJ compress enable=%d slot=%d max slot=%d\n",
1295:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             vjcomp, cidcomp, maxcid));
1296:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #else /* PPPOS_SUPPORT && VJ_SUPPORT */
1297:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(pd);
1298:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(vjcomp);
1299:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(cidcomp);
1300:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(maxcid);
1301:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT && VJ_SUPPORT */
1302:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1303:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return 0;
1304:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1305:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1306:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1307:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * pppifNetifInit - netif init callback
1308:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1309:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static err_t
1310:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppifNetifInit(struct netif *netif)
1311:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 171              		.loc 1 1311 0
 172 0088 10B5     		push	{r4, lr}
 173              	.LCFI1:
 174              	.LVL25:
 175 008a 041C     		mov	r4, r0
1312:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   netif->name[0] = 'p';
 176              		.loc 1 1312 0
 177 008c 7022     		mov	r2, #112
 178 008e 2E23     		mov	r3, #46
 179 0090 C254     		strb	r2, [r0, r3]
1313:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   netif->name[1] = 'p';
 180              		.loc 1 1313 0
 181 0092 2F23     		mov	r3, #47
 182 0094 C254     		strb	r2, [r0, r3]
1314:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   netif->output = pppifOutput;
 183              		.loc 1 1314 0
 184 0096 054B     		ldr	r3, .L24
 185 0098 4361     		str	r3, [r0, #20]
1315:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   netif->mtu = pppMTU((int)netif->state);
 186              		.loc 1 1315 0
 187 009a C069     		ldr	r0, [r0, #28]
 188              	.LVL26:
 189 009c FFF7FEFF 		bl	pppMTU
 190 00a0 A084     		strh	r0, [r4, #36]
1316:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return ERR_OK;
1317:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 191              		.loc 1 1317 0
 192 00a2 0020     		mov	r0, #0
 193              		@ sp needed for prologue
 194              	.LVL27:
 195 00a4 10BC     		pop	{r4}
 196 00a6 02BC     		pop	{r1}
 197 00a8 0847     		bx	r1
 198              	.L25:
 199 00aa C046     		.align	2
 200              	.L24:
 201 00ac 00000000 		.word	pppifOutput
 202              	.LFE313:
 204              		.align	2
 205              		.global	sifnpmode
 206              		.code	16
 207              		.thumb_func
 209              	sifnpmode:
 210              	.LFB315:
1318:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1319:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1320:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1321:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * sifup - Config the interface up and enable IP packets to pass.
1322:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1323:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1324:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** sifup(int pd)
1325:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1326:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1327:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int st = 1;
1328:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1329:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd < 0 || pd >= NUM_PPP || !pc->openFlag) {
1330:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     st = 0;
1331:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING, "sifup[%d]: bad parms\n", pd));
1332:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
1333:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     netif_remove(&pc->netif);
1334:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if (netif_add(&pc->netif, &pc->addrs.our_ipaddr, &pc->addrs.netmask, &pc->addrs.his_ipaddr, (vo
1335:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       netif_set_up(&pc->netif);
1336:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pc->if_up = 1;
1337:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pc->errCode = PPPERR_NONE;
1338:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1339:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_DEBUG, "sifup: unit %d: linkStatusCB=%lx errCode=%d\n", pd, pc->linkStatusCB, p
1340:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if(pc->linkStatusCB) {
1341:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         pc->linkStatusCB(pc->linkStatusCtx, pc->errCode, &pc->addrs);
1342:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1343:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     } else {
1344:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       st = 0;
1345:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_ERR, "sifup[%d]: netif_add failed\n", pd));
1346:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
1347:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1348:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1349:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return st;
1350:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1351:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1352:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1353:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * sifnpmode - Set the mode for handling packets for a given NP.
1354:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1355:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1356:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** sifnpmode(int u, int proto, enum NPmode mode)
1357:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 211              		.loc 1 1357 0
 212              	.LVL28:
1358:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(u);
1359:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(proto);
1360:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(mode);
1361:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return 0;
1362:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 213              		.loc 1 1362 0
 214 00b0 0020     		mov	r0, #0
 215              	.LVL29:
 216              		@ sp needed for prologue
 217 00b2 7047     		bx	lr
 218              	.LFE315:
 220              		.align	2
 221              		.code	16
 222              		.thumb_func
 224              	pppAppend:
 225              	.LFB302:
 226              		.loc 1 744 0
 227 00b4 70B5     		push	{r4, r5, r6, lr}
 228              	.LCFI2:
 229              	.LVL30:
 230 00b6 0C1C     		mov	r4, r1
 231 00b8 161C     		mov	r6, r2
 232 00ba 0006     		lsl	r0, r0, #24
 233              	.LVL31:
 234 00bc 050E     		lsr	r5, r0, #24
 235              	.LVL32:
 236              		.loc 1 751 0
 237 00be 0029     		cmp	r1, #0
 238 00c0 01D1     		bne	.L29
 239              	.LVL33:
 240 00c2 081C     		mov	r0, r1
 241              	.LVL34:
 242 00c4 2EE0     		b	.L30
 243              	.LVL35:
 244              	.L29:
 245 00c6 4A89     		ldrh	r2, [r1, #10]
 246 00c8 C823     		mov	r3, #200
 247 00ca 9B1A     		sub	r3, r3, r2
 248 00cc 012B     		cmp	r3, #1
 249 00ce 2CDC     		bgt	.L31
 250              		.loc 1 752 0
 251 00d0 0320     		mov	r0, #3
 252 00d2 0021     		mov	r1, #0
 253              	.LVL36:
 254 00d4 0322     		mov	r2, #3
 255 00d6 FFF7FEFF 		bl	pbuf_alloc
 256              		.loc 1 753 0
 257 00da 0028     		cmp	r0, #0
 258 00dc 02D0     		beq	.L32
 259              	.LVL37:
 260              		.loc 1 754 0
 261 00de 2060     		str	r0, [r4]
 262 00e0 041C     		mov	r4, r0
 263 00e2 23E0     		b	.L33
 264              	.L32:
 265              		.loc 1 756 0
 266 00e4 134A     		ldr	r2, .L38
 267 00e6 9389     		ldrh	r3, [r2, #12]
 268 00e8 0133     		add	r3, r3, #1
 269 00ea 9381     		strh	r3, [r2, #12]
 270 00ec 1AE0     		b	.L30
 271              	.LVL38:
 272              	.L37:
 273              		.loc 1 762 0
 274 00ee 1249     		ldr	r1, .L38+4
 275 00f0 0723     		mov	r3, #7
 276 00f2 2B40     		and	r3, r3, r5
 277 00f4 EA08     		lsr	r2, r5, #3
 278 00f6 C95C     		ldrb	r1, [r1, r3]
 279 00f8 B35C     		ldrb	r3, [r6, r2]
 280 00fa 0B42     		tst	r3, r1
 281 00fc 0DD0     		beq	.L34
 282              		.loc 1 763 0
 283 00fe 6389     		ldrh	r3, [r4, #10]
 284 0100 6168     		ldr	r1, [r4, #4]
 285 0102 7D22     		mov	r2, #125
 286 0104 CA54     		strb	r2, [r1, r3]
 287 0106 0133     		add	r3, r3, #1
 288 0108 1B04     		lsl	r3, r3, #16
 289 010a 1B0C     		lsr	r3, r3, #16
 290              		.loc 1 764 0
 291 010c 6168     		ldr	r1, [r4, #4]
 292 010e 2022     		mov	r2, #32
 293 0110 6A40     		eor	r2, r2, r5
 294 0112 CA54     		strb	r2, [r1, r3]
 295 0114 0133     		add	r3, r3, #1
 296 0116 6381     		strh	r3, [r4, #10]
 297 0118 04E0     		b	.L30
 298              	.LVL39:
 299              	.L34:
 300              		.loc 1 766 0
 301 011a 6389     		ldrh	r3, [r4, #10]
 302 011c 6268     		ldr	r2, [r4, #4]
 303 011e D554     		strb	r5, [r2, r3]
 304 0120 0133     		add	r3, r3, #1
 305 0122 6381     		strh	r3, [r4, #10]
 306              	.LVL40:
 307              	.L30:
 308              	.LVL41:
 309              		.loc 1 771 0
 310              		@ sp needed for prologue
 311              	.LVL42:
 312              	.LVL43:
 313              	.LVL44:
 314 0124 70BC     		pop	{r4, r5, r6}
 315 0126 02BC     		pop	{r1}
 316 0128 0847     		bx	r1
 317              	.LVL45:
 318              	.L31:
 319              		.loc 1 766 0
 320 012a 081C     		mov	r0, r1
 321              	.LVL46:
 322              	.L33:
 323              		.loc 1 762 0
 324 012c 002E     		cmp	r6, #0
 325 012e DED1     		bne	.L37
 326 0130 F3E7     		b	.L34
 327              	.L39:
 328 0132 C046     		.align	2
 329              	.L38:
 330 0134 00000000 		.word	lwip_stats
 331 0138 1C020000 		.word	pppACCMMask
 332              	.LFE302:
 334              		.section	.rodata.str1.4,"aMS",%progbits,1
 335              		.align	2
 336              	.LC6:
 337 0000 73696676 		.ascii	"sifvjcomp: VJ compress enable=%d slot=%d max slot=%"
 337      6A636F6D 
 337      703A2056 
 337      4A20636F 
 337      6D707265 
 338 0033 640A00   		.ascii	"d\012\000"
 339              		.text
 340              		.align	2
 341              		.global	sifvjcomp
 342              		.code	16
 343              		.thumb_func
 345              	sifvjcomp:
 346              	.LFB312:
 347              		.loc 1 1287 0
 348 013c 30B5     		push	{r4, r5, lr}
 349              	.LCFI3:
 350              	.LVL47:
 351 013e 81B0     		sub	sp, sp, #4
 352              	.LCFI4:
 353 0140 0C1C     		mov	r4, r1
 354 0142 151C     		mov	r5, r2
 355              		.loc 1 1289 0
 356 0144 C200     		lsl	r2, r0, #3
 357              	.LVL48:
 358 0146 1218     		add	r2, r2, r0
 359 0148 D201     		lsl	r2, r2, #7
 360 014a 121A     		sub	r2, r2, r0
 361 014c 9200     		lsl	r2, r2, #2
 362 014e 0949     		ldr	r1, .L42
 363              	.LVL49:
 364 0150 8918     		add	r1, r1, r2
 365              	.LVL50:
 366              		.loc 1 1291 0
 367 0152 CC67     		str	r4, [r1, #124]
 368              		.loc 1 1292 0
 369 0154 8922     		mov	r2, #137
 370 0156 8D54     		strb	r5, [r1, r2]
 371              		.loc 1 1293 0
 372 0158 8822     		mov	r2, #136
 373 015a 8B54     		strb	r3, [r1, r2]
 374              		.loc 1 1294 0
 375 015c 0649     		ldr	r1, .L42+4
 376              	.LVL51:
 377 015e 0093     		str	r3, [sp]
 378 0160 0520     		mov	r0, #5
 379              	.LVL52:
 380 0162 221C     		mov	r2, r4
 381 0164 2B1C     		mov	r3, r5
 382              	.LVL53:
 383 0166 FFF7FEFF 		bl	ppp_trace
 384              		.loc 1 1304 0
 385 016a 0020     		mov	r0, #0
 386 016c 01B0     		add	sp, sp, #4
 387              		@ sp needed for prologue
 388              	.LVL54:
 389              	.LVL55:
 390 016e 30BC     		pop	{r4, r5}
 391 0170 02BC     		pop	{r1}
 392 0172 0847     		bx	r1
 393              	.L43:
 394              		.align	2
 395              	.L42:
 396 0174 00000000 		.word	pppControl
 397 0178 00000000 		.word	.LC6
 398              	.LFE312:
 400              		.section	.rodata.str1.4
 401 0036 0000     		.align	2
 402              	.LC9:
 403 0038 7070705F 		.ascii	"ppp_recv_config[%d]: inACCM=%X %X %X %X\012\000"
 403      72656376 
 403      5F636F6E 
 403      6669675B 
 403      25645D3A 
 404              		.text
 405              		.align	2
 406              		.global	ppp_recv_config
 407              		.code	16
 408              		.thumb_func
 410              	ppp_recv_config:
 411              	.LFB309:
 412              		.loc 1 1183 0
 413 017c F0B5     		push	{r4, r5, r6, r7, lr}
 414              	.LCFI5:
 415              	.LVL56:
 416 017e 83B0     		sub	sp, sp, #12
 417              	.LCFI6:
 418 0180 051C     		mov	r5, r0
 419              		.loc 1 1184 0
 420 0182 C300     		lsl	r3, r0, #3
 421              	.LVL57:
 422 0184 1B18     		add	r3, r3, r0
 423 0186 DB01     		lsl	r3, r3, #7
 424 0188 1B1A     		sub	r3, r3, r0
 425 018a 9B00     		lsl	r3, r3, #2
 426 018c 0E4C     		ldr	r4, .L46
 427 018e E418     		add	r4, r4, r3
 428              	.LVL58:
 429              		.loc 1 1193 0
 430 0190 3C23     		mov	r3, #60
 431 0192 9C46     		mov	ip, r3
 432 0194 E254     		strb	r2, [r4, r3]
 433 0196 130A     		lsr	r3, r2, #8
 434 0198 3D20     		mov	r0, #61
 435              	.LVL59:
 436 019a 2354     		strb	r3, [r4, r0]
 437 019c 130C     		lsr	r3, r2, #16
 438 019e 3E26     		mov	r6, #62
 439 01a0 A355     		strb	r3, [r4, r6]
 440 01a2 120E     		lsr	r2, r2, #24
 441              	.LVL60:
 442 01a4 3F23     		mov	r3, #63
 443 01a6 E254     		strb	r2, [r4, r3]
 444              		.loc 1 1195 0
 445 01a8 0849     		ldr	r1, .L46+4
 446              	.LVL61:
 447 01aa 6746     		mov	r7, ip
 448 01ac E35D     		ldrb	r3, [r4, r7]
 449 01ae 205C     		ldrb	r0, [r4, r0]
 450 01b0 0090     		str	r0, [sp]
 451 01b2 A05D     		ldrb	r0, [r4, r6]
 452 01b4 0190     		str	r0, [sp, #4]
 453 01b6 0292     		str	r2, [sp, #8]
 454 01b8 0520     		mov	r0, #5
 455 01ba 2A1C     		mov	r2, r5
 456 01bc FFF7FEFF 		bl	ppp_trace
 457              		.loc 1 1198 0
 458 01c0 03B0     		add	sp, sp, #12
 459              		@ sp needed for prologue
 460              	.LVL62:
 461              	.LVL63:
 462 01c2 F0BC     		pop	{r4, r5, r6, r7}
 463 01c4 01BC     		pop	{r0}
 464 01c6 0047     		bx	r0
 465              	.L47:
 466              		.align	2
 467              	.L46:
 468 01c8 00000000 		.word	pppControl
 469 01cc 38000000 		.word	.LC9
 470              	.LFE309:
 472              		.section	.rodata.str1.4
 473 0061 000000   		.align	2
 474              	.LC12:
 475 0064 7070705F 		.ascii	"ppp_send_config[%d]: outACCM=%X %X %X %X\012\000"
 475      73656E64 
 475      5F636F6E 
 475      6669675B 
 475      25645D3A 
 476              		.text
 477              		.align	2
 478              		.global	ppp_send_config
 479              		.code	16
 480              		.thumb_func
 482              	ppp_send_config:
 483              	.LFB307:
 484              		.loc 1 1143 0
 485 01d0 F0B5     		push	{r4, r5, r6, r7, lr}
 486              	.LCFI7:
 487              	.LVL64:
 488 01d2 83B0     		sub	sp, sp, #12
 489              	.LCFI8:
 490 01d4 061C     		mov	r6, r0
 491              		.loc 1 1144 0
 492 01d6 C000     		lsl	r0, r0, #3
 493              	.LVL65:
 494 01d8 8019     		add	r0, r0, r6
 495 01da C001     		lsl	r0, r0, #7
 496 01dc 801B     		sub	r0, r0, r6
 497 01de 8000     		lsl	r0, r0, #2
 498 01e0 0F4C     		ldr	r4, .L50
 499 01e2 2418     		add	r4, r4, r0
 500              	.LVL66:
 501              		.loc 1 1147 0
 502 01e4 E162     		str	r1, [r4, #44]
 503              		.loc 1 1148 0
 504 01e6 2363     		str	r3, [r4, #48]
 505              		.loc 1 1149 0
 506 01e8 089B     		ldr	r3, [sp, #32]
 507              	.LVL67:
 508 01ea 6363     		str	r3, [r4, #52]
 509              		.loc 1 1153 0
 510 01ec 5C27     		mov	r7, #92
 511 01ee E255     		strb	r2, [r4, r7]
 512 01f0 130A     		lsr	r3, r2, #8
 513 01f2 5D20     		mov	r0, #93
 514 01f4 2354     		strb	r3, [r4, r0]
 515 01f6 130C     		lsr	r3, r2, #16
 516 01f8 5E25     		mov	r5, #94
 517 01fa 6355     		strb	r3, [r4, r5]
 518 01fc 120E     		lsr	r2, r2, #24
 519              	.LVL68:
 520 01fe 5F23     		mov	r3, #95
 521 0200 E254     		strb	r2, [r4, r3]
 522              		.loc 1 1155 0
 523 0202 0849     		ldr	r1, .L50+4
 524              	.LVL69:
 525 0204 E35D     		ldrb	r3, [r4, r7]
 526 0206 205C     		ldrb	r0, [r4, r0]
 527 0208 0090     		str	r0, [sp]
 528 020a 605D     		ldrb	r0, [r4, r5]
 529 020c 0190     		str	r0, [sp, #4]
 530 020e 0292     		str	r2, [sp, #8]
 531 0210 0520     		mov	r0, #5
 532 0212 321C     		mov	r2, r6
 533 0214 FFF7FEFF 		bl	ppp_trace
 534              		.loc 1 1158 0
 535 0218 03B0     		add	sp, sp, #12
 536              		@ sp needed for prologue
 537              	.LVL70:
 538              	.LVL71:
 539 021a F0BC     		pop	{r4, r5, r6, r7}
 540 021c 01BC     		pop	{r0}
 541 021e 0047     		bx	r0
 542              	.L51:
 543              		.align	2
 544              	.L50:
 545 0220 00000000 		.word	pppControl
 546 0224 64000000 		.word	.LC12
 547              	.LFE307:
 549              		.section	.rodata.str1.4
 550 008e 0000     		.align	2
 551              	.LC15:
 552 0090 73696675 		.ascii	"sifup[%d]: bad parms\012\000"
 552      705B2564 
 552      5D3A2062 
 552      61642070 
 552      61726D73 
 553              		.text
 554              		.align	2
 555              		.global	sifaddr
 556              		.code	16
 557              		.thumb_func
 559              	sifaddr:
 560              	.LFB317:
1363:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1364:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1365:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * sifdown - Config the interface down and disable IP.
1366:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1367:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1368:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** sifdown(int pd)
1369:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1370:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1371:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int st = 1;
1372:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1373:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd < 0 || pd >= NUM_PPP || !pc->openFlag) {
1374:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     st = 0;
1375:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING, "sifdown[%d]: bad parms\n", pd));
1376:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
1377:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->if_up = 0;
1378:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     /* make sure the netif status callback is called */
1379:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     netif_set_down(&pc->netif);
1380:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     netif_remove(&pc->netif);
1381:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_DEBUG, "sifdown: unit %d: linkStatusCB=%lx errCode=%d\n", pd, pc->linkStatusCB, p
1382:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if(pc->linkStatusCB) {
1383:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pc->linkStatusCB(pc->linkStatusCtx, PPPERR_CONNECT, NULL);
1384:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
1385:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1386:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return st;
1387:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1388:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1389:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /**
1390:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * sifaddr - Config the interface IP addresses and netmask.
1391:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * @param pd Interface unit ???
1392:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * @param o Our IP address ???
1393:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * @param h His IP address ???
1394:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * @param m IP subnet mask ???
1395:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * @param ns1 Primary DNS
1396:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * @param ns2 Secondary DNS
1397:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1398:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1399:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** sifaddr( int pd, u32_t o, u32_t h, u32_t m, u32_t ns1, u32_t ns2)
1400:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 561              		.loc 1 1400 0
 562 0228 10B5     		push	{r4, lr}
 563              	.LCFI9:
 564              	.LVL72:
 565 022a 83B0     		sub	sp, sp, #12
 566              	.LCFI10:
 567 022c 041C     		mov	r4, r0
 568 022e 0291     		str	r1, [sp, #8]
 569 0230 0192     		str	r2, [sp, #4]
 570 0232 0093     		str	r3, [sp]
1401:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1402:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int st = 1;
1403:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1404:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd < 0 || pd >= NUM_PPP || !pc->openFlag) {
 571              		.loc 1 1404 0
 572 0234 0028     		cmp	r0, #0
 573 0236 03D1     		bne	.L53
 574              	.LVL73:
 575 0238 104B     		ldr	r3, .L57
 576 023a 1B78     		ldrb	r3, [r3]
 577 023c 002B     		cmp	r3, #0
 578 023e 06D1     		bne	.L54
 579              	.LVL74:
 580              	.L53:
1405:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     st = 0;
1406:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING, "sifup[%d]: bad parms\n", pd));
 581              		.loc 1 1406 0
 582 0240 0F49     		ldr	r1, .L57+4
 583 0242 0320     		mov	r0, #3
 584              	.LVL75:
 585 0244 221C     		mov	r2, r4
 586 0246 FFF7FEFF 		bl	ppp_trace
 587 024a 0020     		mov	r0, #0
 588              	.LVL76:
 589 024c 11E0     		b	.L55
 590              	.LVL77:
 591              	.L54:
1407:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
1408:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     SMEMCPY(&pc->addrs.our_ipaddr, &o, sizeof(o));
 592              		.loc 1 1408 0
 593 024e 0B49     		ldr	r1, .L57
 594 0250 8F23     		mov	r3, #143
 595 0252 5B01     		lsl	r3, r3, #5
 596 0254 029A     		ldr	r2, [sp, #8]
 597 0256 CA50     		str	r2, [r1, r3]
1409:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     SMEMCPY(&pc->addrs.his_ipaddr, &h, sizeof(h));
 598              		.loc 1 1409 0
 599 0258 019A     		ldr	r2, [sp, #4]
 600 025a 0A4B     		ldr	r3, .L57+8
 601 025c CA50     		str	r2, [r1, r3]
1410:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     SMEMCPY(&pc->addrs.netmask, &m, sizeof(m));
 602              		.loc 1 1410 0
 603 025e 009A     		ldr	r2, [sp]
 604 0260 0433     		add	r3, r3, #4
 605 0262 CA50     		str	r2, [r1, r3]
1411:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     SMEMCPY(&pc->addrs.dns1, &ns1, sizeof(ns1));
 606              		.loc 1 1411 0
 607 0264 059A     		ldr	r2, [sp, #20]
 608 0266 0433     		add	r3, r3, #4
 609 0268 CA50     		str	r2, [r1, r3]
1412:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     SMEMCPY(&pc->addrs.dns2, &ns2, sizeof(ns2));
 610              		.loc 1 1412 0
 611 026a 069A     		ldr	r2, [sp, #24]
 612 026c 0433     		add	r3, r3, #4
 613 026e CA50     		str	r2, [r1, r3]
 614 0270 0120     		mov	r0, #1
 615              	.LVL78:
 616              	.L55:
 617              	.LVL79:
1413:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1414:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return st;
1415:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 618              		.loc 1 1415 0
 619 0272 03B0     		add	sp, sp, #12
 620              		@ sp needed for prologue
 621              	.LVL80:
 622 0274 10BC     		pop	{r4}
 623 0276 02BC     		pop	{r1}
 624 0278 0847     		bx	r1
 625              	.L58:
 626 027a C046     		.align	2
 627              	.L57:
 628 027c 00000000 		.word	pppControl
 629 0280 90000000 		.word	.LC15
 630 0284 E4110000 		.word	4580
 631              	.LFE317:
 633              		.section	.rodata.str1.4
 634 00a6 0000     		.align	2
 635              	.LC18:
 636 00a8 7070705F 		.ascii	"ppp_set_xaccm[%d]: outACCM=%X %X %X %X\012\000"
 636      7365745F 
 636      78616363 
 636      6D5B2564 
 636      5D3A206F 
 637              		.text
 638              		.align	2
 639              		.global	ppp_set_xaccm
 640              		.code	16
 641              		.thumb_func
 643              	ppp_set_xaccm:
 644              	.LFB308:
 645              		.loc 1 1166 0
 646 0288 70B5     		push	{r4, r5, r6, lr}
 647              	.LCFI11:
 648              	.LVL81:
 649 028a 83B0     		sub	sp, sp, #12
 650              	.LCFI12:
 651 028c 061C     		mov	r6, r0
 652              		.loc 1 1167 0
 653 028e C400     		lsl	r4, r0, #3
 654 0290 2418     		add	r4, r4, r0
 655 0292 E401     		lsl	r4, r4, #7
 656 0294 241A     		sub	r4, r4, r0
 657 0296 A400     		lsl	r4, r4, #2
 658 0298 201C     		mov	r0, r4
 659              	.LVL82:
 660 029a 5C30     		add	r0, r0, #92
 661 029c 0E4D     		ldr	r5, .L61
 662 029e 2818     		add	r0, r5, r0
 663 02a0 2022     		mov	r2, #32
 664 02a2 FFF7FEFF 		bl	memcpy
 665              	.LVL83:
 666              		.loc 1 1168 0
 667 02a6 0D49     		ldr	r1, .L61+4
 668 02a8 2D19     		add	r5, r5, r4
 669 02aa 2B1C     		mov	r3, r5
 670 02ac 5C33     		add	r3, r3, #92
 671 02ae 1B78     		ldrb	r3, [r3]
 672 02b0 2A1C     		mov	r2, r5
 673 02b2 5D32     		add	r2, r2, #93
 674 02b4 1278     		ldrb	r2, [r2]
 675 02b6 0092     		str	r2, [sp]
 676 02b8 2A1C     		mov	r2, r5
 677 02ba 5E32     		add	r2, r2, #94
 678 02bc 1278     		ldrb	r2, [r2]
 679 02be 0192     		str	r2, [sp, #4]
 680 02c0 5F35     		add	r5, r5, #95
 681 02c2 2A78     		ldrb	r2, [r5]
 682 02c4 0292     		str	r2, [sp, #8]
 683 02c6 0520     		mov	r0, #5
 684 02c8 321C     		mov	r2, r6
 685 02ca FFF7FEFF 		bl	ppp_trace
 686              		.loc 1 1174 0
 687 02ce 03B0     		add	sp, sp, #12
 688              		@ sp needed for prologue
 689              	.LVL84:
 690 02d0 70BC     		pop	{r4, r5, r6}
 691 02d2 01BC     		pop	{r0}
 692 02d4 0047     		bx	r0
 693              	.L62:
 694 02d6 C046     		.align	2
 695              	.L61:
 696 02d8 00000000 		.word	pppControl
 697 02dc A8000000 		.word	.LC18
 698              	.LFE308:
 700              		.section	.rodata.str1.4
 701              		.align	2
 702              	.LC20:
 703 00d0 70707053 		.ascii	"pppSingleBuf: unable to alloc new buf (%d)\012\000"
 703      696E676C 
 703      65427566 
 703      3A20756E 
 703      61626C65 
 704              		.text
 705              		.align	2
 706              		.global	pppSingleBuf
 707              		.code	16
 708              		.thumb_func
 710              	pppSingleBuf:
 711              	.LFB322:
1416:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1417:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /**
1418:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * cifaddr - Clear the interface IP addresses, and delete routes
1419:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * through the interface if possible.
1420:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * @param pd Interface unit ???
1421:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * @param o Our IP address ???
1422:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * @param h IP broadcast address ???
1423:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1424:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1425:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** cifaddr( int pd, u32_t o, u32_t h)
1426:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1427:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1428:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int st = 1;
1429:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1430:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(o);
1431:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(h);
1432:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd < 0 || pd >= NUM_PPP || !pc->openFlag) {
1433:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     st = 0;
1434:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING, "sifup[%d]: bad parms\n", pd));
1435:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
1436:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     IP4_ADDR(&pc->addrs.our_ipaddr, 0,0,0,0);
1437:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     IP4_ADDR(&pc->addrs.his_ipaddr, 0,0,0,0);
1438:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     IP4_ADDR(&pc->addrs.netmask, 255,255,255,0);
1439:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     IP4_ADDR(&pc->addrs.dns1, 0,0,0,0);
1440:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     IP4_ADDR(&pc->addrs.dns2, 0,0,0,0);
1441:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1442:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return st;
1443:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1444:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1445:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1446:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * sifdefaultroute - assign a default route through the address given.
1447:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1448:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1449:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** sifdefaultroute(int pd, u32_t l, u32_t g)
1450:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1451:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1452:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int st = 1;
1453:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1454:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(l);
1455:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(g);
1456:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1457:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd < 0 || pd >= NUM_PPP || !pc->openFlag) {
1458:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     st = 0;
1459:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING, "sifup[%d]: bad parms\n", pd));
1460:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
1461:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     netif_set_default(&pc->netif);
1462:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1463:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1464:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /* TODO: check how PPP handled the netMask, previously not set by ipSetDefault */
1465:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1466:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return st;
1467:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1468:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1469:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1470:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * cifdefaultroute - delete a default route through the address given.
1471:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1472:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** int
1473:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** cifdefaultroute(int pd, u32_t l, u32_t g)
1474:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1475:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1476:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int st = 1;
1477:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1478:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(l);
1479:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LWIP_UNUSED_ARG(g);
1480:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1481:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pd < 0 || pd >= NUM_PPP || !pc->openFlag) {
1482:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     st = 0;
1483:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_WARNING, "sifup[%d]: bad parms\n", pd));
1484:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
1485:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     netif_set_default(NULL);
1486:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1487:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1488:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return st;
1489:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1490:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1491:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /**********************************/
1492:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*** LOCAL FUNCTION DEFINITIONS ***/
1493:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /**********************************/
1494:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1495:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
1496:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /* The main PPP process function.  This implements the state machine according
1497:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * to section 4 of RFC 1661: The Point-To-Point Protocol. */
1498:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void
1499:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppMain(void *arg)
1500:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1501:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pd = (int)arg;
1502:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *p;
1503:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl* pc;
1504:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int c;
1505:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1506:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc = &pppControl[pd];
1507:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1508:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   p = pbuf_alloc(PBUF_RAW, PPP_MRU+PPP_HDRLEN, PBUF_RAM);
1509:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (!p) {
1510:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LWIP_ASSERT("p != NULL", p);
1511:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->errCode = PPPERR_ALLOC;
1512:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     goto out;
1513:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1514:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1515:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /*
1516:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * Start the connection and handle incoming events (packet or timeout).
1517:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    */
1518:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_INFO, "pppMain: unit %d: Connecting\n", pd));
1519:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   tcpip_callback(pppStartCB, arg);
1520:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   dbgStackFreeSize("\n\rpppMain Task");
1521:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   while (lcp_phase[pd] != PHASE_DEAD) {
1522:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if (pc->kill_link) {
1523:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_DEBUG, "pppMain: unit %d kill_link -> pppStopCB\n", pd));
1524:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pc->errCode = PPPERR_USER;
1525:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* This will leave us at PHASE_DEAD. */
1526:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       tcpip_callback(pppStopCB, arg);
1527:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pc->kill_link = 0;
1528:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     } else if (pc->sig_hup) {
1529:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_DEBUG, "pppMain: unit %d sig_hup -> pppHupCB\n", pd));
1530:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pc->sig_hup = 0;
1531:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       tcpip_callback(pppHupCB, arg);
1532:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     } else {
1533:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       c = sio_read(pc->fd, p->payload, p->len);
1534:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if(c > 0) {
1535:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         pppInProc(pd, p->payload, c);
1536:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       } else {
1537:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         /* nothing received, give other tasks a chance to run */
1538:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         sys_msleep(1);
1539:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1540:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
1541:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1542:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_INFO, "pppMain: unit %d: PHASE_DEAD\n", pd));
1543:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pppDrop(pc); /* bug fix #17726 */
1544:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pbuf_free(p);
1545:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1546:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** out:
1547:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_DEBUG, "pppMain: unit %d: linkStatusCB=%lx errCode=%d\n", pd, pc->linkStatusCB, pc-
1548:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pc->linkStatusCB) {
1549:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->linkStatusCB(pc->linkStatusCtx, pc->errCode ? pc->errCode : PPPERR_PROTOCOL, NULL);
1550:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1551:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1552:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->openFlag = 0;
1553:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   sys_thread_suicid();
1554:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1555:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT */
1556:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1557:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOE_SUPPORT
1558:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1559:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** void
1560:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppOverEthernetInitFailed(void* arg)
1561:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1562:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl* pc;
1563:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pd = (int)arg;
1564:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1565:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pppHupCB(arg);
1566:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pppStopCB(arg);
1567:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1568:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc = &pppControl[pd];
1569:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pppoe_destroy(&pc->netif);
1570:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pc->openFlag = 0;
1571:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1572:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pc->linkStatusCB) {
1573:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->linkStatusCB(pc->linkStatusCtx, pc->errCode ? pc->errCode : PPPERR_PROTOCOL, NULL);
1574:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1575:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1576:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1577:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void
1578:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppOverEthernetLinkStatusCB(int pd, int up)
1579:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1580:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(up) {
1581:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_INFO, "pppMain: unit %d: Connecting\n", pd));
1582:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tcpip_callback(pppStartCB, (void*)pd);
1583:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   } else {
1584:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPControl* pc;
1585:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc = &pppControl[pd];
1586:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     tcpip_callback(pppOverEthernetInitFailed, (void*)pd);
1587:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1588:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
1589:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOE_SUPPORT */
1590:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1591:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** struct pbuf *
1592:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppSingleBuf(struct pbuf *p)
1593:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 712              		.loc 1 1593 0
 713 02e0 F0B5     		push	{r4, r5, r6, r7, lr}
 714              	.LCFI13:
 715              	.LVL85:
 716 02e2 061C     		mov	r6, r0
1594:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *q, *b;
1595:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_char *pl;
1596:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1597:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(p->tot_len == p->len) {
 717              		.loc 1 1597 0
 718 02e4 0189     		ldrh	r1, [r0, #8]
 719 02e6 4389     		ldrh	r3, [r0, #10]
 720 02e8 8B42     		cmp	r3, r1
 721 02ea 1FD0     		beq	.L64
1598:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return p;
1599:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1600:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1601:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 722              		.loc 1 1601 0
 723 02ec 0320     		mov	r0, #3
 724              	.LVL86:
 725 02ee 0022     		mov	r2, #0
 726 02f0 FFF7FEFF 		bl	pbuf_alloc
 727 02f4 071C     		mov	r7, r0
 728              	.LVL87:
1602:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(!q) {
 729              		.loc 1 1602 0
 730 02f6 0028     		cmp	r0, #0
 731 02f8 05D1     		bne	.L65
 732              	.LVL88:
1603:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_ERR,
 733              		.loc 1 1603 0
 734 02fa 0E49     		ldr	r1, .L70
 735 02fc 3289     		ldrh	r2, [r6, #8]
 736 02fe 0120     		mov	r0, #1
 737              	.LVL89:
 738 0300 FFF7FEFF 		bl	ppp_trace
 739 0304 12E0     		b	.L64
 740              	.LVL90:
 741              	.L65:
1604:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              "pppSingleBuf: unable to alloc new buf (%d)\n", p->tot_len));
1605:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     return p; /* live dangerously */
1606:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1607:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1608:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   for(b = p, pl = q->payload; b != NULL; b = b->next) {
 742              		.loc 1 1608 0
 743 0306 4068     		ldr	r0, [r0, #4]
 744              	.LVL91:
 745 0308 002E     		cmp	r6, #0
 746 030a 0BD0     		beq	.L66
 747 030c 051C     		mov	r5, r0
 748              	.LVL92:
 749 030e 341C     		mov	r4, r6
 750              	.LVL93:
 751              	.L67:
1609:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     MEMCPY(pl, b->payload, b->len);
 752              		.loc 1 1609 0
 753 0310 6289     		ldrh	r2, [r4, #10]
 754 0312 6168     		ldr	r1, [r4, #4]
 755 0314 281C     		mov	r0, r5
 756 0316 FFF7FEFF 		bl	memcpy
1610:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pl += b->len;
 757              		.loc 1 1610 0
 758 031a 6389     		ldrh	r3, [r4, #10]
 759 031c ED18     		add	r5, r5, r3
 760              		.loc 1 1608 0
 761 031e 2468     		ldr	r4, [r4]
 762 0320 002C     		cmp	r4, #0
 763 0322 F5D1     		bne	.L67
 764              	.L66:
1611:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1612:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1613:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pbuf_free(p);
 765              		.loc 1 1613 0
 766 0324 301C     		mov	r0, r6
 767 0326 FFF7FEFF 		bl	pbuf_free
 768 032a 3E1C     		mov	r6, r7
 769              	.LVL94:
 770              	.L64:
1614:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1615:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return q;
1616:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 771              		.loc 1 1616 0
 772 032c 301C     		mov	r0, r6
 773              		@ sp needed for prologue
 774              	.LVL95:
 775              	.LVL96:
 776              	.LVL97:
 777              	.LVL98:
 778 032e F0BC     		pop	{r4, r5, r6, r7}
 779 0330 02BC     		pop	{r1}
 780 0332 0847     		bx	r1
 781              	.L71:
 782              		.align	2
 783              	.L70:
 784 0334 D0000000 		.word	.LC20
 785              	.LFE322:
 787              		.align	2
 788              		.global	cifdefaultroute
 789              		.code	16
 790              		.thumb_func
 792              	cifdefaultroute:
 793              	.LFB320:
 794              		.loc 1 1474 0
 795 0338 00B5     		push	{lr}
 796              	.LCFI14:
 797              	.LVL99:
 798 033a 021C     		mov	r2, r0
 799              	.LVL100:
 800              		.loc 1 1481 0
 801 033c 0028     		cmp	r0, #0
 802 033e 03D1     		bne	.L73
 803 0340 074B     		ldr	r3, .L77
 804 0342 1B78     		ldrb	r3, [r3]
 805 0344 002B     		cmp	r3, #0
 806 0346 05D1     		bne	.L74
 807              	.L73:
 808              		.loc 1 1483 0
 809 0348 0649     		ldr	r1, .L77+4
 810              	.LVL101:
 811 034a 0320     		mov	r0, #3
 812              	.LVL102:
 813 034c FFF7FEFF 		bl	ppp_trace
 814              	.LVL103:
 815 0350 0020     		mov	r0, #0
 816              	.LVL104:
 817 0352 03E0     		b	.L75
 818              	.LVL105:
 819              	.L74:
 820              		.loc 1 1485 0
 821 0354 0020     		mov	r0, #0
 822              	.LVL106:
 823 0356 FFF7FEFF 		bl	netif_set_default
 824              	.LVL107:
 825 035a 0120     		mov	r0, #1
 826              	.LVL108:
 827              	.L75:
 828              	.LVL109:
 829              		.loc 1 1489 0
 830              		@ sp needed for prologue
 831 035c 02BC     		pop	{r1}
 832 035e 0847     		bx	r1
 833              	.L78:
 834              		.align	2
 835              	.L77:
 836 0360 00000000 		.word	pppControl
 837 0364 90000000 		.word	.LC15
 838              	.LFE320:
 840              		.align	2
 841              		.global	sifdefaultroute
 842              		.code	16
 843              		.thumb_func
 845              	sifdefaultroute:
 846              	.LFB319:
 847              		.loc 1 1450 0
 848 0368 00B5     		push	{lr}
 849              	.LCFI15:
 850              	.LVL110:
 851 036a 021C     		mov	r2, r0
 852              	.LVL111:
 853              		.loc 1 1457 0
 854 036c 0028     		cmp	r0, #0
 855 036e 03D1     		bne	.L80
 856 0370 074B     		ldr	r3, .L84
 857 0372 1B78     		ldrb	r3, [r3]
 858 0374 002B     		cmp	r3, #0
 859 0376 05D1     		bne	.L81
 860              	.L80:
 861              		.loc 1 1459 0
 862 0378 0649     		ldr	r1, .L84+4
 863              	.LVL112:
 864 037a 0320     		mov	r0, #3
 865              	.LVL113:
 866 037c FFF7FEFF 		bl	ppp_trace
 867              	.LVL114:
 868 0380 0020     		mov	r0, #0
 869              	.LVL115:
 870 0382 03E0     		b	.L82
 871              	.LVL116:
 872              	.L81:
 873              		.loc 1 1461 0
 874 0384 0448     		ldr	r0, .L84+8
 875              	.LVL117:
 876 0386 FFF7FEFF 		bl	netif_set_default
 877              	.LVL118:
 878 038a 0120     		mov	r0, #1
 879              	.LVL119:
 880              	.L82:
 881              	.LVL120:
 882              		.loc 1 1467 0
 883              		@ sp needed for prologue
 884 038c 02BC     		pop	{r1}
 885 038e 0847     		bx	r1
 886              	.L85:
 887              		.align	2
 888              	.L84:
 889 0390 00000000 		.word	pppControl
 890 0394 90000000 		.word	.LC15
 891 0398 AC110000 		.word	pppControl+4524
 892              	.LFE319:
 894              		.align	2
 895              		.global	cifaddr
 896              		.code	16
 897              		.thumb_func
 899              	cifaddr:
 900              	.LFB318:
 901              		.loc 1 1426 0
 902 039c 10B5     		push	{r4, lr}
 903              	.LCFI16:
 904              	.LVL121:
 905 039e 021C     		mov	r2, r0
 906              	.LVL122:
 907              		.loc 1 1432 0
 908 03a0 0028     		cmp	r0, #0
 909 03a2 03D1     		bne	.L87
 910 03a4 144B     		ldr	r3, .L91
 911 03a6 1B78     		ldrb	r3, [r3]
 912 03a8 002B     		cmp	r3, #0
 913 03aa 05D1     		bne	.L88
 914              	.L87:
 915              		.loc 1 1434 0
 916 03ac 1349     		ldr	r1, .L91+4
 917              	.LVL123:
 918 03ae 0320     		mov	r0, #3
 919              	.LVL124:
 920 03b0 FFF7FEFF 		bl	ppp_trace
 921              	.LVL125:
 922 03b4 0020     		mov	r0, #0
 923              	.LVL126:
 924 03b6 1BE0     		b	.L89
 925              	.LVL127:
 926              	.L88:
 927              		.loc 1 1436 0
 928 03b8 0020     		mov	r0, #0
 929              	.LVL128:
 930 03ba FFF7FEFF 		bl	htonl
 931              	.LVL129:
 932 03be 0E4C     		ldr	r4, .L91
 933 03c0 8F23     		mov	r3, #143
 934 03c2 5B01     		lsl	r3, r3, #5
 935 03c4 E050     		str	r0, [r4, r3]
 936              		.loc 1 1437 0
 937 03c6 0020     		mov	r0, #0
 938 03c8 FFF7FEFF 		bl	htonl
 939 03cc 0C4B     		ldr	r3, .L91+8
 940 03ce E050     		str	r0, [r4, r3]
 941              		.loc 1 1438 0
 942 03d0 0C48     		ldr	r0, .L91+12
 943 03d2 FFF7FEFF 		bl	htonl
 944 03d6 0C4B     		ldr	r3, .L91+16
 945 03d8 E050     		str	r0, [r4, r3]
 946              		.loc 1 1439 0
 947 03da 0020     		mov	r0, #0
 948 03dc FFF7FEFF 		bl	htonl
 949 03e0 0A4B     		ldr	r3, .L91+20
 950 03e2 E050     		str	r0, [r4, r3]
 951              		.loc 1 1440 0
 952 03e4 0020     		mov	r0, #0
 953 03e6 FFF7FEFF 		bl	htonl
 954 03ea 094B     		ldr	r3, .L91+24
 955 03ec E050     		str	r0, [r4, r3]
 956 03ee 0120     		mov	r0, #1
 957              	.LVL130:
 958              	.L89:
 959              	.LVL131:
 960              		.loc 1 1443 0
 961              		@ sp needed for prologue
 962 03f0 10BC     		pop	{r4}
 963 03f2 02BC     		pop	{r1}
 964 03f4 0847     		bx	r1
 965              	.L92:
 966 03f6 C046     		.align	2
 967              	.L91:
 968 03f8 00000000 		.word	pppControl
 969 03fc 90000000 		.word	.LC15
 970 0400 E4110000 		.word	4580
 971 0404 00FFFFFF 		.word	-256
 972 0408 E8110000 		.word	4584
 973 040c EC110000 		.word	4588
 974 0410 F0110000 		.word	4592
 975              	.LFE318:
 977              		.align	2
 978              		.global	GetMask
 979              		.code	16
 980              		.thumb_func
 982              	GetMask:
 983              	.LFB311:
 984              		.loc 1 1259 0
 985 0414 10B5     		push	{r4, lr}
 986              	.LCFI17:
 987              	.LVL132:
 988 0416 041C     		mov	r4, r0
 989              		.loc 1 1262 0
 990 0418 FFF7FEFF 		bl	htonl
 991              	.LVL133:
 992              		.loc 1 1263 0
 993 041c 002C     		cmp	r4, #0
 994 041e 02DB     		blt	.L94
 995 0420 FF20     		mov	r0, #255
 996              	.LVL134:
 997 0422 0006     		lsl	r0, r0, #24
 998 0424 0AE0     		b	.L95
 999              	.LVL135:
 1000              	.L94:
 1001              		.loc 1 1265 0
 1002 0426 C023     		mov	r3, #192
 1003 0428 1B06     		lsl	r3, r3, #24
 1004 042a 221C     		mov	r2, r4
 1005 042c 1A40     		and	r2, r2, r3
 1006 042e 8023     		mov	r3, #128
 1007 0430 1B06     		lsl	r3, r3, #24
 1008 0432 9A42     		cmp	r2, r3
 1009 0434 01D0     		beq	.L96
 1010 0436 0548     		ldr	r0, .L98
 1011              	.LVL136:
 1012 0438 00E0     		b	.L95
 1013              	.LVL137:
 1014              	.L96:
 1015 043a 0548     		ldr	r0, .L98+4
 1016              	.LVL138:
 1017              	.L95:
 1018              		.loc 1 1272 0
 1019 043c FFF7FEFF 		bl	htonl
 1020              	.LVL139:
 1021 0440 044B     		ldr	r3, .L98+8
 1022 0442 1B68     		ldr	r3, [r3]
 1023 0444 1843     		orr	r0, r0, r3
 1024              		.loc 1 1280 0
 1025              		@ sp needed for prologue
 1026              	.LVL140:
 1027 0446 10BC     		pop	{r4}
 1028 0448 02BC     		pop	{r1}
 1029 044a 0847     		bx	r1
 1030              	.L99:
 1031              		.align	2
 1032              	.L98:
 1033 044c 00FFFFFF 		.word	-256
 1034 0450 0000FFFF 		.word	-65536
 1035 0454 00000000 		.word	subnetMask
 1036              	.LFE311:
 1038              		.section	.rodata.str1.4
 1039              		.align	2
 1040              	.LC31:
 1041 00fc 73696664 		.ascii	"sifdown[%d]: bad parms\012\000"
 1041      6F776E5B 
 1041      25645D3A 
 1041      20626164 
 1041      20706172 
 1042              		.align	2
 1043              	.LC34:
 1044 0114 73696664 		.ascii	"sifdown: unit %d: linkStatusCB=%lx errCode=%d\012\000"
 1044      6F776E3A 
 1044      20756E69 
 1044      74202564 
 1044      3A206C69 
 1045              		.text
 1046              		.align	2
 1047              		.global	sifdown
 1048              		.code	16
 1049              		.thumb_func
 1051              	sifdown:
 1052              	.LFB316:
 1053              		.loc 1 1369 0
 1054 0458 30B5     		push	{r4, r5, lr}
 1055              	.LCFI18:
 1056              	.LVL141:
 1057 045a 81B0     		sub	sp, sp, #4
 1058              	.LCFI19:
 1059 045c 021C     		mov	r2, r0
 1060              		.loc 1 1373 0
 1061 045e 0028     		cmp	r0, #0
 1062 0460 03D1     		bne	.L101
 1063 0462 184B     		ldr	r3, .L106
 1064 0464 1B78     		ldrb	r3, [r3]
 1065 0466 002B     		cmp	r3, #0
 1066 0468 05D1     		bne	.L102
 1067              	.L101:
 1068              		.loc 1 1375 0
 1069 046a 1749     		ldr	r1, .L106+4
 1070 046c 0320     		mov	r0, #3
 1071              	.LVL142:
 1072 046e FFF7FEFF 		bl	ppp_trace
 1073              	.LVL143:
 1074 0472 0020     		mov	r0, #0
 1075              	.LVL144:
 1076 0474 21E0     		b	.L103
 1077              	.LVL145:
 1078              	.L102:
 1079              		.loc 1 1377 0
 1080 0476 134D     		ldr	r5, .L106
 1081 0478 0023     		mov	r3, #0
 1082 047a 6B60     		str	r3, [r5, #4]
 1083              		.loc 1 1379 0
 1084 047c 134B     		ldr	r3, .L106+8
 1085 047e EC18     		add	r4, r5, r3
 1086 0480 201C     		mov	r0, r4
 1087              	.LVL146:
 1088 0482 FFF7FEFF 		bl	netif_set_down
 1089              	.LVL147:
 1090              		.loc 1 1380 0
 1091 0486 201C     		mov	r0, r4
 1092 0488 FFF7FEFF 		bl	netif_remove
 1093              		.loc 1 1381 0
 1094 048c 1049     		ldr	r1, .L106+12
 1095 048e 114C     		ldr	r4, .L106+16
 1096 0490 2B59     		ldr	r3, [r5, r4]
 1097 0492 AA68     		ldr	r2, [r5, #8]
 1098 0494 0092     		str	r2, [sp]
 1099 0496 0720     		mov	r0, #7
 1100 0498 0022     		mov	r2, #0
 1101 049a FFF7FEFF 		bl	ppp_trace
 1102              		.loc 1 1382 0
 1103 049e 2C59     		ldr	r4, [r5, r4]
 1104 04a0 002C     		cmp	r4, #0
 1105 04a2 01D1     		bne	.L104
 1106 04a4 0120     		mov	r0, #1
 1107              	.LVL148:
 1108 04a6 08E0     		b	.L103
 1109              	.LVL149:
 1110              	.L104:
 1111              		.loc 1 1383 0
 1112 04a8 064A     		ldr	r2, .L106
 1113 04aa 0B4B     		ldr	r3, .L106+20
 1114 04ac D058     		ldr	r0, [r2, r3]
 1115 04ae 0621     		mov	r1, #6
 1116 04b0 4942     		neg	r1, r1
 1117 04b2 0022     		mov	r2, #0
 1118 04b4 00F07EFF 		bl	.L108
 1119 04b8 0120     		mov	r0, #1
 1120              	.LVL150:
 1121              	.L103:
 1122              	.LVL151:
 1123              		.loc 1 1387 0
 1124 04ba 01B0     		add	sp, sp, #4
 1125              		@ sp needed for prologue
 1126 04bc 30BC     		pop	{r4, r5}
 1127 04be 02BC     		pop	{r1}
 1128 04c0 0847     		bx	r1
 1129              	.L107:
 1130 04c2 C046     		.align	2
 1131              	.L106:
 1132 04c4 00000000 		.word	pppControl
 1133 04c8 FC000000 		.word	.LC31
 1134 04cc AC110000 		.word	4524
 1135 04d0 14010000 		.word	.LC34
 1136 04d4 F4110000 		.word	4596
 1137 04d8 F8110000 		.word	4600
 1138              	.LFE316:
 1140              		.section	.rodata.str1.4
 1141 0143 00       		.align	2
 1142              	.LC44:
 1143 0144 73696675 		.ascii	"sifup: unit %d: linkStatusCB=%lx errCode=%d\012\000"
 1143      703A2075 
 1143      6E697420 
 1143      25643A20 
 1143      6C696E6B 
 1144 0171 000000   		.align	2
 1145              	.LC46:
 1146 0174 73696675 		.ascii	"sifup[%d]: netif_add failed\012\000"
 1146      705B2564 
 1146      5D3A206E 
 1146      65746966 
 1146      5F616464 
 1147              		.text
 1148              		.align	2
 1149              		.global	sifup
 1150              		.code	16
 1151              		.thumb_func
 1153              	sifup:
 1154              	.LFB314:
 1155              		.loc 1 1325 0
 1156 04dc 30B5     		push	{r4, r5, lr}
 1157              	.LCFI20:
 1158              	.LVL152:
 1159 04de 83B0     		sub	sp, sp, #12
 1160              	.LCFI21:
 1161 04e0 021C     		mov	r2, r0
 1162              		.loc 1 1329 0
 1163 04e2 0028     		cmp	r0, #0
 1164 04e4 03D1     		bne	.L110
 1165 04e6 244B     		ldr	r3, .L116
 1166 04e8 1B78     		ldrb	r3, [r3]
 1167 04ea 002B     		cmp	r3, #0
 1168 04ec 05D1     		bne	.L111
 1169              	.L110:
 1170              		.loc 1 1331 0
 1171 04ee 2349     		ldr	r1, .L116+4
 1172 04f0 0320     		mov	r0, #3
 1173              	.LVL153:
 1174 04f2 FFF7FEFF 		bl	ppp_trace
 1175              	.LVL154:
 1176 04f6 0020     		mov	r0, #0
 1177              	.LVL155:
 1178 04f8 3AE0     		b	.L112
 1179              	.LVL156:
 1180              	.L111:
 1181              		.loc 1 1333 0
 1182 04fa 214C     		ldr	r4, .L116+8
 1183 04fc 201C     		mov	r0, r4
 1184              	.LVL157:
 1185 04fe FFF7FEFF 		bl	netif_remove
 1186              	.LVL158:
 1187              		.loc 1 1334 0
 1188 0502 211C     		mov	r1, r4
 1189 0504 3431     		add	r1, r1, #52
 1190 0506 221C     		mov	r2, r4
 1191 0508 3C32     		add	r2, r2, #60
 1192 050a 231C     		mov	r3, r4
 1193 050c 3833     		add	r3, r3, #56
 1194 050e 0020     		mov	r0, #0
 1195 0510 0090     		str	r0, [sp]
 1196 0512 1C48     		ldr	r0, .L116+12
 1197 0514 0190     		str	r0, [sp, #4]
 1198 0516 1C48     		ldr	r0, .L116+16
 1199 0518 0290     		str	r0, [sp, #8]
 1200 051a 201C     		mov	r0, r4
 1201 051c FFF7FEFF 		bl	netif_add
 1202 0520 0028     		cmp	r0, #0
 1203 0522 1FD0     		beq	.L113
 1204              		.loc 1 1335 0
 1205 0524 164C     		ldr	r4, .L116+8
 1206 0526 201C     		mov	r0, r4
 1207 0528 FFF7FEFF 		bl	netif_set_up
 1208              		.loc 1 1336 0
 1209 052c 174B     		ldr	r3, .L116+20
 1210 052e E418     		add	r4, r4, r3
 1211 0530 0123     		mov	r3, #1
 1212 0532 6360     		str	r3, [r4, #4]
 1213              		.loc 1 1337 0
 1214 0534 0022     		mov	r2, #0
 1215 0536 A260     		str	r2, [r4, #8]
 1216              		.loc 1 1339 0
 1217 0538 1549     		ldr	r1, .L116+24
 1218 053a 164D     		ldr	r5, .L116+28
 1219 053c 6359     		ldr	r3, [r4, r5]
 1220 053e 0092     		str	r2, [sp]
 1221 0540 0720     		mov	r0, #7
 1222 0542 FFF7FEFF 		bl	ppp_trace
 1223              		.loc 1 1340 0
 1224 0546 6459     		ldr	r4, [r4, r5]
 1225 0548 002C     		cmp	r4, #0
 1226 054a 01D1     		bne	.L114
 1227 054c 0120     		mov	r0, #1
 1228              	.LVL159:
 1229 054e 0FE0     		b	.L112
 1230              	.LVL160:
 1231              	.L114:
 1232              		.loc 1 1341 0
 1233 0550 094A     		ldr	r2, .L116
 1234 0552 114B     		ldr	r3, .L116+32
 1235 0554 D058     		ldr	r0, [r2, r3]
 1236 0556 9168     		ldr	r1, [r2, #8]
 1237 0558 183B     		sub	r3, r3, #24
 1238 055a D218     		add	r2, r2, r3
 1239 055c 00F02AFF 		bl	.L108
 1240 0560 0120     		mov	r0, #1
 1241              	.LVL161:
 1242 0562 05E0     		b	.L112
 1243              	.LVL162:
 1244              	.L113:
 1245              		.loc 1 1345 0
 1246 0564 0D49     		ldr	r1, .L116+36
 1247 0566 0120     		mov	r0, #1
 1248 0568 0022     		mov	r2, #0
 1249 056a FFF7FEFF 		bl	ppp_trace
 1250 056e 0020     		mov	r0, #0
 1251              	.LVL163:
 1252              	.L112:
 1253              	.LVL164:
 1254              		.loc 1 1350 0
 1255 0570 03B0     		add	sp, sp, #12
 1256              		@ sp needed for prologue
 1257 0572 30BC     		pop	{r4, r5}
 1258 0574 02BC     		pop	{r1}
 1259 0576 0847     		bx	r1
 1260              	.L117:
 1261              		.align	2
 1262              	.L116:
 1263 0578 00000000 		.word	pppControl
 1264 057c 90000000 		.word	.LC15
 1265 0580 AC110000 		.word	pppControl+4524
 1266 0584 00000000 		.word	pppifNetifInit
 1267 0588 00000000 		.word	ip_input
 1268 058c 54EEFFFF 		.word	-4524
 1269 0590 44010000 		.word	.LC44
 1270 0594 F4110000 		.word	4596
 1271 0598 F8110000 		.word	4600
 1272 059c 74010000 		.word	.LC46
 1273              	.LFE314:
 1275              		.section	.rodata.str1.4
 1276 0191 000000   		.align	2
 1277              	.LC48:
 1278 0194 50505020 		.ascii	"PPP nPut: incomplete sio_write(%d,, %u) = %d\012\000"
 1278      6E507574 
 1278      3A20696E 
 1278      636F6D70 
 1278      6C657465 
 1279              		.text
 1280              		.align	2
 1281              		.code	16
 1282              		.thumb_func
 1284              	nPut:
 1285              	.LFB301:
 1286              		.loc 1 718 0
 1287 05a0 70B5     		push	{r4, r5, r6, lr}
 1288              	.LCFI22:
 1289              	.LVL165:
 1290 05a2 81B0     		sub	sp, sp, #4
 1291              	.LCFI23:
 1292 05a4 051C     		mov	r5, r0
 1293 05a6 0E1C     		mov	r6, r1
 1294              		.loc 1 722 0
 1295 05a8 0029     		cmp	r1, #0
 1296 05aa 18D0     		beq	.L119
 1297              	.LVL166:
 1298 05ac 0C1C     		mov	r4, r1
 1299              	.LVL167:
 1300              	.L121:
 1301              		.loc 1 723 0
 1302 05ae E868     		ldr	r0, [r5, #12]
 1303              	.LVL168:
 1304 05b0 6168     		ldr	r1, [r4, #4]
 1305 05b2 6289     		ldrh	r2, [r4, #10]
 1306 05b4 FFF7FEFF 		bl	sio_write
 1307 05b8 6389     		ldrh	r3, [r4, #10]
 1308 05ba 9842     		cmp	r0, r3
 1309 05bc 0CD0     		beq	.L120
 1310              	.LVL169:
 1311              		.loc 1 724 0
 1312 05be 0D49     		ldr	r1, .L124
 1313 05c0 EA68     		ldr	r2, [r5, #12]
 1314 05c2 0090     		str	r0, [sp]
 1315 05c4 0320     		mov	r0, #3
 1316              	.LVL170:
 1317 05c6 FFF7FEFF 		bl	ppp_trace
 1318              		.loc 1 726 0
 1319 05ca 0B4A     		ldr	r2, .L124+4
 1320 05cc 938A     		ldrh	r3, [r2, #20]
 1321 05ce 0133     		add	r3, r3, #1
 1322 05d0 9382     		strh	r3, [r2, #20]
 1323              		.loc 1 727 0
 1324 05d2 0023     		mov	r3, #0
 1325 05d4 AB63     		str	r3, [r5, #56]
 1326 05d6 02E0     		b	.L119
 1327              	.LVL171:
 1328              	.L120:
 1329              		.loc 1 722 0
 1330 05d8 2468     		ldr	r4, [r4]
 1331 05da 002C     		cmp	r4, #0
 1332 05dc E7D1     		bne	.L121
 1333              	.LVL172:
 1334              	.L119:
 1335              		.loc 1 732 0
 1336 05de 301C     		mov	r0, r6
 1337              	.LVL173:
 1338 05e0 FFF7FEFF 		bl	pbuf_free
 1339              		.loc 1 733 0
 1340 05e4 044A     		ldr	r2, .L124+4
 1341 05e6 1388     		ldrh	r3, [r2]
 1342 05e8 0133     		add	r3, r3, #1
 1343 05ea 1380     		strh	r3, [r2]
 1344              		.loc 1 734 0
 1345 05ec 01B0     		add	sp, sp, #4
 1346              		@ sp needed for prologue
 1347              	.LVL174:
 1348              	.LVL175:
 1349              	.LVL176:
 1350 05ee 70BC     		pop	{r4, r5, r6}
 1351 05f0 01BC     		pop	{r0}
 1352 05f2 0047     		bx	r0
 1353              	.L125:
 1354              		.align	2
 1355              	.L124:
 1356 05f4 94010000 		.word	.LC48
 1357 05f8 00000000 		.word	lwip_stats
 1358              	.LFE301:
 1360              		.section	.rodata.str1.4
 1361 01c2 0000     		.align	2
 1362              	.LC54:
 1363 01c4 70707069 		.ascii	"pppifOutput[%d]: bad parms prot=%d pb=%p\012\000"
 1363      664F7574 
 1363      7075745B 
 1363      25645D3A 
 1363      20626164 
 1364 01ee 0000     		.align	2
 1365              	.LC58:
 1366 01f0 70707069 		.ascii	"pppifOutput[%d]: link not up\012\000"
 1366      664F7574 
 1366      7075745B 
 1366      25645D3A 
 1366      206C696E 
 1367 020e 0000     		.align	2
 1368              	.LC60:
 1369 0210 70707069 		.ascii	"pppifOutput[%d]: first alloc fail\012\000"
 1369      664F7574 
 1369      7075745B 
 1369      25645D3A 
 1369      20666972 
 1370 0233 00       		.align	2
 1371              	.LC63:
 1372 0234 70707069 		.ascii	"pppifOutput[%d]: bad IP packet\012\000"
 1372      664F7574 
 1372      7075745B 
 1372      25645D3A 
 1372      20626164 
 1373              		.align	2
 1374              	.LC67:
 1375 0254 70707069 		.ascii	"pppifOutput[%d]: Alloc err - dropping proto=%d\012\000"
 1375      664F7574 
 1375      7075745B 
 1375      25645D3A 
 1375      20416C6C 
 1376              		.align	2
 1377              	.LC69:
 1378 0284 70707069 		.ascii	"pppifOutput[%d]: proto=0x%04X\012\000"
 1378      664F7574 
 1378      7075745B 
 1378      25645D3A 
 1378      2070726F 
 1379              		.text
 1380              		.align	2
 1381              		.code	16
 1382              		.thumb_func
 1384              	pppifOutput:
 1385              	.LFB303:
 1386              		.loc 1 814 0
 1387 05fc F0B5     		push	{r4, r5, r6, r7, lr}
 1388              	.LCFI24:
 1389 05fe 5F46     		mov	r7, fp
 1390 0600 5646     		mov	r6, sl
 1391 0602 4D46     		mov	r5, r9
 1392 0604 4446     		mov	r4, r8
 1393 0606 F0B4     		push	{r4, r5, r6, r7}
 1394              	.LCFI25:
 1395              	.LVL177:
 1396 0608 83B0     		sub	sp, sp, #12
 1397              	.LCFI26:
 1398 060a 0F1C     		mov	r7, r1
 1399              		.loc 1 815 0
 1400 060c C269     		ldr	r2, [r0, #28]
 1401              	.LVL178:
 1402              		.loc 1 829 0
 1403 060e 002A     		cmp	r2, #0
 1404 0610 05D1     		bne	.L127
 1405              	.LVL179:
 1406 0612 8B4B     		ldr	r3, .L154
 1407 0614 1B78     		ldrb	r3, [r3]
 1408 0616 002B     		cmp	r3, #0
 1409 0618 01D0     		beq	.L127
 1410 061a 0029     		cmp	r1, #0
 1411 061c 0ED1     		bne	.L128
 1412              	.L127:
 1413              		.loc 1 830 0
 1414 061e 8949     		ldr	r1, .L154+4
 1415 0620 0097     		str	r7, [sp]
 1416 0622 0320     		mov	r0, #3
 1417              	.LVL180:
 1418 0624 2123     		mov	r3, #33
 1419 0626 FFF7FEFF 		bl	ppp_trace
 1420              	.LVL181:
 1421              		.loc 1 832 0
 1422 062a 874A     		ldr	r2, .L154+8
 1423 062c 538A     		ldrh	r3, [r2, #18]
 1424 062e 0133     		add	r3, r3, #1
 1425 0630 5382     		strh	r3, [r2, #18]
 1426              		.loc 1 833 0
 1427 0632 D388     		ldrh	r3, [r2, #6]
 1428 0634 0133     		add	r3, r3, #1
 1429 0636 D380     		strh	r3, [r2, #6]
 1430 0638 F620     		mov	r0, #246
 1431 063a F5E0     		b	.L130
 1432              	.LVL182:
 1433              	.L128:
 1434              		.loc 1 838 0
 1435 063c 834B     		ldr	r3, .L154+12
 1436 063e 1B68     		ldr	r3, [r3]
 1437 0640 002B     		cmp	r3, #0
 1438 0642 0DD1     		bne	.L131
 1439              		.loc 1 839 0
 1440 0644 8249     		ldr	r1, .L154+16
 1441              	.LVL183:
 1442 0646 0120     		mov	r0, #1
 1443              	.LVL184:
 1444 0648 0022     		mov	r2, #0
 1445              	.LVL185:
 1446 064a FFF7FEFF 		bl	ppp_trace
 1447              		.loc 1 840 0
 1448 064e 7E4A     		ldr	r2, .L154+8
 1449 0650 D389     		ldrh	r3, [r2, #14]
 1450 0652 0133     		add	r3, r3, #1
 1451 0654 D381     		strh	r3, [r2, #14]
 1452              		.loc 1 841 0
 1453 0656 D388     		ldrh	r3, [r2, #6]
 1454 0658 0133     		add	r3, r3, #1
 1455 065a D380     		strh	r3, [r2, #6]
 1456 065c FC20     		mov	r0, #252
 1457 065e E3E0     		b	.L130
 1458              	.LVL186:
 1459              	.L131:
 1460              		.loc 1 853 0
 1461 0660 0320     		mov	r0, #3
 1462              	.LVL187:
 1463 0662 0021     		mov	r1, #0
 1464              	.LVL188:
 1465 0664 0322     		mov	r2, #3
 1466              	.LVL189:
 1467 0666 FFF7FEFF 		bl	pbuf_alloc
 1468 066a 0290     		str	r0, [sp, #8]
 1469              	.LVL190:
 1470              		.loc 1 854 0
 1471 066c 0028     		cmp	r0, #0
 1472 066e 0DD1     		bne	.L132
 1473              		.loc 1 855 0
 1474 0670 7849     		ldr	r1, .L154+20
 1475 0672 0320     		mov	r0, #3
 1476 0674 0022     		mov	r2, #0
 1477 0676 FFF7FEFF 		bl	ppp_trace
 1478              		.loc 1 856 0
 1479 067a 734A     		ldr	r2, .L154+8
 1480 067c 9389     		ldrh	r3, [r2, #12]
 1481 067e 0133     		add	r3, r3, #1
 1482 0680 9381     		strh	r3, [r2, #12]
 1483              		.loc 1 857 0
 1484 0682 D388     		ldrh	r3, [r2, #6]
 1485 0684 0133     		add	r3, r3, #1
 1486 0686 D380     		strh	r3, [r2, #6]
 1487 0688 FF20     		mov	r0, #255
 1488 068a CDE0     		b	.L130
 1489              	.L132:
 1490              		.loc 1 866 0
 1491 068c 6C4B     		ldr	r3, .L154
 1492 068e DB6F     		ldr	r3, [r3, #124]
 1493 0690 002B     		cmp	r3, #0
 1494 0692 21D0     		beq	.L133
 1495              		.loc 1 867 0
 1496 0694 7048     		ldr	r0, .L154+24
 1497 0696 391C     		mov	r1, r7
 1498 0698 FFF7FEFF 		bl	vj_compress_tcp
 1499 069c 7028     		cmp	r0, #112
 1500 069e 07D0     		beq	.L135
 1501 06a0 8028     		cmp	r0, #128
 1502 06a2 02D0     		beq	.L136
 1503 06a4 4028     		cmp	r0, #64
 1504 06a6 06D1     		bne	.L153
 1505 06a8 16E0     		b	.L133
 1506              	.L136:
 1507 06aa 2D23     		mov	r3, #45
 1508 06ac 0193     		str	r3, [sp, #4]
 1509              	.LVL191:
 1510 06ae 15E0     		b	.L137
 1511              	.LVL192:
 1512              	.L135:
 1513 06b0 2F25     		mov	r5, #47
 1514 06b2 0195     		str	r5, [sp, #4]
 1515              	.LVL193:
 1516 06b4 12E0     		b	.L137
 1517              	.LVL194:
 1518              	.L153:
 1519              		.loc 1 879 0
 1520 06b6 6949     		ldr	r1, .L154+28
 1521 06b8 0320     		mov	r0, #3
 1522 06ba 0022     		mov	r2, #0
 1523 06bc FFF7FEFF 		bl	ppp_trace
 1524              		.loc 1 880 0
 1525 06c0 614A     		ldr	r2, .L154+8
 1526 06c2 138A     		ldrh	r3, [r2, #16]
 1527 06c4 0133     		add	r3, r3, #1
 1528 06c6 1382     		strh	r3, [r2, #16]
 1529              		.loc 1 881 0
 1530 06c8 D388     		ldrh	r3, [r2, #6]
 1531 06ca 0133     		add	r3, r3, #1
 1532 06cc D380     		strh	r3, [r2, #6]
 1533              		.loc 1 882 0
 1534 06ce 0298     		ldr	r0, [sp, #8]
 1535 06d0 FFF7FEFF 		bl	pbuf_free
 1536 06d4 F720     		mov	r0, #247
 1537 06d6 A7E0     		b	.L130
 1538              	.LVL195:
 1539              	.L133:
 1540              		.loc 1 883 0
 1541 06d8 2123     		mov	r3, #33
 1542 06da 0193     		str	r3, [sp, #4]
 1543              	.LVL196:
 1544              	.L137:
 1545              		.loc 1 891 0
 1546 06dc FFF7FEFF 		bl	sys_jiffies
 1547 06e0 574B     		ldr	r3, .L154
 1548 06e2 9B6B     		ldr	r3, [r3, #56]
 1549 06e4 C01A     		sub	r0, r0, r3
 1550 06e6 6328     		cmp	r0, #99
 1551 06e8 01D8     		bhi	.L138
 1552 06ea 029E     		ldr	r6, [sp, #8]
 1553              	.LVL197:
 1554 06ec 05E0     		b	.L139
 1555              	.LVL198:
 1556              	.L138:
 1557              		.loc 1 892 0
 1558 06ee 7E20     		mov	r0, #126
 1559 06f0 0299     		ldr	r1, [sp, #8]
 1560 06f2 0022     		mov	r2, #0
 1561 06f4 FFF7DEFC 		bl	pppAppend
 1562 06f8 061C     		mov	r6, r0
 1563              	.LVL199:
 1564              	.L139:
 1565              		.loc 1 895 0
 1566 06fa FFF7FEFF 		bl	sys_jiffies
 1567 06fe 504B     		ldr	r3, .L154
 1568 0700 9863     		str	r0, [r3, #56]
 1569              		.loc 1 896 0
 1570 0702 5B6B     		ldr	r3, [r3, #52]
 1571 0704 002B     		cmp	r3, #0
 1572 0706 01D0     		beq	.L140
 1573 0708 554D     		ldr	r5, .L154+32
 1574              	.LVL200:
 1575 070a 0FE0     		b	.L141
 1576              	.LVL201:
 1577              	.L140:
 1578              		.loc 1 898 0
 1579 070c 554C     		ldr	r4, .L154+36
 1580 070e FF20     		mov	r0, #255
 1581 0710 311C     		mov	r1, r6
 1582 0712 221C     		mov	r2, r4
 1583 0714 FFF7CEFC 		bl	pppAppend
 1584 0718 011C     		mov	r1, r0
 1585              	.LVL202:
 1586              		.loc 1 899 0
 1587 071a 534A     		ldr	r2, .L154+40
 1588 071c FC23     		mov	r3, #252
 1589 071e 5B00     		lsl	r3, r3, #1
 1590 0720 9D5A     		ldrh	r5, [r3, r2]
 1591              	.LVL203:
 1592              		.loc 1 900 0
 1593 0722 0320     		mov	r0, #3
 1594 0724 221C     		mov	r2, r4
 1595 0726 FFF7C5FC 		bl	pppAppend
 1596              	.LVL204:
 1597 072a 061C     		mov	r6, r0
 1598              	.LVL205:
 1599              	.L141:
 1600              		.loc 1 902 0
 1601 072c 444B     		ldr	r3, .L154
 1602 072e 1B6B     		ldr	r3, [r3, #48]
 1603 0730 002B     		cmp	r3, #0
 1604 0732 02D0     		beq	.L150
 1605 0734 019B     		ldr	r3, [sp, #4]
 1606 0736 FF2B     		cmp	r3, #255
 1607 0738 0DD9     		bls	.L142
 1608              	.L150:
 1609              		.loc 1 904 0
 1610 073a 290A     		lsr	r1, r5, #8
 1611 073c 4A4A     		ldr	r2, .L154+40
 1612 073e FF23     		mov	r3, #255
 1613 0740 2B40     		and	r3, r3, r5
 1614 0742 5B00     		lsl	r3, r3, #1
 1615 0744 9B5A     		ldrh	r3, [r3, r2]
 1616 0746 1D1C     		mov	r5, r3
 1617 0748 4D40     		eor	r5, r5, r1
 1618              		.loc 1 905 0
 1619 074a 464A     		ldr	r2, .L154+36
 1620 074c 0020     		mov	r0, #0
 1621 074e 311C     		mov	r1, r6
 1622 0750 FFF7B0FC 		bl	pppAppend
 1623 0754 061C     		mov	r6, r0
 1624              	.L142:
 1625              		.loc 1 907 0
 1626 0756 0198     		ldr	r0, [sp, #4]
 1627              	.LVL206:
 1628              		.loc 1 908 0
 1629 0758 2C0A     		lsr	r4, r5, #8
 1630 075a 4349     		ldr	r1, .L154+40
 1631 075c 2B1C     		mov	r3, r5
 1632 075e 4340     		eor	r3, r3, r0
 1633 0760 FF22     		mov	r2, #255
 1634 0762 1340     		and	r3, r3, r2
 1635 0764 5B00     		lsl	r3, r3, #1
 1636 0766 5B5A     		ldrh	r3, [r3, r1]
 1637 0768 1D1C     		mov	r5, r3
 1638              	.LVL207:
 1639 076a 6540     		eor	r5, r5, r4
 1640              		.loc 1 909 0
 1641 076c 3D4A     		ldr	r2, .L154+36
 1642 076e 311C     		mov	r1, r6
 1643 0770 FFF7A0FC 		bl	pppAppend
 1644              	.LVL208:
 1645 0774 011C     		mov	r1, r0
 1646              	.LVL209:
 1647              		.loc 1 912 0
 1648 0776 002F     		cmp	r7, #0
 1649 0778 24D0     		beq	.L144
 1650              	.LVL210:
 1651 077a B946     		mov	r9, r7
 1652              	.LVL211:
 1653              	.LBB2:
 1654              		.loc 1 922 0
 1655 077c 3A4B     		ldr	r3, .L154+40
 1656 077e 9A46     		mov	sl, r3
 1657 0780 FF23     		mov	r3, #255
 1658 0782 9B46     		mov	fp, r3
 1659              		.loc 1 925 0
 1660 0784 374B     		ldr	r3, .L154+36
 1661 0786 9846     		mov	r8, r3
 1662              	.L147:
 1663              		.loc 1 916 0
 1664 0788 4B46     		mov	r3, r9
 1665 078a 5F68     		ldr	r7, [r3, #4]
 1666              	.LVL212:
 1667              		.loc 1 917 0
 1668 078c 5E89     		ldrh	r6, [r3, #10]
 1669              		.loc 1 918 0
 1670 078e 002E     		cmp	r6, #0
 1671 0790 13DD     		ble	.L145
 1672 0792 0024     		mov	r4, #0
 1673              	.L146:
 1674              		.loc 1 919 0
 1675 0794 385D     		ldrb	r0, [r7, r4]
 1676              	.LVL213:
 1677              		.loc 1 922 0
 1678 0796 2A0A     		lsr	r2, r5, #8
 1679 0798 2B1C     		mov	r3, r5
 1680 079a 4340     		eor	r3, r3, r0
 1681 079c 5D46     		mov	r5, fp
 1682              	.LVL214:
 1683 079e 2B40     		and	r3, r3, r5
 1684 07a0 5B00     		lsl	r3, r3, #1
 1685 07a2 5546     		mov	r5, sl
 1686 07a4 5B5B     		ldrh	r3, [r3, r5]
 1687 07a6 1D1C     		mov	r5, r3
 1688              	.LVL215:
 1689 07a8 5540     		eor	r5, r5, r2
 1690              		.loc 1 925 0
 1691 07aa 4246     		mov	r2, r8
 1692 07ac FFF782FC 		bl	pppAppend
 1693              	.LVL216:
 1694 07b0 011C     		mov	r1, r0
 1695              	.LVL217:
 1696 07b2 0134     		add	r4, r4, #1
 1697              		.loc 1 918 0
 1698 07b4 331B     		sub	r3, r6, r4
 1699 07b6 002B     		cmp	r3, #0
 1700 07b8 ECDC     		bgt	.L146
 1701              	.L145:
 1702              	.LBE2:
 1703              		.loc 1 912 0
 1704 07ba 4B46     		mov	r3, r9
 1705 07bc 1B68     		ldr	r3, [r3]
 1706 07be 9946     		mov	r9, r3
 1707 07c0 002B     		cmp	r3, #0
 1708 07c2 E1D1     		bne	.L147
 1709              	.LVL218:
 1710              	.L144:
 1711              		.loc 1 931 0
 1712 07c4 E843     		mvn	r0, r5
 1713 07c6 0006     		lsl	r0, r0, #24
 1714 07c8 000E     		lsr	r0, r0, #24
 1715 07ca 264C     		ldr	r4, .L154+36
 1716 07cc 221C     		mov	r2, r4
 1717 07ce FFF771FC 		bl	pppAppend
 1718              	.LVL219:
 1719 07d2 011C     		mov	r1, r0
 1720              	.LVL220:
 1721              		.loc 1 933 0
 1722 07d4 E843     		mvn	r0, r5
 1723 07d6 0004     		lsl	r0, r0, #16
 1724 07d8 000E     		lsr	r0, r0, #24
 1725 07da 221C     		mov	r2, r4
 1726 07dc FFF76AFC 		bl	pppAppend
 1727              	.LVL221:
 1728 07e0 011C     		mov	r1, r0
 1729              	.LVL222:
 1730              		.loc 1 934 0
 1731 07e2 7E20     		mov	r0, #126
 1732 07e4 0022     		mov	r2, #0
 1733 07e6 FFF765FC 		bl	pppAppend
 1734              	.LVL223:
 1735              		.loc 1 937 0
 1736 07ea 0028     		cmp	r0, #0
 1737 07ec 11D1     		bne	.L148
 1738              	.LVL224:
 1739              		.loc 1 938 0
 1740 07ee 1F49     		ldr	r1, .L154+44
 1741 07f0 0320     		mov	r0, #3
 1742              	.LVL225:
 1743 07f2 0022     		mov	r2, #0
 1744 07f4 019B     		ldr	r3, [sp, #4]
 1745 07f6 FFF7FEFF 		bl	ppp_trace
 1746              		.loc 1 941 0
 1747 07fa 0298     		ldr	r0, [sp, #8]
 1748 07fc FFF7FEFF 		bl	pbuf_free
 1749              		.loc 1 942 0
 1750 0800 114A     		ldr	r2, .L154+8
 1751 0802 9389     		ldrh	r3, [r2, #12]
 1752 0804 0133     		add	r3, r3, #1
 1753 0806 9381     		strh	r3, [r2, #12]
 1754              		.loc 1 943 0
 1755 0808 D388     		ldrh	r3, [r2, #6]
 1756 080a 0133     		add	r3, r3, #1
 1757 080c D380     		strh	r3, [r2, #6]
 1758 080e FF20     		mov	r0, #255
 1759 0810 0AE0     		b	.L130
 1760              	.LVL226:
 1761              	.L148:
 1762              		.loc 1 948 0
 1763 0812 1749     		ldr	r1, .L154+48
 1764 0814 0520     		mov	r0, #5
 1765              	.LVL227:
 1766 0816 0022     		mov	r2, #0
 1767 0818 019B     		ldr	r3, [sp, #4]
 1768 081a FFF7FEFF 		bl	ppp_trace
 1769              		.loc 1 950 0
 1770 081e 0848     		ldr	r0, .L154
 1771 0820 0299     		ldr	r1, [sp, #8]
 1772 0822 FFF7BDFE 		bl	nPut
 1773 0826 0020     		mov	r0, #0
 1774              	.LVL228:
 1775              	.L130:
 1776 0828 0006     		lsl	r0, r0, #24
 1777 082a 0016     		asr	r0, r0, #24
 1778              		.loc 1 954 0
 1779 082c 03B0     		add	sp, sp, #12
 1780              		@ sp needed for prologue
 1781              	.LVL229:
 1782              	.LVL230:
 1783              	.LVL231:
 1784 082e 3CBC     		pop	{r2, r3, r4, r5}
 1785 0830 9046     		mov	r8, r2
 1786 0832 9946     		mov	r9, r3
 1787 0834 A246     		mov	sl, r4
 1788 0836 AB46     		mov	fp, r5
 1789 0838 F0BC     		pop	{r4, r5, r6, r7}
 1790 083a 02BC     		pop	{r1}
 1791 083c 0847     		bx	r1
 1792              	.L155:
 1793 083e C046     		.align	2
 1794              	.L154:
 1795 0840 00000000 		.word	pppControl
 1796 0844 C4010000 		.word	.LC54
 1797 0848 00000000 		.word	lwip_stats
 1798 084c 00000000 		.word	lcp_phase
 1799 0850 F0010000 		.word	.LC58
 1800 0854 10020000 		.word	.LC60
 1801 0858 80000000 		.word	pppControl+128
 1802 085c 34020000 		.word	.LC63
 1803 0860 FFFF0000 		.word	65535
 1804 0864 5C000000 		.word	pppControl+92
 1805 0868 1C000000 		.word	fcstab
 1806 086c 54020000 		.word	.LC67
 1807 0870 84020000 		.word	.LC69
 1808              	.LFE303:
 1810              		.section	.rodata.str1.4
 1811 02a3 00       		.align	2
 1812              	.LC74:
 1813 02a4 70707057 		.ascii	"pppWrite[%d]: Alloc err - dropping pbuf len=%d\012\000"
 1813      72697465 
 1813      5B25645D 
 1813      3A20416C 
 1813      6C6F6320 
 1814              		.align	2
 1815              	.LC76:
 1816 02d4 70707057 		.ascii	"pppWrite[%d]: len=%d\012\000"
 1816      72697465 
 1816      5B25645D 
 1816      3A206C65 
 1816      6E3D2564 
 1817              		.text
 1818              		.align	2
 1819              		.global	pppWrite
 1820              		.code	16
 1821              		.thumb_func
 1823              	pppWrite:
 1824              	.LFB306:
 1825              		.loc 1 1067 0
 1826 0874 F0B5     		push	{r4, r5, r6, r7, lr}
 1827              	.LCFI27:
 1828 0876 5F46     		mov	r7, fp
 1829 0878 5646     		mov	r6, sl
 1830 087a 4D46     		mov	r5, r9
 1831 087c 4446     		mov	r4, r8
 1832 087e F0B4     		push	{r4, r5, r6, r7}
 1833              	.LCFI28:
 1834              	.LVL232:
 1835 0880 83B0     		sub	sp, sp, #12
 1836              	.LCFI29:
 1837 0882 0090     		str	r0, [sp]
 1838 0884 8B46     		mov	fp, r1
 1839 0886 9146     		mov	r9, r2
 1840              		.loc 1 1082 0
 1841 0888 0320     		mov	r0, #3
 1842              	.LVL233:
 1843 088a 0021     		mov	r1, #0
 1844              	.LVL234:
 1845 088c 0322     		mov	r2, #3
 1846              	.LVL235:
 1847 088e FFF7FEFF 		bl	pbuf_alloc
 1848 0892 0290     		str	r0, [sp, #8]
 1849              	.LVL236:
 1850              		.loc 1 1083 0
 1851 0894 0028     		cmp	r0, #0
 1852 0896 09D1     		bne	.L157
 1853              		.loc 1 1084 0
 1854 0898 434B     		ldr	r3, .L167
 1855 089a 9A89     		ldrh	r2, [r3, #12]
 1856 089c 0132     		add	r2, r2, #1
 1857 089e 9A81     		strh	r2, [r3, #12]
 1858              		.loc 1 1085 0
 1859 08a0 1A8A     		ldrh	r2, [r3, #16]
 1860 08a2 0132     		add	r2, r2, #1
 1861 08a4 1A82     		strh	r2, [r3, #16]
 1862 08a6 0420     		mov	r0, #4
 1863 08a8 4042     		neg	r0, r0
 1864 08aa 74E0     		b	.L158
 1865              	.L157:
 1866              		.loc 1 1068 0
 1867 08ac 0099     		ldr	r1, [sp]
 1868 08ae CB00     		lsl	r3, r1, #3
 1869 08b0 5B18     		add	r3, r3, r1
 1870 08b2 DB01     		lsl	r3, r3, #7
 1871 08b4 5B1A     		sub	r3, r3, r1
 1872 08b6 9B00     		lsl	r3, r3, #2
 1873 08b8 3C4A     		ldr	r2, .L167+4
 1874 08ba D218     		add	r2, r2, r3
 1875 08bc 0192     		str	r2, [sp, #4]
 1876              	.LVL237:
 1877              		.loc 1 1093 0
 1878 08be FFF7FEFF 		bl	sys_jiffies
 1879 08c2 019A     		ldr	r2, [sp, #4]
 1880 08c4 936B     		ldr	r3, [r2, #56]
 1881 08c6 C01A     		sub	r0, r0, r3
 1882 08c8 6328     		cmp	r0, #99
 1883 08ca 01D8     		bhi	.L159
 1884              	.LVL238:
 1885 08cc 029E     		ldr	r6, [sp, #8]
 1886              	.LVL239:
 1887 08ce 05E0     		b	.L160
 1888              	.LVL240:
 1889              	.L159:
 1890              		.loc 1 1094 0
 1891 08d0 7E20     		mov	r0, #126
 1892 08d2 0299     		ldr	r1, [sp, #8]
 1893 08d4 0022     		mov	r2, #0
 1894 08d6 FFF7EDFB 		bl	pppAppend
 1895 08da 061C     		mov	r6, r0
 1896              	.LVL241:
 1897              	.L160:
 1898              		.loc 1 1096 0
 1899 08dc FFF7FEFF 		bl	sys_jiffies
 1900 08e0 019B     		ldr	r3, [sp, #4]
 1901 08e2 9863     		str	r0, [r3, #56]
 1902              		.loc 1 1100 0
 1903 08e4 4946     		mov	r1, r9
 1904 08e6 0029     		cmp	r1, #0
 1905 08e8 01DC     		bgt	.L161
 1906 08ea 314D     		ldr	r5, .L167+8
 1907              	.LVL242:
 1908 08ec 1CE0     		b	.L162
 1909              	.LVL243:
 1910              	.L161:
 1911              		.loc 1 1107 0
 1912 08ee 019A     		ldr	r2, [sp, #4]
 1913 08f0 5C32     		add	r2, r2, #92
 1914 08f2 9046     		mov	r8, r2
 1915 08f4 2E4D     		ldr	r5, .L167+8
 1916              	.LVL244:
 1917 08f6 0024     		mov	r4, #0
 1918              		.loc 1 1104 0
 1919 08f8 2E4F     		ldr	r7, .L167+12
 1920 08fa FF23     		mov	r3, #255
 1921 08fc 9A46     		mov	sl, r3
 1922              	.L163:
 1923              		.loc 1 1101 0
 1924 08fe 5946     		mov	r1, fp
 1925 0900 085D     		ldrb	r0, [r1, r4]
 1926              	.LVL245:
 1927              		.loc 1 1104 0
 1928 0902 2A0A     		lsr	r2, r5, #8
 1929 0904 2B1C     		mov	r3, r5
 1930 0906 4340     		eor	r3, r3, r0
 1931 0908 5146     		mov	r1, sl
 1932 090a 0B40     		and	r3, r3, r1
 1933 090c 5B00     		lsl	r3, r3, #1
 1934 090e DB5B     		ldrh	r3, [r3, r7]
 1935 0910 1D1C     		mov	r5, r3
 1936 0912 5540     		eor	r5, r5, r2
 1937              		.loc 1 1107 0
 1938 0914 311C     		mov	r1, r6
 1939 0916 4246     		mov	r2, r8
 1940 0918 FFF7CCFB 		bl	pppAppend
 1941              	.LVL246:
 1942 091c 061C     		mov	r6, r0
 1943 091e 0134     		add	r4, r4, #1
 1944              		.loc 1 1067 0
 1945 0920 4A46     		mov	r2, r9
 1946 0922 131B     		sub	r3, r2, r4
 1947              		.loc 1 1100 0
 1948 0924 002B     		cmp	r3, #0
 1949 0926 EADC     		bgt	.L163
 1950              	.L162:
 1951              		.loc 1 1112 0
 1952 0928 019C     		ldr	r4, [sp, #4]
 1953 092a 5C34     		add	r4, r4, #92
 1954 092c E843     		mvn	r0, r5
 1955 092e 0006     		lsl	r0, r0, #24
 1956 0930 000E     		lsr	r0, r0, #24
 1957 0932 311C     		mov	r1, r6
 1958 0934 221C     		mov	r2, r4
 1959 0936 FFF7BDFB 		bl	pppAppend
 1960 093a 011C     		mov	r1, r0
 1961              	.LVL247:
 1962              		.loc 1 1114 0
 1963 093c E843     		mvn	r0, r5
 1964 093e 0004     		lsl	r0, r0, #16
 1965 0940 000E     		lsr	r0, r0, #24
 1966 0942 221C     		mov	r2, r4
 1967 0944 FFF7B6FB 		bl	pppAppend
 1968              	.LVL248:
 1969 0948 011C     		mov	r1, r0
 1970              	.LVL249:
 1971              		.loc 1 1115 0
 1972 094a 7E20     		mov	r0, #126
 1973 094c 0022     		mov	r2, #0
 1974 094e FFF7B1FB 		bl	pppAppend
 1975              	.LVL250:
 1976              		.loc 1 1119 0
 1977 0952 0028     		cmp	r0, #0
 1978 0954 13D1     		bne	.L164
 1979              	.LVL251:
 1980              		.loc 1 1120 0
 1981 0956 1849     		ldr	r1, .L167+16
 1982 0958 029A     		ldr	r2, [sp, #8]
 1983 095a 5389     		ldrh	r3, [r2, #10]
 1984 095c 0320     		mov	r0, #3
 1985              	.LVL252:
 1986 095e 009A     		ldr	r2, [sp]
 1987 0960 FFF7FEFF 		bl	ppp_trace
 1988              		.loc 1 1123 0
 1989 0964 0298     		ldr	r0, [sp, #8]
 1990 0966 FFF7FEFF 		bl	pbuf_free
 1991              		.loc 1 1124 0
 1992 096a 0F4A     		ldr	r2, .L167
 1993 096c 9389     		ldrh	r3, [r2, #12]
 1994 096e 0133     		add	r3, r3, #1
 1995 0970 9381     		strh	r3, [r2, #12]
 1996              		.loc 1 1125 0
 1997 0972 138A     		ldrh	r3, [r2, #16]
 1998 0974 0133     		add	r3, r3, #1
 1999 0976 1382     		strh	r3, [r2, #16]
 2000 0978 0420     		mov	r0, #4
 2001 097a 4042     		neg	r0, r0
 2002 097c 0BE0     		b	.L158
 2003              	.LVL253:
 2004              	.L164:
 2005              		.loc 1 1129 0
 2006 097e 0F49     		ldr	r1, .L167+20
 2007 0980 029A     		ldr	r2, [sp, #8]
 2008 0982 5389     		ldrh	r3, [r2, #10]
 2009 0984 0520     		mov	r0, #5
 2010              	.LVL254:
 2011 0986 009A     		ldr	r2, [sp]
 2012 0988 FFF7FEFF 		bl	ppp_trace
 2013              		.loc 1 1131 0
 2014 098c 0198     		ldr	r0, [sp, #4]
 2015 098e 0299     		ldr	r1, [sp, #8]
 2016 0990 FFF706FE 		bl	nPut
 2017 0994 0020     		mov	r0, #0
 2018              	.LVL255:
 2019              	.L158:
 2020              		.loc 1 1135 0
 2021 0996 03B0     		add	sp, sp, #12
 2022              		@ sp needed for prologue
 2023              	.LVL256:
 2024              	.LVL257:
 2025              	.LVL258:
 2026 0998 3CBC     		pop	{r2, r3, r4, r5}
 2027 099a 9046     		mov	r8, r2
 2028 099c 9946     		mov	r9, r3
 2029 099e A246     		mov	sl, r4
 2030 09a0 AB46     		mov	fp, r5
 2031 09a2 F0BC     		pop	{r4, r5, r6, r7}
 2032 09a4 02BC     		pop	{r1}
 2033 09a6 0847     		bx	r1
 2034              	.L168:
 2035              		.align	2
 2036              	.L167:
 2037 09a8 00000000 		.word	lwip_stats
 2038 09ac 00000000 		.word	pppControl
 2039 09b0 FFFF0000 		.word	65535
 2040 09b4 1C000000 		.word	fcstab
 2041 09b8 A4020000 		.word	.LC74
 2042 09bc D4020000 		.word	.LC76
 2043              	.LFE306:
 2045              		.section	.rodata.str1.4
 2046 02ea 0000     		.align	2
 2047              	.LC82:
 2048 02ec 70707049 		.ascii	"pppInput: discarding proto 0x%04X in phase %d\012\000"
 2048      6E707574 
 2048      3A206469 
 2048      73636172 
 2048      64696E67 
 2049 031b 00       		.align	2
 2050              	.LC85:
 2051 031c 70707049 		.ascii	"pppInput[%d]: vj_comp in pbuf len=%d\012\000"
 2051      6E707574 
 2051      5B25645D 
 2051      3A20766A 
 2051      5F636F6D 
 2052 0342 0000     		.align	2
 2053              	.LC88:
 2054 0344 70707049 		.ascii	"pppInput[%d]: Dropping VJ compressed\012\000"
 2054      6E707574 
 2054      5B25645D 
 2054      3A204472 
 2054      6F707069 
 2055 036a 0000     		.align	2
 2056              	.LC90:
 2057 036c 70707049 		.ascii	"pppInput[%d]: vj_un in pbuf len=%d\012\000"
 2057      6E707574 
 2057      5B25645D 
 2057      3A20766A 
 2057      5F756E20 
 2058              		.align	2
 2059              	.LC92:
 2060 0390 70707049 		.ascii	"pppInput[%d]: Dropping VJ uncompressed\012\000"
 2060      6E707574 
 2060      5B25645D 
 2060      3A204472 
 2060      6F707069 
 2061              		.align	2
 2062              	.LC94:
 2063 03b8 70707049 		.ascii	"pppInput[%d]: ip in pbuf len=%d\012\000"
 2063      6E707574 
 2063      5B25645D 
 2063      3A206970 
 2063      20696E20 
 2064 03d9 000000   		.align	2
 2065              	.LC97:
 2066 03dc 70707049 		.ascii	"pppInput[%d]: %s len=%d\012\000"
 2066      6E707574 
 2066      5B25645D 
 2066      3A202573 
 2066      206C656E 
 2067 03f5 000000   		.align	2
 2068              	.LC99:
 2069 03f8 70707049 		.ascii	"pppInput[%d]: rejecting unsupported proto 0x%04X le"
 2069      6E707574 
 2069      5B25645D 
 2069      3A207265 
 2069      6A656374 
 2070 042b 6E3D2564 		.ascii	"n=%d\012\000"
 2070      0A00
 2071              		.text
 2072              		.align	2
 2073              		.code	16
 2074              		.thumb_func
 2076              	pppInput:
 2077              	.LFB323:
1617:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1618:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** struct pppInputHeader {
1619:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int unit;
1620:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u16_t proto;
1621:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** };
1622:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1623:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1624:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Pass the processed input packet to the appropriate handler.
1625:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * This function and all handlers run in the context of the tcpip_thread
1626:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1627:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void
1628:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppInput(void *arg)
1629:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 2078              		.loc 1 1629 0
 2079 09c0 70B5     		push	{r4, r5, r6, lr}
 2080              	.LCFI30:
 2081              	.LVL259:
 2082 09c2 83B0     		sub	sp, sp, #12
 2083              	.LCFI31:
1630:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *nb = (struct pbuf *)arg;
 2084              		.loc 1 1630 0
 2085 09c4 0290     		str	r0, [sp, #8]
 2086              	.LVL260:
1631:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u16_t protocol;
1632:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pd;
1633:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1634:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pd = ((struct pppInputHeader *)nb->payload)->unit;
 2087              		.loc 1 1634 0
 2088 09c6 4368     		ldr	r3, [r0, #4]
 2089 09c8 1E68     		ldr	r6, [r3]
 2090              	.LVL261:
1635:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   protocol = ((struct pppInputHeader *)nb->payload)->proto;
 2091              		.loc 1 1635 0
 2092 09ca 9A88     		ldrh	r2, [r3, #4]
 2093 09cc 6B46     		mov	r3, sp
 2094 09ce 0633     		add	r3, r3, #6
 2095 09d0 1A80     		strh	r2, [r3]
 2096              	.LVL262:
1636:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1637:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if(pbuf_header(nb, -(int)sizeof(struct pppInputHeader))) {
 2097              		.loc 1 1637 0
 2098 09d2 0821     		mov	r1, #8
 2099 09d4 4942     		neg	r1, r1
 2100 09d6 FFF7FEFF 		bl	pbuf_header
 2101              	.LVL263:
 2102 09da 0028     		cmp	r0, #0
 2103 09dc 00D0     		beq	.LCB1955
 2104 09de F1E0     		b	.L170	@long jump
 2105              	.LCB1955:
1638:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     LWIP_ASSERT("pbuf_header failed\n", 0);
1639:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     goto drop;
1640:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1641:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1642:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LINK_STATS_INC(link.recv);
 2106              		.loc 1 1642 0
 2107 09e0 7E4A     		ldr	r2, .L188
 2108 09e2 5388     		ldrh	r3, [r2, #2]
 2109 09e4 0133     		add	r3, r3, #1
 2110 09e6 5380     		strh	r3, [r2, #2]
1643:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1644:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   /*
1645:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * Toss all non-LCP packets unless LCP is OPEN.
1646:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * Until we get past the authentication phase, toss all packets
1647:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    * except LCP, LQR and authentication packets.
1648:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    */
1649:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if((lcp_phase[pd] <= PHASE_AUTHENTICATE) && (protocol != PPP_LCP)) {
 2111              		.loc 1 1649 0
 2112 09e8 7D4A     		ldr	r2, .L188+4
 2113 09ea B300     		lsl	r3, r6, #2
 2114 09ec 9C58     		ldr	r4, [r3, r2]
 2115 09ee 6B46     		mov	r3, sp
 2116 09f0 0633     		add	r3, r3, #6
 2117 09f2 1D88     		ldrh	r5, [r3]
 2118 09f4 032C     		cmp	r4, #3
 2119 09f6 14D8     		bhi	.L171
 2120 09f8 7A4B     		ldr	r3, .L188+8
 2121 09fa 9D42     		cmp	r5, r3
 2122 09fc 11D0     		beq	.L171
1650:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if(!((protocol == PPP_LQR) || (protocol == PPP_PAP) || (protocol == PPP_CHAP)) ||
 2123              		.loc 1 1650 0
 2124 09fe 0433     		add	r3, r3, #4
 2125 0a00 9D42     		cmp	r5, r3
 2126 0a02 05D0     		beq	.L172
 2127 0a04 023B     		sub	r3, r3, #2
 2128 0a06 9D42     		cmp	r5, r3
 2129 0a08 02D0     		beq	.L172
 2130 0a0a 774B     		ldr	r3, .L188+12
 2131 0a0c 9D42     		cmp	r5, r3
 2132 0a0e 01D1     		bne	.L173
 2133              	.L172:
 2134 0a10 032C     		cmp	r4, #3
 2135 0a12 06D0     		beq	.L171
 2136              	.L173:
1651:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         (lcp_phase[pd] != PHASE_AUTHENTICATE)) {
1652:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_INFO, "pppInput: discarding proto 0x%04X in phase %d\n", protocol, lcp_phase[pd
 2137              		.loc 1 1652 0
 2138 0a14 7549     		ldr	r1, .L188+16
 2139 0a16 0520     		mov	r0, #5
 2140 0a18 2A1C     		mov	r2, r5
 2141 0a1a 231C     		mov	r3, r4
 2142 0a1c FFF7FEFF 		bl	ppp_trace
 2143 0a20 D0E0     		b	.L170
 2144              	.L171:
1653:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       goto drop;
1654:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
1655:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1656:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1657:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   switch(protocol) {
 2145              		.loc 1 1657 0
 2146 0a22 2D2D     		cmp	r5, #45
 2147 0a24 09D0     		beq	.L176
 2148 0a26 2F2D     		cmp	r5, #47
 2149 0a28 3AD0     		beq	.L177
 2150 0a2a 212D     		cmp	r5, #33
 2151 0a2c 6BD0     		beq	.L175
 2152              	.LBB3:
1658:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPP_VJC_COMP:      /* VJ compressed TCP */
1659:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT && VJ_SUPPORT
1660:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_INFO, "pppInput[%d]: vj_comp in pbuf len=%d\n", pd, nb->len));
1661:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /*
1662:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * Clip off the VJ header and prepend the rebuilt TCP/IP header and
1663:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * pass the result to IP.
1664:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        */
1665:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if ((vj_uncompress_tcp(&nb, &pppControl[pd].vjComp) >= 0) && (pppControl[pd].netif.input)) {
1666:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         pppControl[pd].netif.input(nb, &pppControl[pd].netif);
1667:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         return;
1668:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1669:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Something's wrong so drop it. */
1670:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_WARNING, "pppInput[%d]: Dropping VJ compressed\n", pd));
1671:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #else  /* PPPOS_SUPPORT && VJ_SUPPORT */
1672:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* No handler for this protocol so drop the packet. */
1673:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_INFO, "pppInput[%d]: drop VJ Comp in %d:%s\n", pd, nb->len, nb->payload));
1674:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT && VJ_SUPPORT */
1675:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
1676:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1677:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPP_VJC_UNCOMP:    /* VJ uncompressed TCP */
1678:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT && VJ_SUPPORT
1679:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_INFO, "pppInput[%d]: vj_un in pbuf len=%d\n", pd, nb->len));
1680:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /*
1681:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * Process the TCP/IP header for VJ header compression and then pass
1682:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * the packet to IP.
1683:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        */
1684:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if ((vj_uncompress_uncomp(nb, &pppControl[pd].vjComp) >= 0) && pppControl[pd].netif.input) {
1685:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         pppControl[pd].netif.input(nb, &pppControl[pd].netif);
1686:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         return;
1687:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1688:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Something's wrong so drop it. */
1689:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_WARNING, "pppInput[%d]: Dropping VJ uncompressed\n", pd));
1690:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #else  /* PPPOS_SUPPORT && VJ_SUPPORT */
1691:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* No handler for this protocol so drop the packet. */
1692:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_INFO,
1693:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                "pppInput[%d]: drop VJ UnComp in %d:.*H\n",
1694:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                 pd, nb->len, LWIP_MIN(nb->len * 2, 40), nb->payload));
1695:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* PPPOS_SUPPORT && VJ_SUPPORT */
1696:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
1697:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1698:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     case PPP_IP:            /* Internet Protocol */
1699:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_INFO, "pppInput[%d]: ip in pbuf len=%d\n", pd, nb->len));
1700:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if (pppControl[pd].netif.input) {
1701:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         pppControl[pd].netif.input(nb, &pppControl[pd].netif);
1702:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         return;
1703:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1704:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       break;
1705:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1706:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     default: {
1707:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       struct protent *protp;
1708:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       int i;
1709:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1710:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /*
1711:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * Upcall the proper protocol input routine.
1712:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        */
1713:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       for (i = 0; (protp = ppp_protocols[i]) != NULL; ++i) {
 2153              		.loc 1 1713 0
 2154 0a2e 704B     		ldr	r3, .L188+20
 2155 0a30 1C68     		ldr	r4, [r3]
 2156              	.LVL264:
 2157 0a32 002C     		cmp	r4, #0
 2158 0a34 00D0     		beq	.LCB2017
 2159 0a36 86E0     		b	.L178	@long jump
 2160              	.LCB2017:
 2161 0a38 A3E0     		b	.L179
 2162              	.LVL265:
 2163              	.L176:
 2164              	.LBE3:
 2165              		.loc 1 1660 0
 2166 0a3a 6E49     		ldr	r1, .L188+24
 2167 0a3c 029B     		ldr	r3, [sp, #8]
 2168 0a3e 5B89     		ldrh	r3, [r3, #10]
 2169 0a40 0520     		mov	r0, #5
 2170 0a42 321C     		mov	r2, r6
 2171 0a44 FFF7FEFF 		bl	ppp_trace
 2172              		.loc 1 1665 0
 2173 0a48 F300     		lsl	r3, r6, #3
 2174 0a4a 9B19     		add	r3, r3, r6
 2175 0a4c DB01     		lsl	r3, r3, #7
 2176 0a4e 9B1B     		sub	r3, r3, r6
 2177 0a50 9B00     		lsl	r3, r3, #2
 2178 0a52 8033     		add	r3, r3, #128
 2179 0a54 6849     		ldr	r1, .L188+28
 2180 0a56 C918     		add	r1, r1, r3
 2181 0a58 02A8     		add	r0, sp, #8
 2182 0a5a FFF7FEFF 		bl	vj_uncompress_tcp
 2183 0a5e 0028     		cmp	r0, #0
 2184 0a60 18DB     		blt	.L180
 2185              	.LVL266:
 2186 0a62 654A     		ldr	r2, .L188+28
 2187 0a64 F300     		lsl	r3, r6, #3
 2188 0a66 9B19     		add	r3, r3, r6
 2189 0a68 DB01     		lsl	r3, r3, #7
 2190 0a6a 9B1B     		sub	r3, r3, r6
 2191 0a6c 9B00     		lsl	r3, r3, #2
 2192 0a6e D218     		add	r2, r2, r3
 2193 0a70 6249     		ldr	r1, .L188+32
 2194 0a72 5218     		add	r2, r2, r1
 2195 0a74 1268     		ldr	r2, [r2]
 2196 0a76 002A     		cmp	r2, #0
 2197 0a78 0CD0     		beq	.L180
 2198              		.loc 1 1666 0
 2199 0a7a 0298     		ldr	r0, [sp, #8]
 2200 0a7c F300     		lsl	r3, r6, #3
 2201 0a7e 9B19     		add	r3, r3, r6
 2202 0a80 DB01     		lsl	r3, r3, #7
 2203 0a82 9B1B     		sub	r3, r3, r6
 2204 0a84 9B00     		lsl	r3, r3, #2
 2205 0a86 1039     		sub	r1, r1, #16
 2206 0a88 5B18     		add	r3, r3, r1
 2207 0a8a 5B49     		ldr	r1, .L188+28
 2208 0a8c C918     		add	r1, r1, r3
 2209 0a8e 00F08FFC 		bl	.L190
 2210 0a92 9EE0     		b	.L186
 2211              	.L180:
 2212              		.loc 1 1670 0
 2213 0a94 5A49     		ldr	r1, .L188+36
 2214 0a96 0320     		mov	r0, #3
 2215 0a98 321C     		mov	r2, r6
 2216 0a9a FFF7FEFF 		bl	ppp_trace
 2217 0a9e 91E0     		b	.L170
 2218              	.LVL267:
 2219              	.L177:
 2220              		.loc 1 1679 0
 2221 0aa0 5849     		ldr	r1, .L188+40
 2222 0aa2 029B     		ldr	r3, [sp, #8]
 2223 0aa4 5B89     		ldrh	r3, [r3, #10]
 2224 0aa6 0520     		mov	r0, #5
 2225 0aa8 321C     		mov	r2, r6
 2226 0aaa FFF7FEFF 		bl	ppp_trace
 2227              		.loc 1 1684 0
 2228 0aae 0298     		ldr	r0, [sp, #8]
 2229 0ab0 F300     		lsl	r3, r6, #3
 2230 0ab2 9B19     		add	r3, r3, r6
 2231 0ab4 DB01     		lsl	r3, r3, #7
 2232 0ab6 9B1B     		sub	r3, r3, r6
 2233 0ab8 9B00     		lsl	r3, r3, #2
 2234 0aba 8033     		add	r3, r3, #128
 2235 0abc 4E49     		ldr	r1, .L188+28
 2236 0abe C918     		add	r1, r1, r3
 2237 0ac0 FFF7FEFF 		bl	vj_uncompress_uncomp
 2238 0ac4 0028     		cmp	r0, #0
 2239 0ac6 18DB     		blt	.L182
 2240              	.LVL268:
 2241 0ac8 4B4A     		ldr	r2, .L188+28
 2242 0aca F300     		lsl	r3, r6, #3
 2243 0acc 9B19     		add	r3, r3, r6
 2244 0ace DB01     		lsl	r3, r3, #7
 2245 0ad0 9B1B     		sub	r3, r3, r6
 2246 0ad2 9B00     		lsl	r3, r3, #2
 2247 0ad4 D218     		add	r2, r2, r3
 2248 0ad6 494B     		ldr	r3, .L188+32
 2249 0ad8 D218     		add	r2, r2, r3
 2250 0ada 1268     		ldr	r2, [r2]
 2251 0adc 002A     		cmp	r2, #0
 2252 0ade 0CD0     		beq	.L182
 2253              		.loc 1 1685 0
 2254 0ae0 0298     		ldr	r0, [sp, #8]
 2255 0ae2 F300     		lsl	r3, r6, #3
 2256 0ae4 9B19     		add	r3, r3, r6
 2257 0ae6 DB01     		lsl	r3, r3, #7
 2258 0ae8 9B1B     		sub	r3, r3, r6
 2259 0aea 9B00     		lsl	r3, r3, #2
 2260 0aec 4649     		ldr	r1, .L188+44
 2261 0aee 5B18     		add	r3, r3, r1
 2262 0af0 4149     		ldr	r1, .L188+28
 2263 0af2 C918     		add	r1, r1, r3
 2264 0af4 00F05CFC 		bl	.L190
 2265 0af8 6BE0     		b	.L186
 2266              	.L182:
 2267              		.loc 1 1689 0
 2268 0afa 4449     		ldr	r1, .L188+48
 2269 0afc 0320     		mov	r0, #3
 2270 0afe 321C     		mov	r2, r6
 2271 0b00 FFF7FEFF 		bl	ppp_trace
 2272 0b04 5EE0     		b	.L170
 2273              	.LVL269:
 2274              	.L175:
 2275              		.loc 1 1699 0
 2276 0b06 4249     		ldr	r1, .L188+52
 2277 0b08 029B     		ldr	r3, [sp, #8]
 2278 0b0a 5B89     		ldrh	r3, [r3, #10]
 2279 0b0c 0520     		mov	r0, #5
 2280 0b0e 321C     		mov	r2, r6
 2281 0b10 FFF7FEFF 		bl	ppp_trace
 2282              		.loc 1 1700 0
 2283 0b14 384A     		ldr	r2, .L188+28
 2284 0b16 F300     		lsl	r3, r6, #3
 2285 0b18 9B19     		add	r3, r3, r6
 2286 0b1a DB01     		lsl	r3, r3, #7
 2287 0b1c 9B1B     		sub	r3, r3, r6
 2288 0b1e 9B00     		lsl	r3, r3, #2
 2289 0b20 D218     		add	r2, r2, r3
 2290 0b22 364B     		ldr	r3, .L188+32
 2291 0b24 D218     		add	r2, r2, r3
 2292 0b26 1268     		ldr	r2, [r2]
 2293 0b28 002A     		cmp	r2, #0
 2294 0b2a 4BD0     		beq	.L170
 2295              	.LVL270:
 2296              		.loc 1 1701 0
 2297 0b2c 0298     		ldr	r0, [sp, #8]
 2298 0b2e F300     		lsl	r3, r6, #3
 2299 0b30 9B19     		add	r3, r3, r6
 2300 0b32 DB01     		lsl	r3, r3, #7
 2301 0b34 9B1B     		sub	r3, r3, r6
 2302 0b36 9B00     		lsl	r3, r3, #2
 2303 0b38 3349     		ldr	r1, .L188+44
 2304 0b3a 5B18     		add	r3, r3, r1
 2305 0b3c 2E49     		ldr	r1, .L188+28
 2306 0b3e C918     		add	r1, r1, r3
 2307 0b40 00F036FC 		bl	.L190
 2308 0b44 45E0     		b	.L186
 2309              	.LVL271:
 2310              	.L178:
 2311              		.loc 1 1702 0
 2312 0b46 334A     		ldr	r2, .L188+56
 2313              	.L185:
 2314              	.LBB4:
1714:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         if (protp->protocol == protocol && protp->enabled_flag) {
 2315              		.loc 1 1714 0
 2316 0b48 2388     		ldrh	r3, [r4]
 2317 0b4a AB42     		cmp	r3, r5
 2318 0b4c 16D1     		bne	.L183
 2319 0b4e 236A     		ldr	r3, [r4, #32]
 2320 0b50 002B     		cmp	r3, #0
 2321 0b52 13D0     		beq	.L183
1715:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           PPPDEBUG((LOG_INFO, "pppInput[%d]: %s len=%d\n", pd, protp->name, nb->len));
 2322              		.loc 1 1715 0
 2323 0b54 3049     		ldr	r1, .L188+60
 2324 0b56 636A     		ldr	r3, [r4, #36]
 2325 0b58 029A     		ldr	r2, [sp, #8]
 2326 0b5a 5289     		ldrh	r2, [r2, #10]
 2327 0b5c 0092     		str	r2, [sp]
 2328 0b5e 0520     		mov	r0, #5
 2329 0b60 321C     		mov	r2, r6
 2330 0b62 FFF7FEFF 		bl	ppp_trace
1716:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           nb = pppSingleBuf(nb);
 2331              		.loc 1 1716 0
 2332 0b66 0298     		ldr	r0, [sp, #8]
 2333 0b68 FFF7FEFF 		bl	pppSingleBuf
 2334 0b6c 0290     		str	r0, [sp, #8]
1717:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           (*protp->input)(pd, nb->payload, nb->len);
 2335              		.loc 1 1717 0
 2336 0b6e 4168     		ldr	r1, [r0, #4]
 2337 0b70 4289     		ldrh	r2, [r0, #10]
 2338 0b72 A368     		ldr	r3, [r4, #8]
 2339 0b74 301C     		mov	r0, r6
 2340 0b76 00F01CFC 		bl	.L191
 2341 0b7a 27E0     		b	.L184
 2342              	.LVL272:
 2343              	.L183:
 2344              		.loc 1 1713 0
 2345 0b7c 10CA     		ldmia	r2!, {r4}
 2346 0b7e 002C     		cmp	r4, #0
 2347 0b80 E2D1     		bne	.L185
 2348              	.L179:
1718:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           goto out;
1719:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         }
1720:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1721:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1722:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* No handler for this protocol so reject the packet. */
1723:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_INFO, "pppInput[%d]: rejecting unsupported proto 0x%04X len=%d\n", pd, protocol
 2349              		.loc 1 1723 0
 2350 0b82 2649     		ldr	r1, .L188+64
 2351 0b84 029B     		ldr	r3, [sp, #8]
 2352 0b86 5B89     		ldrh	r3, [r3, #10]
 2353 0b88 0093     		str	r3, [sp]
 2354 0b8a 0520     		mov	r0, #5
 2355 0b8c 321C     		mov	r2, r6
 2356 0b8e 2B1C     		mov	r3, r5
 2357 0b90 FFF7FEFF 		bl	ppp_trace
1724:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if (pbuf_header(nb, sizeof(protocol))) {
 2358              		.loc 1 1724 0
 2359 0b94 0298     		ldr	r0, [sp, #8]
 2360 0b96 0221     		mov	r1, #2
 2361 0b98 FFF7FEFF 		bl	pbuf_header
 2362 0b9c 0028     		cmp	r0, #0
 2363 0b9e 11D1     		bne	.L170
 2364              	.LVL273:
1725:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         LWIP_ASSERT("pbuf_header failed\n", 0);
1726:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         goto drop;
1727:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1728:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if BYTE_ORDER == LITTLE_ENDIAN
1729:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       protocol = htons(protocol);
 2365              		.loc 1 1729 0
 2366 0ba0 6C46     		mov	r4, sp
 2367              	.LVL274:
 2368 0ba2 0634     		add	r4, r4, #6
 2369 0ba4 2088     		ldrh	r0, [r4]
 2370              	.LVL275:
 2371 0ba6 FFF7FEFF 		bl	htons
 2372              	.LVL276:
 2373 0baa 2080     		strh	r0, [r4]
 2374              	.LVL277:
1730:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       SMEMCPY(nb->payload, &protocol, sizeof(protocol));
 2375              		.loc 1 1730 0
 2376 0bac 029B     		ldr	r3, [sp, #8]
 2377 0bae 5868     		ldr	r0, [r3, #4]
 2378 0bb0 211C     		mov	r1, r4
 2379 0bb2 0222     		mov	r2, #2
 2380 0bb4 FFF7FEFF 		bl	memcpy
1731:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* BYTE_ORDER == LITTLE_ENDIAN */
1732:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       lcp_sprotrej(pd, nb->payload, nb->len);
 2381              		.loc 1 1732 0
 2382 0bb8 029B     		ldr	r3, [sp, #8]
 2383 0bba 5968     		ldr	r1, [r3, #4]
 2384 0bbc 5A89     		ldrh	r2, [r3, #10]
 2385 0bbe 301C     		mov	r0, r6
 2386 0bc0 FFF7FEFF 		bl	lcp_sprotrej
 2387              	.LVL278:
 2388              	.L170:
 2389              	.LBE4:
1733:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
1734:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     break;
1735:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1736:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1737:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** drop:
1738:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LINK_STATS_INC(link.drop);
 2390              		.loc 1 1738 0
 2391 0bc4 054A     		ldr	r2, .L188
 2392 0bc6 D388     		ldrh	r3, [r2, #6]
 2393 0bc8 0133     		add	r3, r3, #1
 2394 0bca D380     		strh	r3, [r2, #6]
 2395              	.L184:
1739:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1740:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** out:
1741:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   pbuf_free(nb);
 2396              		.loc 1 1741 0
 2397 0bcc 0298     		ldr	r0, [sp, #8]
 2398 0bce FFF7FEFF 		bl	pbuf_free
 2399              	.LVL279:
 2400              	.L186:
1742:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   return;
1743:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 2401              		.loc 1 1743 0
 2402 0bd2 03B0     		add	sp, sp, #12
 2403              		@ sp needed for prologue
 2404              	.LVL280:
 2405              	.LVL281:
 2406 0bd4 70BC     		pop	{r4, r5, r6}
 2407 0bd6 01BC     		pop	{r0}
 2408 0bd8 0047     		bx	r0
 2409              	.L189:
 2410 0bda C046     		.align	2
 2411              	.L188:
 2412 0bdc 00000000 		.word	lwip_stats
 2413 0be0 00000000 		.word	lcp_phase
 2414 0be4 21C00000 		.word	49185
 2415 0be8 23C20000 		.word	49699
 2416 0bec EC020000 		.word	.LC82
 2417 0bf0 00000000 		.word	ppp_protocols
 2418 0bf4 1C030000 		.word	.LC85
 2419 0bf8 00000000 		.word	pppControl
 2420 0bfc BC110000 		.word	4540
 2421 0c00 44030000 		.word	.LC88
 2422 0c04 6C030000 		.word	.LC90
 2423 0c08 AC110000 		.word	4524
 2424 0c0c 90030000 		.word	.LC92
 2425 0c10 B8030000 		.word	.LC94
 2426 0c14 04000000 		.word	ppp_protocols+4
 2427 0c18 DC030000 		.word	.LC97
 2428 0c1c F8030000 		.word	.LC99
 2429              	.LFE323:
 2431              		.section	.rodata.str1.4
 2432 0431 000000   		.align	2
 2433              	.LC101:
 2434 0434 70707044 		.ascii	"pppDrop: pbuf len=%d\012\000"
 2434      726F703A 
 2434      20706275 
 2434      66206C65 
 2434      6E3D2564 
 2435              		.text
 2436              		.align	2
 2437              		.code	16
 2438              		.thumb_func
 2440              	pppDrop:
 2441              	.LFB324:
1744:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1745:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if PPPOS_SUPPORT
1746:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*
1747:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Drop the input packet.
1748:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1749:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void
1750:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppDrop(PPPControl *pc)
1751:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
 2442              		.loc 1 1751 0
 2443 0c20 10B5     		push	{r4, lr}
 2444              	.LCFI32:
 2445              	.LVL282:
 2446 0c22 041C     		mov	r4, r0
1752:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   if (pc->inHead != NULL) {
 2447              		.loc 1 1752 0
 2448 0c24 8369     		ldr	r3, [r0, #24]
 2449 0c26 002B     		cmp	r3, #0
 2450 0c28 12D0     		beq	.L193
1753:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if 0
1754:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_INFO, "pppDrop: %d:%.*H\n", pc->inHead->len, min(60, pc->inHead->len * 2), pc->in
1755:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif
1756:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     PPPDEBUG((LOG_INFO, "pppDrop: pbuf len=%d\n", pc->inHead->len));
 2451              		.loc 1 1756 0
 2452 0c2a 0F49     		ldr	r1, .L196
 2453 0c2c 5A89     		ldrh	r2, [r3, #10]
 2454 0c2e 0520     		mov	r0, #5
 2455              	.LVL283:
 2456 0c30 FFF7FEFF 		bl	ppp_trace
1757:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if (pc->inTail && (pc->inTail != pc->inHead)) {
 2457              		.loc 1 1757 0
 2458 0c34 E069     		ldr	r0, [r4, #28]
 2459 0c36 0028     		cmp	r0, #0
 2460 0c38 04D0     		beq	.L194
 2461 0c3a A369     		ldr	r3, [r4, #24]
 2462 0c3c 9842     		cmp	r0, r3
 2463 0c3e 01D0     		beq	.L194
1758:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pbuf_free(pc->inTail);
 2464              		.loc 1 1758 0
 2465 0c40 FFF7FEFF 		bl	pbuf_free
 2466              	.L194:
1759:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
1760:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pbuf_free(pc->inHead);
 2467              		.loc 1 1760 0
 2468 0c44 A069     		ldr	r0, [r4, #24]
 2469 0c46 FFF7FEFF 		bl	pbuf_free
1761:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inHead = NULL;
 2470              		.loc 1 1761 0
 2471 0c4a 0023     		mov	r3, #0
 2472 0c4c A361     		str	r3, [r4, #24]
1762:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     pc->inTail = NULL;
 2473              		.loc 1 1762 0
 2474 0c4e E361     		str	r3, [r4, #28]
 2475              	.LVL284:
 2476              	.L193:
1763:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1764:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if VJ_SUPPORT
1765:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   vj_uncompress_err(&pc->vjComp);
 2477              		.loc 1 1765 0
 2478 0c50 201C     		mov	r0, r4
 2479 0c52 8030     		add	r0, r0, #128
 2480 0c54 FFF7FEFF 		bl	vj_uncompress_err
1766:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif /* VJ_SUPPORT */
1767:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1768:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   LINK_STATS_INC(link.drop);
 2481              		.loc 1 1768 0
 2482 0c58 044A     		ldr	r2, .L196+4
 2483 0c5a D388     		ldrh	r3, [r2, #6]
 2484 0c5c 0133     		add	r3, r3, #1
 2485 0c5e D380     		strh	r3, [r2, #6]
1769:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** }
 2486              		.loc 1 1769 0
 2487              		@ sp needed for prologue
 2488              	.LVL285:
 2489 0c60 10BC     		pop	{r4}
 2490 0c62 01BC     		pop	{r0}
 2491 0c64 0047     		bx	r0
 2492              	.L197:
 2493 0c66 C046     		.align	2
 2494              	.L196:
 2495 0c68 34040000 		.word	.LC101
 2496 0c6c 00000000 		.word	lwip_stats
 2497              	.LFE324:
 2499              		.section	.rodata.str1.4
 2500 044a 0000     		.align	2
 2501              	.LC105:
 2502 044c 7070704D 		.ascii	"pppMain: unit %d: Connecting\012\000"
 2502      61696E3A 
 2502      20756E69 
 2502      74202564 
 2502      3A20436F 
 2503 046a 0000     		.align	2
 2504              	.LC108:
 2505 046c 0A0D7070 		.ascii	"\012\015pppMain Task\000"
 2505      704D6169 
 2505      6E205461 
 2505      736B00
 2506 047b 00       		.align	2
 2507              	.LC110:
 2508 047c 7070704D 		.ascii	"pppMain: unit %d kill_link -> pppStopCB\012\000"
 2508      61696E3A 
 2508      20756E69 
 2508      74202564 
 2508      206B696C 
 2509 04a5 000000   		.align	2
 2510              	.LC113:
 2511 04a8 7070704D 		.ascii	"pppMain: unit %d sig_hup -> pppHupCB\012\000"
 2511      61696E3A 
 2511      20756E69 
 2511      74202564 
 2511      20736967 
 2512 04ce 0000     		.align	2
 2513              	.LC116:
 2514 04d0 70707049 		.ascii	"pppInProc[%d]: got %d bytes\012\000"
 2514      6E50726F 
 2514      635B2564 
 2514      5D3A2067 
 2514      6F742025 
 2515 04ed 000000   		.align	2
 2516              	.LC119:
 2517 04f0 70707049 		.ascii	"pppInProc[%d]: Dropping incomplete packet %d\012\000"
 2517      6E50726F 
 2517      635B2564 
 2517      5D3A2044 
 2517      726F7070 
 2518 051e 0000     		.align	2
 2519              	.LC122:
 2520 0520 70707049 		.ascii	"pppInProc[%d]: Dropping bad fcs 0x%04X proto=0x%04X"
 2520      6E50726F 
 2520      635B2564 
 2520      5D3A2044 
 2520      726F7070 
 2521 0553 0A00     		.ascii	"\012\000"
 2522 0555 000000   		.align	2
 2523              	.LC125:
 2524 0558 70707049 		.ascii	"pppInProc[%d]: tcpip_callback() failed, dropping pa"
 2524      6E50726F 
 2524      635B2564 
 2524      5D3A2074 
 2524      63706970 
 2525 058b 636B6574 		.ascii	"cket\012\000"
 2525      0A00
 2526 0591 000000   		.align	2
 2527              	.LC127:
 2528 0594 70707049 		.ascii	"pppInProc[%d]: Dropping ACCM char <%d>\012\000"
 2528      6E50726F 
 2528      635B2564 
 2528      5D3A2044 
 2528      726F7070 
 2529              		.align	2
 2530              	.LC130:
 2531 05bc 70707049 		.ascii	"pppInProc[%d]: NO FREE MBUFS!\012\000"
 2531      6E50726F 
 2531      635B2564 
 2531      5D3A204E 
 2531      4F204652 
 2532 05db 00       		.align	2
 2533              	.LC134:
 2534 05dc 7070704D 		.ascii	"pppMain: unit %d: PHASE_DEAD\012\000"
 2534      61696E3A 
 2534      20756E69 
 2534      74202564 
 2534      3A205048 
 2535 05fa 0000     		.align	2
 2536              	.LC136:
 2537 05fc 7070704D 		.ascii	"pppMain: unit %d: linkStatusCB=%lx errCode=%d\012\000"
 2537      61696E3A 
 2537      20756E69 
 2537      74202564 
 2537      3A206C69 
 2538              		.text
 2539              		.align	2
 2540              		.code	16
 2541              		.thumb_func
 2543              	pppMain:
 2544              	.LFB321:
 2545              		.loc 1 1500 0
 2546 0c70 F0B5     		push	{r4, r5, r6, r7, lr}
 2547              	.LCFI33:
 2548 0c72 5F46     		mov	r7, fp
 2549 0c74 5646     		mov	r6, sl
 2550 0c76 4D46     		mov	r5, r9
 2551 0c78 4446     		mov	r4, r8
 2552 0c7a F0B4     		push	{r4, r5, r6, r7}
 2553              	.LCFI34:
 2554              	.LVL286:
 2555 0c7c 87B0     		sub	sp, sp, #28
 2556              	.LCFI35:
 2557 0c7e 8146     		mov	r9, r0
 2558              		.loc 1 1501 0
 2559 0c80 8246     		mov	sl, r0
 2560              	.LVL287:
 2561              		.loc 1 1506 0
 2562 0c82 C300     		lsl	r3, r0, #3
 2563 0c84 4B44     		add	r3, r3, r9
 2564 0c86 DB01     		lsl	r3, r3, #7
 2565 0c88 1B1A     		sub	r3, r3, r0
 2566 0c8a 9B00     		lsl	r3, r3, #2
 2567 0c8c C94A     		ldr	r2, .L238
 2568 0c8e D518     		add	r5, r2, r3
 2569              	.LVL288:
 2570              		.loc 1 1508 0
 2571 0c90 BC21     		mov	r1, #188
 2572 0c92 C900     		lsl	r1, r1, #3
 2573 0c94 0320     		mov	r0, #3
 2574              	.LVL289:
 2575 0c96 0022     		mov	r2, #0
 2576 0c98 FFF7FEFF 		bl	pbuf_alloc
 2577 0c9c 0590     		str	r0, [sp, #20]
 2578              	.LVL290:
 2579              		.loc 1 1509 0
 2580 0c9e 0028     		cmp	r0, #0
 2581 0ca0 03D1     		bne	.L199
 2582              		.loc 1 1511 0
 2583 0ca2 0423     		mov	r3, #4
 2584 0ca4 5B42     		neg	r3, r3
 2585 0ca6 AB60     		str	r3, [r5, #8]
 2586 0ca8 60E1     		b	.L200
 2587              	.L199:
 2588              		.loc 1 1518 0
 2589 0caa C349     		ldr	r1, .L238+4
 2590 0cac 0520     		mov	r0, #5
 2591 0cae 4A46     		mov	r2, r9
 2592 0cb0 FFF7FEFF 		bl	ppp_trace
 2593              		.loc 1 1519 0
 2594 0cb4 C148     		ldr	r0, .L238+8
 2595 0cb6 4946     		mov	r1, r9
 2596 0cb8 0122     		mov	r2, #1
 2597 0cba FFF7FEFF 		bl	tcpip_callback_with_block
 2598              		.loc 1 1520 0
 2599 0cbe C048     		ldr	r0, .L238+12
 2600 0cc0 FFF7FEFF 		bl	dbgStackFreeSize
 2601              		.loc 1 1521 0
 2602 0cc4 BF49     		ldr	r1, .L238+16
 2603 0cc6 0391     		str	r1, [sp, #12]
 2604              	.LBB8:
 2605              	.LBB9:
1770:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1771:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /**
1772:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  * Process a received octet string.
1773:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  */
1774:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** static void
1775:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** pppInProc(int pd, u_char *s, int l)
1776:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** {
1777:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPControl *pc = &pppControl[pd];
1778:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   struct pbuf *nextNBuf;
1779:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   u_char curChar;
1780:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   int pppChProcessed = 0;
1781:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1782:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_DEBUG, "pppInProc[%d]: got %d bytes\n", pd, l));
1783:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** /*  for(int i=0;i<l;i++)
1784:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     {
1785:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       PPPDEBUG((LOG_DETAIL, "0x%02X ,",*(s+i)));
1786:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
1787:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   PPPDEBUG((LOG_DEBUG, " \n \r "));
1788:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** */
1789:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   while (l-- > 0) {
1790:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     curChar = *s++;
1791:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1792:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     /* Handle special characters. */
1793:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     if (ESCAPE_P(pc->inACCM, curChar)) {
 2606              		.loc 1 1793 0
 2607 0cc8 BF4A     		ldr	r2, .L238+20
 2608 0cca 0292     		str	r2, [sp, #8]
1794:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Check for escape sequences. */
1795:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* XXX Note that this does not handle an escaped 0x5d character which
1796:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * would appear as an escape character.  Since this is an ASCII ']'
1797:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * and there is no reason that I know of to escape it, I won't complicate
1798:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * the code to handle this case. GLL */
1799:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if (curChar == PPP_ESCAPE) {
1800:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         pc->inEscaped = 1;
1801:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Check for the flag character. */
1802:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       } else if (curChar == PPP_FLAG) {
1803:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          /* If this is just an extra flag character, ignore it. */
1804:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          if (pc->inState <= PDADDRESS) {
1805:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            /* ignore it */;
1806:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          /* If we haven't received the packet header, drop what has come in. */
1807:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          } else if (pc->inState < PDDATA) {
1808:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            PPPDEBUG((LOG_WARNING,
1809:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                     "pppInProc[%d]: Dropping incomplete packet %d\n",
1810:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                      pd, pc->inState));
1811:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            LINK_STATS_INC(link.lenerr);
1812:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            pppDrop(pc);
1813:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          /* If the fcs is invalid, drop the packet. */
1814:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          } else if (pc->inFCS != PPP_GOODFCS) {
 2609              		.loc 1 1814 0
 2610 0ccc BF4B     		ldr	r3, .L238+24
 2611 0cce 1B04     		lsl	r3, r3, #16
 2612 0cd0 1B0C     		lsr	r3, r3, #16
 2613 0cd2 0193     		str	r3, [sp, #4]
 2614 0cd4 38E1     		b	.L237
 2615              	.LVL291:
 2616              	.L232:
 2617              	.LBE9:
 2618              	.LBE8:
 2619              		.loc 1 1522 0
 2620 0cd6 2B69     		ldr	r3, [r5, #16]
 2621 0cd8 002B     		cmp	r3, #0
 2622 0cda 0FD0     		beq	.L202
 2623              		.loc 1 1523 0
 2624 0cdc BC49     		ldr	r1, .L238+28
 2625 0cde 0720     		mov	r0, #7
 2626 0ce0 5246     		mov	r2, sl
 2627 0ce2 FFF7FEFF 		bl	ppp_trace
 2628              		.loc 1 1524 0
 2629 0ce6 0523     		mov	r3, #5
 2630 0ce8 5B42     		neg	r3, r3
 2631 0cea AB60     		str	r3, [r5, #8]
 2632              		.loc 1 1526 0
 2633 0cec B948     		ldr	r0, .L238+32
 2634 0cee 4946     		mov	r1, r9
 2635 0cf0 0122     		mov	r2, #1
 2636 0cf2 FFF7FEFF 		bl	tcpip_callback_with_block
 2637              		.loc 1 1527 0
 2638 0cf6 0023     		mov	r3, #0
 2639 0cf8 2B61     		str	r3, [r5, #16]
 2640 0cfa 25E1     		b	.L237
 2641              	.L202:
 2642              		.loc 1 1528 0
 2643 0cfc 6B69     		ldr	r3, [r5, #20]
 2644 0cfe 002B     		cmp	r3, #0
 2645 0d00 0CD0     		beq	.L203
 2646              		.loc 1 1529 0
 2647 0d02 B549     		ldr	r1, .L238+36
 2648 0d04 0720     		mov	r0, #7
 2649 0d06 5246     		mov	r2, sl
 2650 0d08 FFF7FEFF 		bl	ppp_trace
 2651              		.loc 1 1530 0
 2652 0d0c 0023     		mov	r3, #0
 2653 0d0e 6B61     		str	r3, [r5, #20]
 2654              		.loc 1 1531 0
 2655 0d10 B248     		ldr	r0, .L238+40
 2656 0d12 4946     		mov	r1, r9
 2657 0d14 0122     		mov	r2, #1
 2658 0d16 FFF7FEFF 		bl	tcpip_callback_with_block
 2659 0d1a 15E1     		b	.L237
 2660              	.L203:
 2661              		.loc 1 1533 0
 2662 0d1c E868     		ldr	r0, [r5, #12]
 2663 0d1e 059B     		ldr	r3, [sp, #20]
 2664 0d20 5968     		ldr	r1, [r3, #4]
 2665 0d22 5A89     		ldrh	r2, [r3, #10]
 2666 0d24 FFF7FEFF 		bl	sio_read
 2667 0d28 8046     		mov	r8, r0
 2668 0d2a 031C     		mov	r3, r0
 2669              	.LVL292:
 2670              		.loc 1 1534 0
 2671 0d2c 0028     		cmp	r0, #0
 2672 0d2e 00DC     		bgt	.LCB2457
 2673 0d30 07E1     		b	.L204	@long jump
 2674              	.LCB2457:
 2675              	.LVL293:
 2676              		.loc 1 1535 0
 2677 0d32 0599     		ldr	r1, [sp, #20]
 2678 0d34 4968     		ldr	r1, [r1, #4]
 2679 0d36 0691     		str	r1, [sp, #24]
 2680              	.LVL294:
 2681              	.LBB15:
 2682              	.LBB11:
 2683              		.loc 1 1782 0
 2684 0d38 A949     		ldr	r1, .L238+44
 2685 0d3a 0720     		mov	r0, #7
 2686              	.LVL295:
 2687 0d3c 5246     		mov	r2, sl
 2688 0d3e FFF7FEFF 		bl	ppp_trace
 2689              	.LVL296:
 2690 0d42 069F     		ldr	r7, [sp, #24]
1815:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            PPPDEBUG((LOG_INFO,
1816:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                     "pppInProc[%d]: Dropping bad fcs 0x%04X proto=0x%04X\n",
1817:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                      pd, pc->inFCS, pc->inProtocol));
1818:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            LINK_STATS_INC(link.chkerr);
1819:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            pppDrop(pc);
1820:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          /* Otherwise it's a good packet so pass it on. */
1821:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          } else {
1822:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            /* Trim off the checksum. */
1823:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            if(pc->inTail->len >= 2) {
1824:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              pc->inTail->len -= 2;
1825:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1826:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              pc->inTail->tot_len = pc->inTail->len;
1827:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              if (pc->inTail != pc->inHead) {
1828:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                pbuf_cat(pc->inHead, pc->inTail);
1829:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              }
1830:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            } else {
1831:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              pc->inTail->tot_len = pc->inTail->len;
1832:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              if (pc->inTail != pc->inHead) {
1833:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                pbuf_cat(pc->inHead, pc->inTail);
1834:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              }
1835:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1836:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              pbuf_realloc(pc->inHead, pc->inHead->tot_len - 2);
1837:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            }
1838:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1839:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            /* Dispatch the packet thereby consuming it. */
1840:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            if(tcpip_callback(pppInput, pc->inHead) != ERR_OK) {
1841:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              PPPDEBUG((LOG_ERR, "pppInProc[%d]: tcpip_callback() failed, dropping packet\n", pd));
1842:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              pbuf_free(pc->inHead);
1843:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****              LINK_STATS_INC(link.drop);
1844:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            }
1845:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            pc->inHead = NULL;
1846:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            pc->inTail = NULL;
1847:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          }
1848:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1849:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          /* Prepare for a new packet. */
1850:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          pc->inFCS = PPP_INITFCS;
1851:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          pc->inState = PDADDRESS;
1852:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****          pc->inEscaped = 0;
1853:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Other characters are usually control characters that may have
1854:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****        * been inserted by the physical layer so here we just drop them. */
1855:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       } else {
1856:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         PPPDEBUG((LOG_WARNING,
1857:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                  "pppInProc[%d]: Dropping ACCM char <%d>\n", pd, curChar));
1858:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1859:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     /* Process other characters. */
1860:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     } else {
1861:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Unencode escaped characters. */
1862:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       if (pc->inEscaped) {
 2691              		.loc 1 1862 0
 2692 0d44 2422     		mov	r2, #36
 2693 0d46 9346     		mov	fp, r2
1863:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         pc->inEscaped = 0;
1864:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         curChar ^= PPP_TRANS;
1865:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1866:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1867:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* Process character relative to current state. */
1868:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       switch(pc->inState) {
1869:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         case PDIDLE:                    /* Idle state - waiting. */
1870:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           /* Drop the character if it's not 0xff
1871:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            * we would have processed a flag character above. */
1872:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           if (curChar != PPP_ALLSTATIONS) {
1873:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             break;
1874:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           }
1875:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1876:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         /* Fall through */
1877:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         case PDSTART:                   /* Process start flag. */
1878:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           /* Prepare for a new packet. */
1879:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           pc->inFCS = PPP_INITFCS;
1880:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1881:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         /* Fall through */
1882:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         case PDADDRESS:                 /* Process address field. */
1883:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           if (curChar == PPP_ALLSTATIONS) {
1884:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pc->inState = PDCONTROL;
1885:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             break;
1886:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           }
1887:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           /* Else assume compressed address and control fields so
1888:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            * fall through to get the protocol... */
1889:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         case PDCONTROL:                 /* Process control field. */
1890:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           /* If we don't get a valid control code, restart. */
1891:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           if (curChar == PPP_UI) {
1892:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pc->inState = PDPROTOCOL1;
1893:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             break;
1894:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           }
1895:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #if 0
1896:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           else {
1897:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             PPPDEBUG((LOG_WARNING,
1898:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                      "pppInProc[%d]: Invalid control <%d>\n", pd, curChar));
1899:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                       pc->inState = PDSTART;
1900:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           }
1901:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** #endif
1902:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         case PDPROTOCOL1:               /* Process protocol field 1. */
1903:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           /* If the lower bit is set, this is the end of the protocol
1904:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****            * field. */
1905:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           if (curChar & 1) {
1906:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pc->inProtocol = curChar;
1907:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pc->inState = PDDATA;
1908:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           } else {
1909:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pc->inProtocol = (u_int)curChar << 8;
1910:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pc->inState = PDPROTOCOL2;
1911:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           }
1912:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           break;
1913:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         case PDPROTOCOL2:               /* Process protocol field 2. */
1914:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           pc->inProtocol |= curChar;
1915:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           pc->inState = PDDATA;
1916:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           break;
1917:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****         case PDDATA:                    /* Process data byte. */
1918:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           /* Make space to receive processed data. */
1919:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           if (pc->inTail == NULL || pc->inTail->len == PBUF_POOL_BUFSIZE) {
1920:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             if(pc->inTail) {
1921:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               pc->inTail->tot_len = pc->inTail->len;
1922:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               if (pc->inTail != pc->inHead) {
1923:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                 pbuf_cat(pc->inHead, pc->inTail);
1924:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               }
1925:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             }
1926:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             /* If we haven't started a packet, we need a packet header. */
1927:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             nextNBuf = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
1928:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             if (nextNBuf == NULL) {
1929:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               /* No free buffers.  Drop the input packet and let the
1930:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                * higher layers deal with it.  Continue processing
1931:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****                * the received pbuf chain in case a new packet starts. */
1932:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               PPPDEBUG((LOG_ERR, "pppInProc[%d]: NO FREE MBUFS!\n", pd));
1933:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               LINK_STATS_INC(link.memerr);
1934:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               pppDrop(pc);
1935:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               pc->inState = PDSTART;  /* Wait for flag sequence. */
1936:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               break;
1937:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             }
1938:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             if (pc->inHead == NULL) {
1939:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               struct pppInputHeader *pih = nextNBuf->payload;
1940:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1941:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               pih->unit = pd;
1942:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               pih->proto = pc->inProtocol;
1943:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1944:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               nextNBuf->len += sizeof(*pih);
1945:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c **** 
1946:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****               pc->inHead = nextNBuf;
1947:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             }
1948:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****             pc->inTail = nextNBuf;
1949:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           }
1950:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           /* Load character into buffer. */
1951:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           ((u_char*)pc->inTail->payload)[pc->inTail->len++] = curChar;
1952:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****           break;
1953:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       }
1954:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pppChProcessed++;
1955:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****    //   PPPDEBUG((LOG_DETAIL, "0x%02X :",curChar));
1956:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       /* update the frame check sequence number. */
1957:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****       pc->inFCS = PPP_FCS(pc->inFCS, curChar);
 2694              		.loc 1 1957 0
 2695 0d48 A64B     		ldr	r3, .L238+48
 2696 0d4a 0493     		str	r3, [sp, #16]
 2697              	.LVL297:
 2698              	.L231:
 2699              		.loc 1 1790 0
 2700 0d4c 3C78     		ldrb	r4, [r7]
 2701 0d4e 0137     		add	r7, r7, #1
 2702              		.loc 1 1793 0
 2703 0d50 0722     		mov	r2, #7
 2704 0d52 2240     		and	r2, r2, r4
 2705 0d54 E308     		lsr	r3, r4, #3
 2706 0d56 EB18     		add	r3, r5, r3
 2707 0d58 3C33     		add	r3, r3, #60
 2708 0d5a 0299     		ldr	r1, [sp, #8]
 2709 0d5c 8A5C     		ldrb	r2, [r1, r2]
 2710 0d5e 1B78     		ldrb	r3, [r3]
 2711 0d60 1342     		tst	r3, r2
 2712 0d62 72D0     		beq	.L205
 2713              		.loc 1 1799 0
 2714 0d64 7D2C     		cmp	r4, #125
 2715 0d66 03D1     		bne	.L206
 2716              		.loc 1 1800 0
 2717 0d68 0123     		mov	r3, #1
 2718 0d6a 5A46     		mov	r2, fp
 2719 0d6c AB54     		strb	r3, [r5, r2]
 2720 0d6e DEE0     		b	.L207
 2721              	.L206:
 2722              		.loc 1 1802 0
 2723 0d70 7E2C     		cmp	r4, #126
 2724 0d72 63D1     		bne	.L208
 2725              		.loc 1 1804 0
 2726 0d74 2B6A     		ldr	r3, [r5, #32]
 2727 0d76 022B     		cmp	r3, #2
 2728 0d78 57D9     		bls	.L209
 2729              		.loc 1 1807 0
 2730 0d7a 052B     		cmp	r3, #5
 2731 0d7c 0CD8     		bhi	.L210
 2732              		.loc 1 1808 0
 2733 0d7e 9A49     		ldr	r1, .L238+52
 2734 0d80 0320     		mov	r0, #3
 2735              	.LVL298:
 2736 0d82 5246     		mov	r2, sl
 2737 0d84 FFF7FEFF 		bl	ppp_trace
 2738              		.loc 1 1811 0
 2739 0d88 984A     		ldr	r2, .L238+56
 2740 0d8a 5389     		ldrh	r3, [r2, #10]
 2741 0d8c 0133     		add	r3, r3, #1
 2742 0d8e 5381     		strh	r3, [r2, #10]
 2743              		.loc 1 1812 0
 2744 0d90 281C     		mov	r0, r5
 2745 0d92 FFF745FF 		bl	pppDrop
 2746 0d96 48E0     		b	.L209
 2747              	.LVL299:
 2748              	.L210:
 2749              		.loc 1 1814 0
 2750 0d98 2C8D     		ldrh	r4, [r5, #40]
 2751              	.LVL300:
 2752 0d9a 019B     		ldr	r3, [sp, #4]
 2753 0d9c 9C42     		cmp	r4, r3
 2754 0d9e 0FD0     		beq	.L211
 2755              		.loc 1 1815 0
 2756 0da0 9349     		ldr	r1, .L238+60
 2757 0da2 EB8C     		ldrh	r3, [r5, #38]
 2758 0da4 0093     		str	r3, [sp]
 2759 0da6 0520     		mov	r0, #5
 2760              	.LVL301:
 2761 0da8 5246     		mov	r2, sl
 2762 0daa 231C     		mov	r3, r4
 2763 0dac FFF7FEFF 		bl	ppp_trace
 2764              		.loc 1 1818 0
 2765 0db0 8E4A     		ldr	r2, .L238+56
 2766 0db2 1389     		ldrh	r3, [r2, #8]
 2767 0db4 0133     		add	r3, r3, #1
 2768 0db6 1381     		strh	r3, [r2, #8]
 2769              		.loc 1 1819 0
 2770 0db8 281C     		mov	r0, r5
 2771 0dba FFF731FF 		bl	pppDrop
 2772 0dbe 34E0     		b	.L209
 2773              	.LVL302:
 2774              	.L211:
 2775              		.loc 1 1823 0
 2776 0dc0 EA69     		ldr	r2, [r5, #28]
 2777 0dc2 5389     		ldrh	r3, [r2, #10]
 2778 0dc4 012B     		cmp	r3, #1
 2779 0dc6 0BD9     		bls	.L212
 2780              		.loc 1 1824 0
 2781 0dc8 023B     		sub	r3, r3, #2
 2782 0dca 5381     		strh	r3, [r2, #10]
 2783              		.loc 1 1826 0
 2784 0dcc EA69     		ldr	r2, [r5, #28]
 2785 0dce 5389     		ldrh	r3, [r2, #10]
 2786 0dd0 1381     		strh	r3, [r2, #8]
 2787              		.loc 1 1827 0
 2788 0dd2 E969     		ldr	r1, [r5, #28]
 2789 0dd4 A869     		ldr	r0, [r5, #24]
 2790              	.LVL303:
 2791 0dd6 8142     		cmp	r1, r0
 2792 0dd8 10D0     		beq	.L213
 2793              		.loc 1 1828 0
 2794 0dda FFF7FEFF 		bl	pbuf_cat
 2795 0dde 0DE0     		b	.L213
 2796              	.LVL304:
 2797              	.L212:
 2798              		.loc 1 1831 0
 2799 0de0 1381     		strh	r3, [r2, #8]
 2800              		.loc 1 1832 0
 2801 0de2 E969     		ldr	r1, [r5, #28]
 2802 0de4 A869     		ldr	r0, [r5, #24]
 2803              	.LVL305:
 2804 0de6 8142     		cmp	r1, r0
 2805 0de8 01D0     		beq	.L214
 2806              		.loc 1 1833 0
 2807 0dea FFF7FEFF 		bl	pbuf_cat
 2808              	.L214:
 2809              		.loc 1 1836 0
 2810 0dee A869     		ldr	r0, [r5, #24]
 2811 0df0 0189     		ldrh	r1, [r0, #8]
 2812 0df2 0239     		sub	r1, r1, #2
 2813 0df4 0904     		lsl	r1, r1, #16
 2814 0df6 090C     		lsr	r1, r1, #16
 2815 0df8 FFF7FEFF 		bl	pbuf_realloc
 2816              	.L213:
 2817              	.LBE11:
 2818              		.loc 1 1840 0
 2819 0dfc 7D48     		ldr	r0, .L238+64
 2820 0dfe A969     		ldr	r1, [r5, #24]
 2821 0e00 0122     		mov	r2, #1
 2822 0e02 FFF7FEFF 		bl	tcpip_callback_with_block
 2823 0e06 0006     		lsl	r0, r0, #24
 2824              	.LBB12:
 2825 0e08 0028     		cmp	r0, #0
 2826 0e0a 0BD0     		beq	.L215
 2827              		.loc 1 1841 0
 2828 0e0c 7A49     		ldr	r1, .L238+68
 2829 0e0e 0120     		mov	r0, #1
 2830 0e10 5246     		mov	r2, sl
 2831 0e12 FFF7FEFF 		bl	ppp_trace
 2832              		.loc 1 1842 0
 2833 0e16 A869     		ldr	r0, [r5, #24]
 2834 0e18 FFF7FEFF 		bl	pbuf_free
 2835              		.loc 1 1843 0
 2836 0e1c 734A     		ldr	r2, .L238+56
 2837 0e1e D388     		ldrh	r3, [r2, #6]
 2838 0e20 0133     		add	r3, r3, #1
 2839 0e22 D380     		strh	r3, [r2, #6]
 2840              	.L215:
 2841              		.loc 1 1845 0
 2842 0e24 0023     		mov	r3, #0
 2843 0e26 AB61     		str	r3, [r5, #24]
 2844              		.loc 1 1846 0
 2845 0e28 EB61     		str	r3, [r5, #28]
 2846              	.LVL306:
 2847              	.L209:
 2848              		.loc 1 1850 0
 2849 0e2a 0123     		mov	r3, #1
 2850 0e2c 5B42     		neg	r3, r3
 2851 0e2e 2B85     		strh	r3, [r5, #40]
 2852              		.loc 1 1851 0
 2853 0e30 0223     		mov	r3, #2
 2854 0e32 2B62     		str	r3, [r5, #32]
 2855              		.loc 1 1852 0
 2856 0e34 0023     		mov	r3, #0
 2857 0e36 5946     		mov	r1, fp
 2858 0e38 6B54     		strb	r3, [r5, r1]
 2859 0e3a 78E0     		b	.L207
 2860              	.L208:
 2861              		.loc 1 1856 0
 2862 0e3c 6F49     		ldr	r1, .L238+72
 2863 0e3e 0320     		mov	r0, #3
 2864              	.LVL307:
 2865 0e40 5246     		mov	r2, sl
 2866 0e42 231C     		mov	r3, r4
 2867              	.LVL308:
 2868 0e44 FFF7FEFF 		bl	ppp_trace
 2869 0e48 71E0     		b	.L207
 2870              	.LVL309:
 2871              	.L205:
 2872              		.loc 1 1862 0
 2873 0e4a 5A46     		mov	r2, fp
 2874 0e4c AB5C     		ldrb	r3, [r5, r2]
 2875 0e4e 002B     		cmp	r3, #0
 2876 0e50 05D0     		beq	.L216
 2877              		.loc 1 1863 0
 2878 0e52 0023     		mov	r3, #0
 2879 0e54 AB54     		strb	r3, [r5, r2]
 2880              		.loc 1 1864 0
 2881 0e56 2023     		mov	r3, #32
 2882 0e58 6340     		eor	r3, r3, r4
 2883 0e5a 1B06     		lsl	r3, r3, #24
 2884 0e5c 1C0E     		lsr	r4, r3, #24
 2885              	.LVL310:
 2886              	.L216:
 2887              		.loc 1 1868 0
 2888 0e5e 2B6A     		ldr	r3, [r5, #32]
 2889 0e60 062B     		cmp	r3, #6
 2890 0e62 59D8     		bhi	.L217
 2891 0e64 9B00     		lsl	r3, r3, #2
 2892 0e66 664A     		ldr	r2, .L238+76
 2893 0e68 D358     		ldr	r3, [r2, r3]
 2894 0e6a 9F46     		mov	pc, r3
 2895              		.section	.rodata
 2896              		.align	2
 2897              	.L225:
 2898 0000 6C0E0000 		.word	.L218
 2899 0004 700E0000 		.word	.L219
 2900 0008 760E0000 		.word	.L220
 2901 000c 800E0000 		.word	.L221
 2902 0010 8A0E0000 		.word	.L222
 2903 0014 A00E0000 		.word	.L223
 2904 0018 AC0E0000 		.word	.L224
 2905              		.text
 2906              	.L218:
 2907              		.loc 1 1872 0
 2908 0e6c FF2C     		cmp	r4, #255
 2909 0e6e 53D1     		bne	.L217
 2910              	.L219:
 2911              		.loc 1 1879 0
 2912 0e70 0123     		mov	r3, #1
 2913 0e72 5B42     		neg	r3, r3
 2914 0e74 2B85     		strh	r3, [r5, #40]
 2915              	.L220:
 2916              		.loc 1 1883 0
 2917 0e76 FF2C     		cmp	r4, #255
 2918 0e78 02D1     		bne	.L221
 2919              		.loc 1 1884 0
 2920 0e7a 0323     		mov	r3, #3
 2921 0e7c 2B62     		str	r3, [r5, #32]
 2922 0e7e 4BE0     		b	.L217
 2923              	.L221:
 2924              		.loc 1 1891 0
 2925 0e80 032C     		cmp	r4, #3
 2926 0e82 02D1     		bne	.L222
 2927              		.loc 1 1892 0
 2928 0e84 0423     		mov	r3, #4
 2929 0e86 2B62     		str	r3, [r5, #32]
 2930 0e88 46E0     		b	.L217
 2931              	.L222:
 2932              	.LBE12:
 2933              		.loc 1 1905 0
 2934 0e8a E307     		lsl	r3, r4, #31
 2935 0e8c 03D5     		bpl	.L226
 2936              	.LBB13:
 2937              		.loc 1 1906 0
 2938 0e8e EC84     		strh	r4, [r5, #38]
 2939              		.loc 1 1907 0
 2940 0e90 0623     		mov	r3, #6
 2941 0e92 2B62     		str	r3, [r5, #32]
 2942 0e94 40E0     		b	.L217
 2943              	.L226:
 2944              		.loc 1 1909 0
 2945 0e96 2302     		lsl	r3, r4, #8
 2946 0e98 EB84     		strh	r3, [r5, #38]
 2947              		.loc 1 1910 0
 2948 0e9a 0523     		mov	r3, #5
 2949 0e9c 2B62     		str	r3, [r5, #32]
 2950 0e9e 3BE0     		b	.L217
 2951              	.L223:
 2952              		.loc 1 1914 0
 2953 0ea0 EB8C     		ldrh	r3, [r5, #38]
 2954 0ea2 2343     		orr	r3, r3, r4
 2955 0ea4 EB84     		strh	r3, [r5, #38]
 2956              		.loc 1 1915 0
 2957 0ea6 0623     		mov	r3, #6
 2958 0ea8 2B62     		str	r3, [r5, #32]
 2959 0eaa 35E0     		b	.L217
 2960              	.L224:
 2961              		.loc 1 1919 0
 2962 0eac EA69     		ldr	r2, [r5, #28]
 2963 0eae 002A     		cmp	r2, #0
 2964 0eb0 09D0     		beq	.L227
 2965 0eb2 5389     		ldrh	r3, [r2, #10]
 2966 0eb4 C82B     		cmp	r3, #200
 2967 0eb6 29D1     		bne	.L228
 2968              		.loc 1 1921 0
 2969 0eb8 1381     		strh	r3, [r2, #8]
 2970              		.loc 1 1922 0
 2971 0eba E969     		ldr	r1, [r5, #28]
 2972 0ebc A869     		ldr	r0, [r5, #24]
 2973              	.LVL311:
 2974 0ebe 8142     		cmp	r1, r0
 2975 0ec0 01D0     		beq	.L227
 2976              		.loc 1 1923 0
 2977 0ec2 FFF7FEFF 		bl	pbuf_cat
 2978              	.LVL312:
 2979              	.L227:
 2980              	.LBE13:
 2981              		.loc 1 1927 0
 2982 0ec6 0320     		mov	r0, #3
 2983              	.LVL313:
 2984 0ec8 0021     		mov	r1, #0
 2985 0eca 0322     		mov	r2, #3
 2986 0ecc FFF7FEFF 		bl	pbuf_alloc
 2987              	.LBB14:
 2988              		.loc 1 1928 0
 2989 0ed0 0028     		cmp	r0, #0
 2990 0ed2 0ED1     		bne	.L229
 2991              	.LVL314:
 2992              		.loc 1 1932 0
 2993 0ed4 4B49     		ldr	r1, .L238+80
 2994 0ed6 0120     		mov	r0, #1
 2995              	.LVL315:
 2996 0ed8 5246     		mov	r2, sl
 2997 0eda FFF7FEFF 		bl	ppp_trace
 2998              		.loc 1 1933 0
 2999 0ede 434A     		ldr	r2, .L238+56
 3000 0ee0 9389     		ldrh	r3, [r2, #12]
 3001 0ee2 0133     		add	r3, r3, #1
 3002 0ee4 9381     		strh	r3, [r2, #12]
 3003              		.loc 1 1934 0
 3004 0ee6 281C     		mov	r0, r5
 3005 0ee8 FFF79AFE 		bl	pppDrop
 3006              		.loc 1 1935 0
 3007 0eec 0123     		mov	r3, #1
 3008 0eee 2B62     		str	r3, [r5, #32]
 3009 0ef0 12E0     		b	.L217
 3010              	.LVL316:
 3011              	.L229:
 3012              		.loc 1 1938 0
 3013 0ef2 AB69     		ldr	r3, [r5, #24]
 3014 0ef4 002B     		cmp	r3, #0
 3015 0ef6 08D1     		bne	.L230
 3016              	.LBB10:
 3017              		.loc 1 1939 0
 3018 0ef8 4268     		ldr	r2, [r0, #4]
 3019              	.LVL317:
 3020              		.loc 1 1941 0
 3021 0efa 5146     		mov	r1, sl
 3022 0efc 1160     		str	r1, [r2]
 3023              		.loc 1 1942 0
 3024 0efe EB8C     		ldrh	r3, [r5, #38]
 3025 0f00 9380     		strh	r3, [r2, #4]
 3026              		.loc 1 1944 0
 3027 0f02 4389     		ldrh	r3, [r0, #10]
 3028 0f04 0833     		add	r3, r3, #8
 3029 0f06 4381     		strh	r3, [r0, #10]
 3030              		.loc 1 1946 0
 3031 0f08 A861     		str	r0, [r5, #24]
 3032              	.L230:
 3033              	.LBE10:
 3034              		.loc 1 1948 0
 3035 0f0a E861     		str	r0, [r5, #28]
 3036              	.L228:
 3037              		.loc 1 1951 0
 3038 0f0c EB69     		ldr	r3, [r5, #28]
 3039 0f0e 5A89     		ldrh	r2, [r3, #10]
 3040              	.LVL318:
 3041 0f10 5968     		ldr	r1, [r3, #4]
 3042 0f12 8C54     		strb	r4, [r1, r2]
 3043 0f14 0132     		add	r2, r2, #1
 3044 0f16 5A81     		strh	r2, [r3, #10]
 3045              	.L217:
 3046              		.loc 1 1957 0
 3047 0f18 298D     		ldrh	r1, [r5, #40]
 3048 0f1a 231C     		mov	r3, r4
 3049 0f1c 4B40     		eor	r3, r3, r1
 3050 0f1e FF22     		mov	r2, #255
 3051 0f20 1340     		and	r3, r3, r2
 3052 0f22 5B00     		lsl	r3, r3, #1
 3053 0f24 049A     		ldr	r2, [sp, #16]
 3054 0f26 D35A     		ldrh	r3, [r2, r3]
 3055 0f28 090A     		lsr	r1, r1, #8
 3056 0f2a 4B40     		eor	r3, r3, r1
 3057 0f2c 2B85     		strh	r3, [r5, #40]
 3058              	.L207:
 3059              		.loc 1 1789 0
 3060 0f2e 069B     		ldr	r3, [sp, #24]
 3061 0f30 4344     		add	r3, r3, r8
 3062 0f32 9F42     		cmp	r7, r3
 3063 0f34 00D0     		beq	.LCB2834
 3064 0f36 09E7     		b	.L231	@long jump
 3065              	.LCB2834:
1958:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****     }
1959:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   }
1960:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****  // PPPDEBUG((LOG_DETAIL, " \n\r FSC CALCULATE %d bytes \n\r,",pppChProcessed));
1961:rtos/common/ethernet/lwIP_132/src/netif/ppp/ppp.c ****   avRandomize();
 3066              		.loc 1 1961 0
 3067 0f38 0020     		mov	r0, #0
 3068              	.LVL319:
 3069 0f3a 0021     		mov	r1, #0
 3070 0f3c FFF7FEFF 		bl	avChurnRand
 3071 0f40 02E0     		b	.L237
 3072              	.LVL320:
 3073              	.L204:
 3074              	.LBE14:
 3075              	.LBE15:
 3076              		.loc 1 1538 0
 3077 0f42 0120     		mov	r0, #1
 3078              	.LVL321:
 3079 0f44 FFF7FEFF 		bl	sys_msleep
 3080              	.LVL322:
 3081              	.L237:
 3082              		.loc 1 1521 0
 3083 0f48 5146     		mov	r1, sl
 3084 0f4a 8B00     		lsl	r3, r1, #2
 3085 0f4c 039A     		ldr	r2, [sp, #12]
 3086 0f4e 9B58     		ldr	r3, [r3, r2]
 3087 0f50 002B     		cmp	r3, #0
 3088 0f52 00D0     		beq	.LCB2858
 3089 0f54 BFE6     		b	.L232	@long jump
 3090              	.LCB2858:
 3091              		.loc 1 1542 0
 3092 0f56 2C49     		ldr	r1, .L238+84
 3093 0f58 0520     		mov	r0, #5
 3094 0f5a 5246     		mov	r2, sl
 3095 0f5c FFF7FEFF 		bl	ppp_trace
 3096              		.loc 1 1543 0
 3097 0f60 281C     		mov	r0, r5
 3098 0f62 FFF75DFE 		bl	pppDrop
 3099              		.loc 1 1544 0
 3100 0f66 0598     		ldr	r0, [sp, #20]
 3101 0f68 FFF7FEFF 		bl	pbuf_free
 3102              	.L200:
 3103              		.loc 1 1547 0
 3104 0f6c 2749     		ldr	r1, .L238+88
 3105 0f6e 284C     		ldr	r4, .L238+92
 3106              	.LVL323:
 3107 0f70 2B59     		ldr	r3, [r5, r4]
 3108 0f72 AA68     		ldr	r2, [r5, #8]
 3109 0f74 0092     		str	r2, [sp]
 3110 0f76 0720     		mov	r0, #7
 3111 0f78 5246     		mov	r2, sl
 3112 0f7a FFF7FEFF 		bl	ppp_trace
 3113              		.loc 1 1548 0
 3114 0f7e 2C59     		ldr	r4, [r5, r4]
 3115 0f80 002C     		cmp	r4, #0
 3116 0f82 09D0     		beq	.L233
 3117              		.loc 1 1549 0
 3118 0f84 234B     		ldr	r3, .L238+96
 3119 0f86 E858     		ldr	r0, [r5, r3]
 3120 0f88 A968     		ldr	r1, [r5, #8]
 3121 0f8a 0029     		cmp	r1, #0
 3122 0f8c 01D1     		bne	.L234
 3123 0f8e 0821     		mov	r1, #8
 3124 0f90 4942     		neg	r1, r1
 3125              	.L234:
 3126 0f92 0022     		mov	r2, #0
 3127 0f94 00F00EFA 		bl	.L108
 3128              	.L233:
 3129              		.loc 1 1552 0
 3130 0f98 0023     		mov	r3, #0
 3131 0f9a 2B70     		strb	r3, [r5]
 3132              		.loc 1 1553 0
 3133 0f9c FFF7FEFF 		bl	sys_thread_suicid
 3134              		.loc 1 1554 0
 3135 0fa0 07B0     		add	sp, sp, #28
 3136              		@ sp needed for prologue
 3137              	.LVL324:
 3138              	.LVL325:
 3139              	.LVL326:
 3140              	.LVL327:
 3141 0fa2 3CBC     		pop	{r2, r3, r4, r5}
 3142 0fa4 9046     		mov	r8, r2
 3143 0fa6 9946     		mov	r9, r3
 3144 0fa8 A246     		mov	sl, r4
 3145 0faa AB46     		mov	fp, r5
 3146 0fac F0BC     		pop	{r4, r5, r6, r7}
 3147 0fae 01BC     		pop	{r0}
 3148 0fb0 0047     		bx	r0
 3149              	.L239:
 3150 0fb2 C046     		.align	2
 3151              	.L238:
 3152 0fb4 00000000 		.word	pppControl
 3153 0fb8 4C040000 		.word	.LC105
 3154 0fbc 00000000 		.word	pppStartCB
 3155 0fc0 6C040000 		.word	.LC108
 3156 0fc4 00000000 		.word	lcp_phase
 3157 0fc8 1C020000 		.word	pppACCMMask
 3158 0fcc B8F0FFFF 		.word	-3912
 3159 0fd0 7C040000 		.word	.LC110
 3160 0fd4 00000000 		.word	pppStopCB
 3161 0fd8 A8040000 		.word	.LC113
 3162 0fdc 00000000 		.word	pppHupCB
 3163 0fe0 D0040000 		.word	.LC116
 3164 0fe4 1C000000 		.word	fcstab
 3165 0fe8 F0040000 		.word	.LC119
 3166 0fec 00000000 		.word	lwip_stats
 3167 0ff0 20050000 		.word	.LC122
 3168 0ff4 00000000 		.word	pppInput
 3169 0ff8 58050000 		.word	.LC125
 3170 0ffc 94050000 		.word	.LC127
 3171 1000 00000000 		.word	.L225
 3172 1004 BC050000 		.word	.LC130
 3173 1008 DC050000 		.word	.LC134
 3174 100c FC050000 		.word	.LC136
 3175 1010 F4110000 		.word	4596
 3176 1014 F8110000 		.word	4600
 3177              	.LFE321:
 3179              		.section	.rodata.str1.4
 3180 062b 00       		.align	2
 3181              	.LC138:
 3182 062c 70707048 		.ascii	"pppHupCB: unit %d\012\000"
 3182      75704342 
 3182      3A20756E 
 3182      69742025 
 3182      640A00
 3183              		.text
 3184              		.align	2
 3185              		.code	16
 3186              		.thumb_func
 3188              	pppHupCB:
 3189              	.LFB295:
 3190              		.loc 1 369 0
 3191 1018 10B5     		push	{r4, lr}
 3192              	.LCFI36:
 3193              	.LVL328:
 3194 101a 041C     		mov	r4, r0
 3195              		.loc 1 372 0
 3196 101c 0649     		ldr	r1, .L242
 3197 101e 0720     		mov	r0, #7
 3198              	.LVL329:
 3199 1020 221C     		mov	r2, r4
 3200 1022 FFF7FEFF 		bl	ppp_trace
 3201              		.loc 1 373 0
 3202 1026 201C     		mov	r0, r4
 3203 1028 FFF7FEFF 		bl	lcp_lowerdown
 3204              		.loc 1 374 0
 3205 102c 201C     		mov	r0, r4
 3206 102e FFF7FEFF 		bl	link_terminated
 3207              		.loc 1 375 0
 3208              		@ sp needed for prologue
 3209              	.LVL330:
 3210 1032 10BC     		pop	{r4}
 3211 1034 01BC     		pop	{r0}
 3212 1036 0047     		bx	r0
 3213              	.L243:
 3214              		.align	2
 3215              	.L242:
 3216 1038 2C060000 		.word	.LC138
 3217              	.LFE295:
 3219              		.section	.rodata.str1.4
 3220 063f 00       		.align	2
 3221              	.LC140:
 3222 0640 70707053 		.ascii	"pppStopCB: unit %d\012\000"
 3222      746F7043 
 3222      423A2075 
 3222      6E697420 
 3222      25640A00 
 3223              		.align	2
 3224              	.LC142:
 3225 0654 55736572 		.ascii	"User request\000"
 3225      20726571 
 3225      75657374 
 3225      00
 3226              		.text
 3227              		.align	2
 3228              		.code	16
 3229              		.thumb_func
 3231              	pppStopCB:
 3232              	.LFB294:
 3233              		.loc 1 360 0
 3234 103c 10B5     		push	{r4, lr}
 3235              	.LCFI37:
 3236              	.LVL331:
 3237 103e 041C     		mov	r4, r0
 3238              		.loc 1 363 0
 3239 1040 0549     		ldr	r1, .L246
 3240 1042 0720     		mov	r0, #7
 3241              	.LVL332:
 3242 1044 221C     		mov	r2, r4
 3243 1046 FFF7FEFF 		bl	ppp_trace
 3244              		.loc 1 364 0
 3245 104a 0449     		ldr	r1, .L246+4
 3246 104c 201C     		mov	r0, r4
 3247 104e FFF7FEFF 		bl	lcp_close
 3248              		.loc 1 365 0
 3249              		@ sp needed for prologue
 3250              	.LVL333:
 3251 1052 10BC     		pop	{r4}
 3252 1054 01BC     		pop	{r0}
 3253 1056 0047     		bx	r0
 3254              	.L247:
 3255              		.align	2
 3256              	.L246:
 3257 1058 40060000 		.word	.LC140
 3258 105c 54060000 		.word	.LC142
 3259              	.LFE294:
 3261              		.section	.rodata.str1.4
 3262 0661 000000   		.align	2
 3263              	.LC144:
 3264 0664 70707053 		.ascii	"pppStartCB: unit %d\012\000"
 3264      74617274 
 3264      43423A20 
 3264      756E6974 
 3264      2025640A 
 3265              		.text
 3266              		.align	2
 3267              		.code	16
 3268              		.thumb_func
 3270              	pppStartCB:
 3271              	.LFB293:
 3272              		.loc 1 350 0
 3273 1060 10B5     		push	{r4, lr}
 3274              	.LCFI38:
 3275              	.LVL334:
 3276 1062 041C     		mov	r4, r0
 3277              		.loc 1 353 0
 3278 1064 0649     		ldr	r1, .L250
 3279 1066 0720     		mov	r0, #7
 3280              	.LVL335:
 3281 1068 221C     		mov	r2, r4
 3282 106a FFF7FEFF 		bl	ppp_trace
 3283              		.loc 1 354 0
 3284 106e 201C     		mov	r0, r4
 3285 1070 FFF7FEFF 		bl	lcp_lowerup
 3286              		.loc 1 355 0
 3287 1074 201C     		mov	r0, r4
 3288 1076 FFF7FEFF 		bl	lcp_open
 3289              		.loc 1 356 0
 3290              		@ sp needed for prologue
 3291              	.LVL336:
 3292 107a 10BC     		pop	{r4}
 3293 107c 01BC     		pop	{r0}
 3294 107e 0047     		bx	r0
 3295              	.L251:
 3296              		.align	2
 3297              	.L250:
 3298 1080 64060000 		.word	.LC144
 3299              	.LFE293:
 3301              		.align	2
 3302              		.global	pppSetAuth
 3303              		.code	16
 3304              		.thumb_func
 3306              	pppSetAuth:
 3307              	.LFB297:
 3308              		.loc 1 420 0
 3309 1084 70B5     		push	{r4, r5, r6, lr}
 3310              	.LCFI39:
 3311              	.LVL337:
 3312 1086 0D1C     		mov	r5, r1
 3313 1088 161C     		mov	r6, r2
 3314              		.loc 1 421 0
 3315 108a 0228     		cmp	r0, #2
 3316 108c 17D0     		beq	.L255
 3317              	.LVL338:
 3318 108e 0328     		cmp	r0, #3
 3319 1090 1FD0     		beq	.L256
 3320 1092 0128     		cmp	r0, #1
 3321 1094 09D0     		beq	.L254
 3322              		.loc 1 428 0
 3323 1096 2749     		ldr	r1, .L263
 3324 1098 0B78     		ldrb	r3, [r1]
 3325 109a 0822     		mov	r2, #8
 3326 109c 9343     		bic	r3, r3, r2
 3327 109e 0B70     		strb	r3, [r1]
 3328              		.loc 1 430 0
 3329 10a0 0B78     		ldrb	r3, [r1]
 3330 10a2 1022     		mov	r2, #16
 3331 10a4 1343     		orr	r3, r3, r2
 3332 10a6 0B70     		strb	r3, [r1]
 3333 10a8 1CE0     		b	.L257
 3334              	.LVL339:
 3335              	.L254:
 3336              		.loc 1 453 0
 3337 10aa 2249     		ldr	r1, .L263
 3338 10ac 0B78     		ldrb	r3, [r1]
 3339 10ae 0822     		mov	r2, #8
 3340 10b0 9343     		bic	r3, r3, r2
 3341 10b2 0B70     		strb	r3, [r1]
 3342              		.loc 1 454 0
 3343 10b4 0B78     		ldrb	r3, [r1]
 3344 10b6 1022     		mov	r2, #16
 3345 10b8 9343     		bic	r3, r3, r2
 3346 10ba 0B70     		strb	r3, [r1]
 3347 10bc 12E0     		b	.L257
 3348              	.LVL340:
 3349              	.L255:
 3350              		.loc 1 458 0
 3351 10be 1D49     		ldr	r1, .L263
 3352 10c0 0B78     		ldrb	r3, [r1]
 3353 10c2 0822     		mov	r2, #8
 3354 10c4 9343     		bic	r3, r3, r2
 3355 10c6 0B70     		strb	r3, [r1]
 3356              		.loc 1 459 0
 3357 10c8 0B78     		ldrb	r3, [r1]
 3358 10ca 1022     		mov	r2, #16
 3359 10cc 1343     		orr	r3, r3, r2
 3360 10ce 0B70     		strb	r3, [r1]
 3361 10d0 08E0     		b	.L257
 3362              	.LVL341:
 3363              	.L256:
 3364              		.loc 1 463 0
 3365 10d2 1849     		ldr	r1, .L263
 3366 10d4 0B78     		ldrb	r3, [r1]
 3367 10d6 0822     		mov	r2, #8
 3368 10d8 1343     		orr	r3, r3, r2
 3369 10da 0B70     		strb	r3, [r1]
 3370              		.loc 1 464 0
 3371 10dc 0B78     		ldrb	r3, [r1]
 3372 10de 1022     		mov	r2, #16
 3373 10e0 9343     		bic	r3, r3, r2
 3374 10e2 0B70     		strb	r3, [r1]
 3375              	.L257:
 3376              		.loc 1 468 0
 3377 10e4 002D     		cmp	r5, #0
 3378 10e6 0CD0     		beq	.L258
 3379              		.loc 1 469 0
 3380 10e8 134C     		ldr	r4, .L263+4
 3381 10ea 8022     		mov	r2, #128
 3382 10ec 5200     		lsl	r2, r2, #1
 3383 10ee 201C     		mov	r0, r4
 3384              	.LVL342:
 3385 10f0 291C     		mov	r1, r5
 3386 10f2 FFF7FEFF 		bl	strncpy
 3387              		.loc 1 470 0
 3388 10f6 083C     		sub	r4, r4, #8
 3389 10f8 8423     		mov	r3, #132
 3390 10fa 5B00     		lsl	r3, r3, #1
 3391 10fc 0022     		mov	r2, #0
 3392 10fe E254     		strb	r2, [r4, r3]
 3393 1100 02E0     		b	.L259
 3394              	.LVL343:
 3395              	.L258:
 3396              		.loc 1 472 0
 3397 1102 0C4A     		ldr	r2, .L263
 3398 1104 0023     		mov	r3, #0
 3399 1106 1372     		strb	r3, [r2, #8]
 3400              	.L259:
 3401              		.loc 1 475 0
 3402 1108 002E     		cmp	r6, #0
 3403 110a 0CD0     		beq	.L260
 3404              		.loc 1 476 0
 3405 110c 0B4C     		ldr	r4, .L263+8
 3406 110e 8022     		mov	r2, #128
 3407 1110 5200     		lsl	r2, r2, #1
 3408 1112 201C     		mov	r0, r4
 3409              	.LVL344:
 3410 1114 311C     		mov	r1, r6
 3411 1116 FFF7FEFF 		bl	strncpy
 3412              		.loc 1 477 0
 3413 111a 094B     		ldr	r3, .L263+12
 3414 111c E418     		add	r4, r4, r3
 3415 111e 0022     		mov	r2, #0
 3416 1120 084B     		ldr	r3, .L263+16
 3417 1122 E254     		strb	r2, [r4, r3]
 3418 1124 03E0     		b	.L262
 3419              	.LVL345:
 3420              	.L260:
 3421              		.loc 1 479 0
 3422 1126 0349     		ldr	r1, .L263
 3423 1128 0022     		mov	r2, #0
 3424 112a 074B     		ldr	r3, .L263+20
 3425 112c CA54     		strb	r2, [r1, r3]
 3426              	.L262:
 3427              		.loc 1 481 0
 3428              		@ sp needed for prologue
 3429              	.LVL346:
 3430              	.LVL347:
 3431 112e 70BC     		pop	{r4, r5, r6}
 3432 1130 01BC     		pop	{r0}
 3433 1132 0047     		bx	r0
 3434              	.L264:
 3435              		.align	2
 3436              	.L263:
 3437 1134 00000000 		.word	ppp_settings
 3438 1138 08000000 		.word	ppp_settings+8
 3439 113c 09010000 		.word	ppp_settings+265
 3440 1140 F7FEFFFF 		.word	-265
 3441 1144 09020000 		.word	521
 3442 1148 09010000 		.word	265
 3443              	.LFE297:
 3445              		.align	2
 3446              		.global	pppInit
 3447              		.code	16
 3448              		.thumb_func
 3450              	pppInit:
 3451              	.LFB296:
 3452              		.loc 1 386 0
 3453 114c 10B5     		push	{r4, lr}
 3454              	.LCFI40:
 3455              		.loc 1 390 0
 3456 114e 144C     		ldr	r4, .L270
 3457 1150 201C     		mov	r0, r4
 3458 1152 0021     		mov	r1, #0
 3459 1154 134A     		ldr	r2, .L270+4
 3460 1156 FFF7FEFF 		bl	memset
 3461              		.loc 1 394 0
 3462 115a 2378     		ldrb	r3, [r4]
 3463 115c 4022     		mov	r2, #64
 3464 115e 9343     		bic	r3, r3, r2
 3465 1160 2370     		strb	r3, [r4]
 3466              		.loc 1 396 0
 3467 1162 0020     		mov	r0, #0
 3468 1164 0021     		mov	r1, #0
 3469 1166 0022     		mov	r2, #0
 3470 1168 FFF7FEFF 		bl	pppSetAuth
 3471              		.loc 1 398 0
 3472 116c FFF7FEFF 		bl	magicInit
 3473              		.loc 1 400 0
 3474 1170 0D48     		ldr	r0, .L270+8
 3475 1172 FFF7FEFF 		bl	htonl
 3476 1176 0D4B     		ldr	r3, .L270+12
 3477 1178 1860     		str	r0, [r3]
 3478              		.loc 1 403 0
 3479 117a 0D4A     		ldr	r2, .L270+16
 3480 117c 0023     		mov	r3, #0
 3481 117e 1370     		strb	r3, [r2]
 3482              		.loc 1 408 0
 3483 1180 0C4B     		ldr	r3, .L270+20
 3484 1182 1B68     		ldr	r3, [r3]
 3485              	.LVL348:
 3486 1184 002B     		cmp	r3, #0
 3487 1186 07D0     		beq	.L268
 3488 1188 0B4C     		ldr	r4, .L270+24
 3489              	.L267:
 3490              		.loc 1 409 0
 3491 118a 5B68     		ldr	r3, [r3, #4]
 3492              	.LVL349:
 3493 118c 0020     		mov	r0, #0
 3494 118e 00F010F9 		bl	.L191
 3495              		.loc 1 408 0
 3496 1192 08CC     		ldmia	r4!, {r3}
 3497              	.LVL350:
 3498 1194 002B     		cmp	r3, #0
 3499 1196 F8D1     		bne	.L267
 3500              	.L268:
 3501              		.loc 1 416 0
 3502              		@ sp needed for prologue
 3503 1198 10BC     		pop	{r4}
 3504 119a 01BC     		pop	{r0}
 3505 119c 0047     		bx	r0
 3506              	.L271:
 3507 119e C046     		.align	2
 3508              	.L270:
 3509 11a0 00000000 		.word	ppp_settings
 3510 11a4 0C040000 		.word	1036
 3511 11a8 00FFFFFF 		.word	-256
 3512 11ac 00000000 		.word	subnetMask
 3513 11b0 00000000 		.word	pppControl
 3514 11b4 00000000 		.word	ppp_protocols
 3515 11b8 04000000 		.word	ppp_protocols+4
 3516              	.LFE296:
 3518              		.section	.rodata.str1.4
 3519 0679 000000   		.align	2
 3520              	.LC154:
 3521 067c 7070704D 		.ascii	"pppMainWakeup: unit %d\012\000"
 3521      61696E57 
 3521      616B6575 
 3521      703A2075 
 3521      6E697420 
 3522              		.text
 3523              		.align	2
 3524              		.global	pppMainWakeup
 3525              		.code	16
 3526              		.thumb_func
 3528              	pppMainWakeup:
 3529              	.LFB290:
 3530              		.loc 1 302 0
 3531 11bc 10B5     		push	{r4, lr}
 3532              	.LCFI41:
 3533              	.LVL351:
 3534 11be 041C     		mov	r4, r0
 3535              		.loc 1 303 0
 3536 11c0 0849     		ldr	r1, .L274
 3537 11c2 0720     		mov	r0, #7
 3538              	.LVL352:
 3539 11c4 221C     		mov	r2, r4
 3540 11c6 FFF7FEFF 		bl	ppp_trace
 3541              		.loc 1 304 0
 3542 11ca 074A     		ldr	r2, .L274+4
 3543 11cc E300     		lsl	r3, r4, #3
 3544 11ce 1B19     		add	r3, r3, r4
 3545 11d0 DB01     		lsl	r3, r3, #7
 3546 11d2 1B1B     		sub	r3, r3, r4
 3547 11d4 9B00     		lsl	r3, r3, #2
 3548 11d6 D218     		add	r2, r2, r3
 3549 11d8 D068     		ldr	r0, [r2, #12]
 3550 11da FFF7FEFF 		bl	sio_read_abort
 3551              		.loc 1 305 0
 3552              		@ sp needed for prologue
 3553              	.LVL353:
 3554 11de 10BC     		pop	{r4}
 3555 11e0 01BC     		pop	{r0}
 3556 11e2 0047     		bx	r0
 3557              	.L275:
 3558              		.align	2
 3559              	.L274:
 3560 11e4 7C060000 		.word	.LC154
 3561 11e8 00000000 		.word	pppControl
 3562              	.LFE290:
 3564              		.align	2
 3565              		.global	pppSigHUP
 3566              		.code	16
 3567              		.thumb_func
 3569              	pppSigHUP:
 3570              	.LFB300:
 3571              		.loc 1 698 0
 3572 11ec 00B5     		push	{lr}
 3573              	.LCFI42:
 3574              	.LVL354:
 3575              		.loc 1 709 0
 3576 11ee C300     		lsl	r3, r0, #3
 3577 11f0 1B18     		add	r3, r3, r0
 3578 11f2 DB01     		lsl	r3, r3, #7
 3579 11f4 1B1A     		sub	r3, r3, r0
 3580 11f6 9B00     		lsl	r3, r3, #2
 3581 11f8 034A     		ldr	r2, .L278
 3582 11fa D218     		add	r2, r2, r3
 3583 11fc 0123     		mov	r3, #1
 3584 11fe 5361     		str	r3, [r2, #20]
 3585              		.loc 1 710 0
 3586 1200 FFF7FEFF 		bl	pppMainWakeup
 3587              	.LVL355:
 3588              		.loc 1 713 0
 3589              		@ sp needed for prologue
 3590 1204 01BC     		pop	{r0}
 3591 1206 0047     		bx	r0
 3592              	.L279:
 3593              		.align	2
 3594              	.L278:
 3595 1208 00000000 		.word	pppControl
 3596              	.LFE300:
 3598              		.align	2
 3599              		.global	pppClose
 3600              		.code	16
 3601              		.thumb_func
 3603              	pppClose:
 3604              	.LFB299:
 3605              		.loc 1 665 0
 3606 120c 30B5     		push	{r4, r5, lr}
 3607              	.LCFI43:
 3608              	.LVL356:
 3609 120e 051C     		mov	r5, r0
 3610              		.loc 1 666 0
 3611 1210 C300     		lsl	r3, r0, #3
 3612 1212 1B18     		add	r3, r3, r0
 3613 1214 DB01     		lsl	r3, r3, #7
 3614 1216 1B1A     		sub	r3, r3, r0
 3615 1218 9B00     		lsl	r3, r3, #2
 3616 121a 0C4C     		ldr	r4, .L286
 3617 121c E418     		add	r4, r4, r3
 3618              	.LVL357:
 3619              		.loc 1 680 0
 3620 121e 0123     		mov	r3, #1
 3621 1220 2361     		str	r3, [r4, #16]
 3622              		.loc 1 681 0
 3623 1222 FFF7FEFF 		bl	pppMainWakeup
 3624              	.LVL358:
 3625              		.loc 1 685 0
 3626 1226 0A4B     		ldr	r3, .L286+4
 3627 1228 E358     		ldr	r3, [r4, r3]
 3628 122a 002B     		cmp	r3, #0
 3629 122c 0AD1     		bne	.L282
 3630 122e 04E0     		b	.L285
 3631              	.L283:
 3632              		.loc 1 687 0
 3633 1230 FA20     		mov	r0, #250
 3634 1232 4000     		lsl	r0, r0, #1
 3635 1234 FFF7FEFF 		bl	sys_msleep
 3636 1238 04E0     		b	.L282
 3637              	.L285:
 3638              		.loc 1 686 0
 3639 123a 064B     		ldr	r3, .L286+8
 3640 123c AA00     		lsl	r2, r5, #2
 3641 123e D358     		ldr	r3, [r2, r3]
 3642 1240 002B     		cmp	r3, #0
 3643 1242 F5D1     		bne	.L283
 3644              	.L282:
 3645              		.loc 1 693 0
 3646 1244 0020     		mov	r0, #0
 3647              		@ sp needed for prologue
 3648              	.LVL359:
 3649              	.LVL360:
 3650 1246 30BC     		pop	{r4, r5}
 3651 1248 02BC     		pop	{r1}
 3652 124a 0847     		bx	r1
 3653              	.L287:
 3654              		.align	2
 3655              	.L286:
 3656 124c 00000000 		.word	pppControl
 3657 1250 F4110000 		.word	4596
 3658 1254 00000000 		.word	lcp_phase
 3659              	.LFE299:
 3661              		.section	.rodata.str1.4
 3662              		.align	2
 3663              	.LC164:
 3664 0694 7070704D 		.ascii	"pppMain\000"
 3664      61696E00 
 3665              		.text
 3666              		.align	2
 3667              		.global	pppOverSerialOpen
 3668              		.code	16
 3669              		.thumb_func
 3671              	pppOverSerialOpen:
 3672              	.LFB298:
 3673              		.loc 1 493 0
 3674 1258 F0B5     		push	{r4, r5, r6, r7, lr}
 3675              	.LCFI44:
 3676 125a 4746     		mov	r7, r8
 3677 125c 80B4     		push	{r7}
 3678              	.LCFI45:
 3679              	.LVL361:
 3680 125e 81B0     		sub	sp, sp, #4
 3681              	.LCFI46:
 3682 1260 051C     		mov	r5, r0
 3683 1262 0E1C     		mov	r6, r1
 3684 1264 171C     		mov	r7, r2
 3685              		.loc 1 498 0
 3686 1266 3D4B     		ldr	r3, .L297
 3687 1268 1B78     		ldrb	r3, [r3]
 3688 126a 002B     		cmp	r3, #0
 3689 126c 02D0     		beq	.L289
 3690              	.LVL362:
 3691 126e 0224     		mov	r4, #2
 3692              	.LVL363:
 3693 1270 6442     		neg	r4, r4
 3694 1272 6BE0     		b	.L290
 3695              	.LVL364:
 3696              	.L289:
 3697              		.loc 1 508 0
 3698 1274 394C     		ldr	r4, .L297
 3699 1276 0123     		mov	r3, #1
 3700 1278 2370     		strb	r3, [r4]
 3701              		.loc 1 510 0
 3702 127a 0020     		mov	r0, #0
 3703 127c FFF7FEFF 		bl	lcp_init
 3704              		.loc 1 512 0
 3705 1280 E560     		str	r5, [r4, #12]
 3706              		.loc 1 516 0
 3707 1282 0025     		mov	r5, #0
 3708              	.LVL365:
 3709 1284 2561     		str	r5, [r4, #16]
 3710              		.loc 1 517 0
 3711 1286 6561     		str	r5, [r4, #20]
 3712              		.loc 1 518 0
 3713 1288 6560     		str	r5, [r4, #4]
 3714              		.loc 1 519 0
 3715 128a A560     		str	r5, [r4, #8]
 3716              		.loc 1 520 0
 3717 128c 2562     		str	r5, [r4, #32]
 3718              		.loc 1 521 0
 3719 128e A561     		str	r5, [r4, #24]
 3720              		.loc 1 522 0
 3721 1290 E561     		str	r5, [r4, #28]
 3722              		.loc 1 523 0
 3723 1292 2423     		mov	r3, #36
 3724 1294 E554     		strb	r5, [r4, r3]
 3725              		.loc 1 524 0
 3726 1296 A563     		str	r5, [r4, #56]
 3727              		.loc 1 527 0
 3728 1298 E567     		str	r5, [r4, #124]
 3729              		.loc 1 528 0
 3730 129a 201C     		mov	r0, r4
 3731 129c 8030     		add	r0, r0, #128
 3732 129e FFF7FEFF 		bl	vj_compress_init
 3733              		.loc 1 535 0
 3734 12a2 231C     		mov	r3, r4
 3735 12a4 3C33     		add	r3, r3, #60
 3736 12a6 1D60     		str	r5, [r3]
 3737 12a8 0433     		add	r3, r3, #4
 3738 12aa 1D60     		str	r5, [r3]
 3739 12ac 0433     		add	r3, r3, #4
 3740 12ae 1D60     		str	r5, [r3]
 3741 12b0 0433     		add	r3, r3, #4
 3742 12b2 1D60     		str	r5, [r3]
 3743 12b4 0433     		add	r3, r3, #4
 3744 12b6 1D60     		str	r5, [r3]
 3745 12b8 0433     		add	r3, r3, #4
 3746 12ba 1D60     		str	r5, [r3]
 3747 12bc 0433     		add	r3, r3, #4
 3748 12be 1D60     		str	r5, [r3]
 3749 12c0 0433     		add	r3, r3, #4
 3750 12c2 1D60     		str	r5, [r3]
 3751              		.loc 1 536 0
 3752 12c4 6022     		mov	r2, #96
 3753 12c6 4B23     		mov	r3, #75
 3754 12c8 E254     		strb	r2, [r4, r3]
 3755              		.loc 1 537 0
 3756 12ca 231C     		mov	r3, r4
 3757 12cc 5C33     		add	r3, r3, #92
 3758 12ce 1D60     		str	r5, [r3]
 3759 12d0 0433     		add	r3, r3, #4
 3760 12d2 1D60     		str	r5, [r3]
 3761 12d4 0433     		add	r3, r3, #4
 3762 12d6 1D60     		str	r5, [r3]
 3763 12d8 0433     		add	r3, r3, #4
 3764 12da 1D60     		str	r5, [r3]
 3765 12dc 0433     		add	r3, r3, #4
 3766 12de 1D60     		str	r5, [r3]
 3767 12e0 0433     		add	r3, r3, #4
 3768 12e2 1D60     		str	r5, [r3]
 3769 12e4 0433     		add	r3, r3, #4
 3770 12e6 1D60     		str	r5, [r3]
 3771 12e8 0433     		add	r3, r3, #4
 3772 12ea 1D60     		str	r5, [r3]
 3773              		.loc 1 538 0
 3774 12ec 6B23     		mov	r3, #107
 3775 12ee E254     		strb	r2, [r4, r3]
 3776              		.loc 1 540 0
 3777 12f0 1B4B     		ldr	r3, .L297+4
 3778 12f2 E650     		str	r6, [r4, r3]
 3779              		.loc 1 541 0
 3780 12f4 0433     		add	r3, r3, #4
 3781 12f6 E750     		str	r7, [r4, r3]
 3782              		.loc 1 543 0
 3783 12f8 1A48     		ldr	r0, .L297+8
 3784 12fa 1B49     		ldr	r1, .L297+12
 3785 12fc FA23     		mov	r3, #250
 3786 12fe 5B00     		lsl	r3, r3, #1
 3787 1300 0922     		mov	r2, #9
 3788 1302 0092     		str	r2, [sp]
 3789 1304 0022     		mov	r2, #0
 3790 1306 FFF7FEFF 		bl	sys_thread_new
 3791              		.loc 1 544 0
 3792 130a 002E     		cmp	r6, #0
 3793 130c 01D0     		beq	.L291
 3794 130e 0024     		mov	r4, #0
 3795              	.LVL366:
 3796 1310 1CE0     		b	.L290
 3797              	.LVL367:
 3798              	.L291:
 3799 1312 0024     		mov	r4, #0
 3800              	.LVL368:
 3801              		.loc 1 545 0
 3802 1314 114F     		ldr	r7, .L297
 3803              	.LVL369:
 3804              		.loc 1 546 0
 3805 1316 FA25     		mov	r5, #250
 3806 1318 6D00     		lsl	r5, r5, #1
 3807              		.loc 1 547 0
 3808 131a 144E     		ldr	r6, .L297+16
 3809              	.LVL370:
 3810              		.loc 1 549 0
 3811 131c B846     		mov	r8, r7
 3812 131e 12E0     		b	.L296
 3813              	.L294:
 3814              		.loc 1 546 0
 3815 1320 281C     		mov	r0, r5
 3816 1322 FFF7FEFF 		bl	sys_msleep
 3817              		.loc 1 547 0
 3818 1326 A300     		lsl	r3, r4, #2
 3819 1328 9B59     		ldr	r3, [r3, r6]
 3820 132a 002B     		cmp	r3, #0
 3821 132c 0BD1     		bne	.L296
 3822              		.loc 1 548 0
 3823 132e 201C     		mov	r0, r4
 3824 1330 FFF7FEFF 		bl	pppClose
 3825              		.loc 1 549 0
 3826 1334 4346     		mov	r3, r8
 3827 1336 9C68     		ldr	r4, [r3, #8]
 3828 1338 002C     		cmp	r4, #0
 3829 133a 02D1     		bne	.L293
 3830 133c 0624     		mov	r4, #6
 3831 133e 6442     		neg	r4, r4
 3832 1340 04E0     		b	.L290
 3833              	.L293:
 3834              		.loc 1 545 0
 3835 1342 002C     		cmp	r4, #0
 3836 1344 02DB     		blt	.L290
 3837              	.L296:
 3838 1346 7B68     		ldr	r3, [r7, #4]
 3839 1348 002B     		cmp	r3, #0
 3840 134a E9D0     		beq	.L294
 3841              	.LVL371:
 3842              	.L290:
 3843              		.loc 1 560 0
 3844 134c 201C     		mov	r0, r4
 3845 134e 01B0     		add	sp, sp, #4
 3846              		@ sp needed for prologue
 3847              	.LVL372:
 3848              	.LVL373:
 3849              	.LVL374:
 3850              	.LVL375:
 3851 1350 04BC     		pop	{r2}
 3852 1352 9046     		mov	r8, r2
 3853 1354 F0BC     		pop	{r4, r5, r6, r7}
 3854 1356 02BC     		pop	{r1}
 3855 1358 0847     		bx	r1
 3856              	.L298:
 3857 135a C046     		.align	2
 3858              	.L297:
 3859 135c 00000000 		.word	pppControl
 3860 1360 F4110000 		.word	4596
 3861 1364 94060000 		.word	.LC164
 3862 1368 00000000 		.word	pppMain
 3863 136c 00000000 		.word	lcp_phase
 3864              	.LFE298:
 3866              		.section	.rodata.str1.4
 3867              		.align	2
 3868              	.LC169:
 3869 069c 7070704C 		.ascii	"pppLinkDown: unit %d\012\000"
 3869      696E6B44 
 3869      6F776E3A 
 3869      20756E69 
 3869      74202564 
 3870              		.text
 3871              		.align	2
 3872              		.global	pppLinkDown
 3873              		.code	16
 3874              		.thumb_func
 3876              	pppLinkDown:
 3877              	.LFB292:
 3878              		.loc 1 327 0
 3879 1370 10B5     		push	{r4, lr}
 3880              	.LCFI47:
 3881              	.LVL376:
 3882 1372 041C     		mov	r4, r0
 3883              		.loc 1 328 0
 3884 1374 0549     		ldr	r1, .L301
 3885 1376 0720     		mov	r0, #7
 3886              	.LVL377:
 3887 1378 221C     		mov	r2, r4
 3888 137a FFF7FEFF 		bl	ppp_trace
 3889              		.loc 1 337 0
 3890 137e 201C     		mov	r0, r4
 3891 1380 FFF7FEFF 		bl	pppMainWakeup
 3892              		.loc 1 340 0
 3893              		@ sp needed for prologue
 3894              	.LVL378:
 3895 1384 10BC     		pop	{r4}
 3896 1386 01BC     		pop	{r0}
 3897 1388 0047     		bx	r0
 3898              	.L302:
 3899 138a C046     		.align	2
 3900              	.L301:
 3901 138c 9C060000 		.word	.LC169
 3902              	.LFE292:
 3904              		.section	.rodata.str1.4
 3905 06b2 0000     		.align	2
 3906              	.LC171:
 3907 06b4 7070704C 		.ascii	"pppLinkTerminated: unit %d\012\000"
 3907      696E6B54 
 3907      65726D69 
 3907      6E617465 
 3907      643A2075 
 3908              		.text
 3909              		.align	2
 3910              		.global	pppLinkTerminated
 3911              		.code	16
 3912              		.thumb_func
 3914              	pppLinkTerminated:
 3915              	.LFB291:
 3916              		.loc 1 310 0
 3917 1390 10B5     		push	{r4, lr}
 3918              	.LCFI48:
 3919              	.LVL379:
 3920 1392 041C     		mov	r4, r0
 3921              		.loc 1 311 0
 3922 1394 0549     		ldr	r1, .L305
 3923 1396 0720     		mov	r0, #7
 3924              	.LVL380:
 3925 1398 221C     		mov	r2, r4
 3926 139a FFF7FEFF 		bl	ppp_trace
 3927              		.loc 1 320 0
 3928 139e 201C     		mov	r0, r4
 3929 13a0 FFF7FEFF 		bl	pppMainWakeup
 3930              		.loc 1 323 0
 3931              		@ sp needed for prologue
 3932              	.LVL381:
 3933 13a4 10BC     		pop	{r4}
 3934 13a6 01BC     		pop	{r0}
 3935 13a8 0047     		bx	r0
 3936              	.L306:
 3937 13aa C046     		.align	2
 3938              	.L305:
 3939 13ac B4060000 		.word	.LC171
 3940              	.LFE291:
 3942              		.global	ppp_protocols
 3943              		.data
 3944              		.align	2
 3947              	ppp_protocols:
 3948 0000 00000000 		.word	lcp_protent
 3949 0004 00000000 		.word	pap_protent
 3950 0008 00000000 		.word	chap_protent
 3951 000c 00000000 		.word	ipcp_protent
 3952 0010 00000000 		.word	0
 3953              		.section	.rodata
 3954              		.align	1
 3957              	fcstab:
 3958 001c 0000     		.short	0
 3959 001e 8911     		.short	4489
 3960 0020 1223     		.short	8978
 3961 0022 9B32     		.short	12955
 3962 0024 2446     		.short	17956
 3963 0026 AD57     		.short	22445
 3964 0028 3665     		.short	25910
 3965 002a BF74     		.short	29887
 3966 002c 488C     		.short	-29624
 3967 002e C19D     		.short	-25151
 3968 0030 5AAF     		.short	-20646
 3969 0032 D3BE     		.short	-16685
 3970 0034 6CCA     		.short	-13716
 3971 0036 E5DB     		.short	-9243
 3972 0038 7EE9     		.short	-5762
 3973 003a F7F8     		.short	-1801
 3974 003c 8110     		.short	4225
 3975 003e 0801     		.short	264
 3976 0040 9333     		.short	13203
 3977 0042 1A22     		.short	8730
 3978 0044 A556     		.short	22181
 3979 0046 2C47     		.short	18220
 3980 0048 B775     		.short	30135
 3981 004a 3E64     		.short	25662
 3982 004c C99C     		.short	-25399
 3983 004e 408D     		.short	-29376
 3984 0050 DBBF     		.short	-16421
 3985 0052 52AE     		.short	-20910
 3986 0054 EDDA     		.short	-9491
 3987 0056 64CB     		.short	-13468
 3988 0058 FFF9     		.short	-1537
 3989 005a 76E8     		.short	-6026
 3990 005c 0221     		.short	8450
 3991 005e 8B30     		.short	12427
 3992 0060 1002     		.short	528
 3993 0062 9913     		.short	5017
 3994 0064 2667     		.short	26406
 3995 0066 AF76     		.short	30383
 3996 0068 3444     		.short	17460
 3997 006a BD55     		.short	21949
 3998 006c 4AAD     		.short	-21174
 3999 006e C3BC     		.short	-17213
 4000 0070 588E     		.short	-29096
 4001 0072 D19F     		.short	-24623
 4002 0074 6EEB     		.short	-5266
 4003 0076 E7FA     		.short	-1305
 4004 0078 7CC8     		.short	-14212
 4005 007a F5D9     		.short	-9739
 4006 007c 8331     		.short	12675
 4007 007e 0A20     		.short	8202
 4008 0080 9112     		.short	4753
 4009 0082 1803     		.short	792
 4010 0084 A777     		.short	30631
 4011 0086 2E66     		.short	26158
 4012 0088 B554     		.short	21685
 4013 008a 3C45     		.short	17724
 4014 008c CBBD     		.short	-16949
 4015 008e 42AC     		.short	-21438
 4016 0090 D99E     		.short	-24871
 4017 0092 508F     		.short	-28848
 4018 0094 EFFB     		.short	-1041
 4019 0096 66EA     		.short	-5530
 4020 0098 FDD8     		.short	-9987
 4021 009a 74C9     		.short	-13964
 4022 009c 0442     		.short	16900
 4023 009e 8D53     		.short	21389
 4024 00a0 1661     		.short	24854
 4025 00a2 9F70     		.short	28831
 4026 00a4 2004     		.short	1056
 4027 00a6 A915     		.short	5545
 4028 00a8 3227     		.short	10034
 4029 00aa BB36     		.short	14011
 4030 00ac 4CCE     		.short	-12724
 4031 00ae C5DF     		.short	-8251
 4032 00b0 5EED     		.short	-4770
 4033 00b2 D7FC     		.short	-809
 4034 00b4 6888     		.short	-30616
 4035 00b6 E199     		.short	-26143
 4036 00b8 7AAB     		.short	-21638
 4037 00ba F3BA     		.short	-17677
 4038 00bc 8552     		.short	21125
 4039 00be 0C43     		.short	17164
 4040 00c0 9771     		.short	29079
 4041 00c2 1E60     		.short	24606
 4042 00c4 A114     		.short	5281
 4043 00c6 2805     		.short	1320
 4044 00c8 B337     		.short	14259
 4045 00ca 3A26     		.short	9786
 4046 00cc CDDE     		.short	-8499
 4047 00ce 44CF     		.short	-12476
 4048 00d0 DFFD     		.short	-545
 4049 00d2 56EC     		.short	-5034
 4050 00d4 E998     		.short	-26391
 4051 00d6 6089     		.short	-30368
 4052 00d8 FBBB     		.short	-17413
 4053 00da 72AA     		.short	-21902
 4054 00dc 0663     		.short	25350
 4055 00de 8F72     		.short	29327
 4056 00e0 1440     		.short	16404
 4057 00e2 9D51     		.short	20893
 4058 00e4 2225     		.short	9506
 4059 00e6 AB34     		.short	13483
 4060 00e8 3006     		.short	1584
 4061 00ea B917     		.short	6073
 4062 00ec 4EEF     		.short	-4274
 4063 00ee C7FE     		.short	-313
 4064 00f0 5CCC     		.short	-13220
 4065 00f2 D5DD     		.short	-8747
 4066 00f4 6AA9     		.short	-22166
 4067 00f6 E3B8     		.short	-18205
 4068 00f8 788A     		.short	-30088
 4069 00fa F19B     		.short	-25615
 4070 00fc 8773     		.short	29575
 4071 00fe 0E62     		.short	25102
 4072 0100 9550     		.short	20629
 4073 0102 1C41     		.short	16668
 4074 0104 A335     		.short	13731
 4075 0106 2A24     		.short	9258
 4076 0108 B116     		.short	5809
 4077 010a 3807     		.short	1848
 4078 010c CFFF     		.short	-49
 4079 010e 46EE     		.short	-4538
 4080 0110 DDDC     		.short	-8995
 4081 0112 54CD     		.short	-12972
 4082 0114 EBB9     		.short	-17941
 4083 0116 62A8     		.short	-22430
 4084 0118 F99A     		.short	-25863
 4085 011a 708B     		.short	-29840
 4086 011c 0884     		.short	-31736
 4087 011e 8195     		.short	-27263
 4088 0120 1AA7     		.short	-22758
 4089 0122 93B6     		.short	-18797
 4090 0124 2CC2     		.short	-15828
 4091 0126 A5D3     		.short	-11355
 4092 0128 3EE1     		.short	-7874
 4093 012a B7F0     		.short	-3913
 4094 012c 4008     		.short	2112
 4095 012e C919     		.short	6601
 4096 0130 522B     		.short	11090
 4097 0132 DB3A     		.short	15067
 4098 0134 644E     		.short	20068
 4099 0136 ED5F     		.short	24557
 4100 0138 766D     		.short	28022
 4101 013a FF7C     		.short	31999
 4102 013c 8994     		.short	-27511
 4103 013e 0085     		.short	-31488
 4104 0140 9BB7     		.short	-18533
 4105 0142 12A6     		.short	-23022
 4106 0144 ADD2     		.short	-11603
 4107 0146 24C3     		.short	-15580
 4108 0148 BFF1     		.short	-3649
 4109 014a 36E0     		.short	-8138
 4110 014c C118     		.short	6337
 4111 014e 4809     		.short	2376
 4112 0150 D33B     		.short	15315
 4113 0152 5A2A     		.short	10842
 4114 0154 E55E     		.short	24293
 4115 0156 6C4F     		.short	20332
 4116 0158 F77D     		.short	32247
 4117 015a 7E6C     		.short	27774
 4118 015c 0AA5     		.short	-23286
 4119 015e 83B4     		.short	-19325
 4120 0160 1886     		.short	-31208
 4121 0162 9197     		.short	-26735
 4122 0164 2EE3     		.short	-7378
 4123 0166 A7F2     		.short	-3417
 4124 0168 3CC0     		.short	-16324
 4125 016a B5D1     		.short	-11851
 4126 016c 4229     		.short	10562
 4127 016e CB38     		.short	14539
 4128 0170 500A     		.short	2640
 4129 0172 D91B     		.short	7129
 4130 0174 666F     		.short	28518
 4131 0176 EF7E     		.short	32495
 4132 0178 744C     		.short	19572
 4133 017a FD5D     		.short	24061
 4134 017c 8BB5     		.short	-19061
 4135 017e 02A4     		.short	-23550
 4136 0180 9996     		.short	-26983
 4137 0182 1087     		.short	-30960
 4138 0184 AFF3     		.short	-3153
 4139 0186 26E2     		.short	-7642
 4140 0188 BDD0     		.short	-12099
 4141 018a 34C1     		.short	-16076
 4142 018c C339     		.short	14787
 4143 018e 4A28     		.short	10314
 4144 0190 D11A     		.short	6865
 4145 0192 580B     		.short	2904
 4146 0194 E77F     		.short	32743
 4147 0196 6E6E     		.short	28270
 4148 0198 F55C     		.short	23797
 4149 019a 7C4D     		.short	19836
 4150 019c 0CC6     		.short	-14836
 4151 019e 85D7     		.short	-10363
 4152 01a0 1EE5     		.short	-6882
 4153 01a2 97F4     		.short	-2921
 4154 01a4 2880     		.short	-32728
 4155 01a6 A191     		.short	-28255
 4156 01a8 3AA3     		.short	-23750
 4157 01aa B3B2     		.short	-19789
 4158 01ac 444A     		.short	19012
 4159 01ae CD5B     		.short	23501
 4160 01b0 5669     		.short	26966
 4161 01b2 DF78     		.short	30943
 4162 01b4 600C     		.short	3168
 4163 01b6 E91D     		.short	7657
 4164 01b8 722F     		.short	12146
 4165 01ba FB3E     		.short	16123
 4166 01bc 8DD6     		.short	-10611
 4167 01be 04C7     		.short	-14588
 4168 01c0 9FF5     		.short	-2657
 4169 01c2 16E4     		.short	-7146
 4170 01c4 A990     		.short	-28503
 4171 01c6 2081     		.short	-32480
 4172 01c8 BBB3     		.short	-19525
 4173 01ca 32A2     		.short	-24014
 4174 01cc C55A     		.short	23237
 4175 01ce 4C4B     		.short	19276
 4176 01d0 D779     		.short	31191
 4177 01d2 5E68     		.short	26718
 4178 01d4 E11C     		.short	7393
 4179 01d6 680D     		.short	3432
 4180 01d8 F33F     		.short	16371
 4181 01da 7A2E     		.short	11898
 4182 01dc 0EE7     		.short	-6386
 4183 01de 87F6     		.short	-2425
 4184 01e0 1CC4     		.short	-15332
 4185 01e2 95D5     		.short	-10859
 4186 01e4 2AA1     		.short	-24278
 4187 01e6 A3B0     		.short	-20317
 4188 01e8 3882     		.short	-32200
 4189 01ea B193     		.short	-27727
 4190 01ec 466B     		.short	27462
 4191 01ee CF7A     		.short	31439
 4192 01f0 5448     		.short	18516
 4193 01f2 DD59     		.short	23005
 4194 01f4 622D     		.short	11618
 4195 01f6 EB3C     		.short	15595
 4196 01f8 700E     		.short	3696
 4197 01fa F91F     		.short	8185
 4198 01fc 8FF7     		.short	-2161
 4199 01fe 06E6     		.short	-6650
 4200 0200 9DD4     		.short	-11107
 4201 0202 14C5     		.short	-15084
 4202 0204 ABB1     		.short	-20053
 4203 0206 22A0     		.short	-24542
 4204 0208 B992     		.short	-27975
 4205 020a 3083     		.short	-31952
 4206 020c C77B     		.short	31687
 4207 020e 4E6A     		.short	27214
 4208 0210 D558     		.short	22741
 4209 0212 5C49     		.short	18780
 4210 0214 E33D     		.short	15843
 4211 0216 6A2C     		.short	11370
 4212 0218 F11E     		.short	7921
 4213 021a 780F     		.short	3960
 4216              	pppACCMMask:
 4217 021c 01       		.byte	1
 4218 021d 02       		.byte	2
 4219 021e 04       		.byte	4
 4220 021f 08       		.byte	8
 4221 0220 10       		.byte	16
 4222 0221 20       		.byte	32
 4223 0222 40       		.byte	64
 4224 0223 80       		.byte	-128
 4225              		.bss
 4226              		.align	2
 4227              	pppControl:
 4228 0000 00000000 		.space	4604
 4228      00000000 
 4228      00000000 
 4228      00000000 
 4228      00000000 
 4229              		.comm	outpacket_buf,1504,1
 4230              		.comm	ppp_settings,1036,4
 4231              		.comm	subnetMask,4,4
 4942              	.Letext0:
 11672              		.code 16
 11673              		.align	1
 11674              	.L190:
 11675 13b0 1047     		bx	r2
 11676              	.L191:
 11677 13b2 1847     		bx	r3
 11678              	.L108:
 11679 13b4 2047C046 		bx	r4
DEFINED SYMBOLS
                            *ABS*:00000000 ppp.c
     /tmp/ccoC6Z25.s:1      .text:00000000 $t
     /tmp/ccoC6Z25.s:16     .text:00000000 pppIOCtl
     /tmp/ccoC6Z25.s:110    .text:00000064 $d
     /tmp/ccoC6Z25.s:4227   .bss:00000000 pppControl
     /tmp/ccoC6Z25.s:118    .text:00000068 pppMTU
     /tmp/ccoC6Z25.s:115    .text:00000068 $t
     /tmp/ccoC6Z25.s:146    .text:00000080 $d
     /tmp/ccoC6Z25.s:154    .text:00000084 get_idle_time
     /tmp/ccoC6Z25.s:151    .text:00000084 $t
     /tmp/ccoC6Z25.s:169    .text:00000088 pppifNetifInit
     /tmp/ccoC6Z25.s:201    .text:000000ac $d
     /tmp/ccoC6Z25.s:1384   .text:000005fc pppifOutput
     /tmp/ccoC6Z25.s:209    .text:000000b0 sifnpmode
     /tmp/ccoC6Z25.s:206    .text:000000b0 $t
     /tmp/ccoC6Z25.s:224    .text:000000b4 pppAppend
     /tmp/ccoC6Z25.s:330    .text:00000134 $d
     /tmp/ccoC6Z25.s:4216   .rodata:0000021c pppACCMMask
     /tmp/ccoC6Z25.s:345    .text:0000013c sifvjcomp
     /tmp/ccoC6Z25.s:342    .text:0000013c $t
     /tmp/ccoC6Z25.s:396    .text:00000174 $d
     /tmp/ccoC6Z25.s:410    .text:0000017c ppp_recv_config
     /tmp/ccoC6Z25.s:407    .text:0000017c $t
     /tmp/ccoC6Z25.s:468    .text:000001c8 $d
     /tmp/ccoC6Z25.s:482    .text:000001d0 ppp_send_config
     /tmp/ccoC6Z25.s:479    .text:000001d0 $t
     /tmp/ccoC6Z25.s:545    .text:00000220 $d
     /tmp/ccoC6Z25.s:559    .text:00000228 sifaddr
     /tmp/ccoC6Z25.s:556    .text:00000228 $t
     /tmp/ccoC6Z25.s:628    .text:0000027c $d
     /tmp/ccoC6Z25.s:643    .text:00000288 ppp_set_xaccm
     /tmp/ccoC6Z25.s:640    .text:00000288 $t
     /tmp/ccoC6Z25.s:696    .text:000002d8 $d
     /tmp/ccoC6Z25.s:710    .text:000002e0 pppSingleBuf
     /tmp/ccoC6Z25.s:707    .text:000002e0 $t
     /tmp/ccoC6Z25.s:784    .text:00000334 $d
     /tmp/ccoC6Z25.s:792    .text:00000338 cifdefaultroute
     /tmp/ccoC6Z25.s:789    .text:00000338 $t
     /tmp/ccoC6Z25.s:836    .text:00000360 $d
     /tmp/ccoC6Z25.s:845    .text:00000368 sifdefaultroute
     /tmp/ccoC6Z25.s:842    .text:00000368 $t
     /tmp/ccoC6Z25.s:889    .text:00000390 $d
     /tmp/ccoC6Z25.s:899    .text:0000039c cifaddr
     /tmp/ccoC6Z25.s:896    .text:0000039c $t
     /tmp/ccoC6Z25.s:968    .text:000003f8 $d
     /tmp/ccoC6Z25.s:982    .text:00000414 GetMask
     /tmp/ccoC6Z25.s:979    .text:00000414 $t
     /tmp/ccoC6Z25.s:1033   .text:0000044c $d
                            *COM*:00000004 subnetMask
     /tmp/ccoC6Z25.s:1051   .text:00000458 sifdown
     /tmp/ccoC6Z25.s:1048   .text:00000458 $t
     /tmp/ccoC6Z25.s:1132   .text:000004c4 $d
     /tmp/ccoC6Z25.s:1153   .text:000004dc sifup
     /tmp/ccoC6Z25.s:1150   .text:000004dc $t
     /tmp/ccoC6Z25.s:1263   .text:00000578 $d
     /tmp/ccoC6Z25.s:1281   .text:000005a0 $t
     /tmp/ccoC6Z25.s:1284   .text:000005a0 nPut
     /tmp/ccoC6Z25.s:1356   .text:000005f4 $d
     /tmp/ccoC6Z25.s:1381   .text:000005fc $t
     /tmp/ccoC6Z25.s:1795   .text:00000840 $d
     /tmp/ccoC6Z25.s:3957   .rodata:0000001c fcstab
     /tmp/ccoC6Z25.s:1823   .text:00000874 pppWrite
     /tmp/ccoC6Z25.s:1820   .text:00000874 $t
     /tmp/ccoC6Z25.s:2037   .text:000009a8 $d
     /tmp/ccoC6Z25.s:2073   .text:000009c0 $t
     /tmp/ccoC6Z25.s:2076   .text:000009c0 pppInput
     /tmp/ccoC6Z25.s:2412   .text:00000bdc $d
     /tmp/ccoC6Z25.s:3947   .data:00000000 ppp_protocols
     /tmp/ccoC6Z25.s:2437   .text:00000c20 $t
     /tmp/ccoC6Z25.s:2440   .text:00000c20 pppDrop
     /tmp/ccoC6Z25.s:2495   .text:00000c68 $d
     /tmp/ccoC6Z25.s:2540   .text:00000c70 $t
     /tmp/ccoC6Z25.s:2543   .text:00000c70 pppMain
     /tmp/ccoC6Z25.s:2898   .rodata:00000000 $d
     /tmp/ccoC6Z25.s:3152   .text:00000fb4 $d
     /tmp/ccoC6Z25.s:3270   .text:00001060 pppStartCB
     /tmp/ccoC6Z25.s:3231   .text:0000103c pppStopCB
     /tmp/ccoC6Z25.s:3188   .text:00001018 pppHupCB
     /tmp/ccoC6Z25.s:3185   .text:00001018 $t
     /tmp/ccoC6Z25.s:3216   .text:00001038 $d
     /tmp/ccoC6Z25.s:3228   .text:0000103c $t
     /tmp/ccoC6Z25.s:3257   .text:00001058 $d
     /tmp/ccoC6Z25.s:3267   .text:00001060 $t
     /tmp/ccoC6Z25.s:3298   .text:00001080 $d
     /tmp/ccoC6Z25.s:3306   .text:00001084 pppSetAuth
     /tmp/ccoC6Z25.s:3303   .text:00001084 $t
     /tmp/ccoC6Z25.s:3437   .text:00001134 $d
                            *COM*:0000040c ppp_settings
     /tmp/ccoC6Z25.s:3450   .text:0000114c pppInit
     /tmp/ccoC6Z25.s:3447   .text:0000114c $t
     /tmp/ccoC6Z25.s:3509   .text:000011a0 $d
     /tmp/ccoC6Z25.s:3528   .text:000011bc pppMainWakeup
     /tmp/ccoC6Z25.s:3525   .text:000011bc $t
     /tmp/ccoC6Z25.s:3560   .text:000011e4 $d
     /tmp/ccoC6Z25.s:3569   .text:000011ec pppSigHUP
     /tmp/ccoC6Z25.s:3566   .text:000011ec $t
     /tmp/ccoC6Z25.s:3595   .text:00001208 $d
     /tmp/ccoC6Z25.s:3603   .text:0000120c pppClose
     /tmp/ccoC6Z25.s:3600   .text:0000120c $t
     /tmp/ccoC6Z25.s:3656   .text:0000124c $d
     /tmp/ccoC6Z25.s:3671   .text:00001258 pppOverSerialOpen
     /tmp/ccoC6Z25.s:3668   .text:00001258 $t
     /tmp/ccoC6Z25.s:3859   .text:0000135c $d
     /tmp/ccoC6Z25.s:3876   .text:00001370 pppLinkDown
     /tmp/ccoC6Z25.s:3873   .text:00001370 $t
     /tmp/ccoC6Z25.s:3901   .text:0000138c $d
     /tmp/ccoC6Z25.s:3914   .text:00001390 pppLinkTerminated
     /tmp/ccoC6Z25.s:3911   .text:00001390 $t
     /tmp/ccoC6Z25.s:3939   .text:000013ac $d
     /tmp/ccoC6Z25.s:3948   .data:00000000 $d
                            *COM*:000005e0 outpacket_buf
     /tmp/ccoC6Z25.s:11672  .text:000013b0 $t

UNDEFINED SYMBOLS
pbuf_alloc
lwip_stats
ppp_trace
memcpy
pbuf_free
netif_set_default
htonl
netif_set_down
netif_remove
netif_add
netif_set_up
ip_input
sio_write
vj_compress_tcp
sys_jiffies
lcp_phase
pbuf_header
vj_uncompress_tcp
vj_uncompress_uncomp
htons
lcp_sprotrej
vj_uncompress_err
tcpip_callback_with_block
dbgStackFreeSize
sio_read
pbuf_cat
pbuf_realloc
avChurnRand
sys_msleep
sys_thread_suicid
lcp_lowerdown
link_terminated
lcp_close
lcp_lowerup
lcp_open
strncpy
memset
magicInit
sio_read_abort
lcp_init
vj_compress_init
sys_thread_new
lcp_protent
pap_protent
chap_protent
ipcp_protent
