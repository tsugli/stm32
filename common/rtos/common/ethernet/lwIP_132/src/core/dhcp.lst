   1              		.code	16
   2              		.file	"dhcp.c"
  10              	.Ltext0:
  11              		.align	2
  12              		.code	16
  13              		.thumb_func
  15              	dhcp_set_state:
  16              	.LFB309:
  17              		.file 1 "rtos/common/ethernet/lwIP_132/src/core/dhcp.c"
   1:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
   2:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @file
   3:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Dynamic Host Configuration Protocol client
   4:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
   5:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
   6:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
   7:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /*
   8:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
   9:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Copyright (c) 2001-2004 Leon Woestenberg <leon.woestenberg@gmx.net>
  10:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Copyright (c) 2001-2004 Axon Digital Design B.V., The Netherlands.
  11:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * All rights reserved.
  12:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  13:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Redistribution and use in source and binary forms, with or without modification,
  14:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * are permitted provided that the following conditions are met:
  15:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  16:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *    this list of conditions and the following disclaimer.
  18:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *    and/or other materials provided with the distribution.
  21:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * 3. The name of the author may not be used to endorse or promote products
  22:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *    derived from this software without specific prior written permission.
  23:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  24:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  25:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  26:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  27:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  28:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  29:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  30:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  31:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  32:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  33:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * OF SUCH DAMAGE.
  34:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  35:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * This file is a contribution to the lwIP TCP/IP stack.
  36:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * The Swedish Institute of Computer Science and Adam Dunkels
  37:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * are specifically granted permission to redistribute this
  38:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * source code.
  39:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  40:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Author: Leon Woestenberg <leon.woestenberg@gmx.net>
  41:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  42:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * This is a DHCP client for the lwIP TCP/IP stack. It aims to conform
  43:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * with RFC 2131 and RFC 2132.
  44:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  45:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * TODO:
  46:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * - Proper parsing of DHCP messages exploiting file/sname field overloading.
  47:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * - Add JavaDoc style documentation (API, internals).
  48:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * - Support for interfaces other than Ethernet (SLIP, PPP, ...)
  49:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  50:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Please coordinate changes and requests with Leon Woestenberg
  51:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * <leon.woestenberg@gmx.net>
  52:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  53:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Integration with your code:
  54:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  55:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * In lwip/dhcp.h
  56:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * #define DHCP_COARSE_TIMER_SECS (recommended 60 which is a minute)
  57:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * #define DHCP_FINE_TIMER_MSECS (recommended 500 which equals TCP coarse timer)
  58:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  59:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Then have your application call dhcp_coarse_tmr() and
  60:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * dhcp_fine_tmr() on the defined intervals.
  61:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  62:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * dhcp_start(struct netif *netif);
  63:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * starts a DHCP client instance which configures the interface by
  64:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * obtaining an IP address lease and maintaining it.
  65:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  66:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Use dhcp_release(netif) to end the lease and use dhcp_stop(netif)
  67:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * to remove the DHCP client.
  68:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
  69:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
  70:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
  71:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/opt.h"
  72:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
  73:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_DHCP /* don't build if not configured for use in lwipopts.h */
  74:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
  75:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/stats.h"
  76:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/mem.h"
  77:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/udp.h"
  78:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/ip_addr.h"
  79:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/netif.h"
  80:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/inet.h"
  81:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/sys.h"
  82:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/dhcp.h"
  83:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/autoip.h"
  84:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "lwip/dns.h"
  85:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include "netif/etharp.h"
  86:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
  87:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include <string.h>
  88:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
  89:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /** Default for DHCP_GLOBAL_XID is 0xABCD0000
  90:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * This can be changed by defining DHCP_GLOBAL_XID and DHCP_GLOBAL_XID_HEADER, e.g.
  91:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *  #define DHCP_GLOBAL_XID_HEADER "stdlib.h"
  92:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *  #define DHCP_GLOBAL_XID rand()
  93:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
  94:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #ifdef DHCP_GLOBAL_XID_HEADER
  95:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #include DHCP_GLOBAL_XID_HEADER /* include optional starting XID generation prototypes */
  96:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
  97:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
  98:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /** DHCP_OPTION_MAX_MSG_SIZE is set to the MTU
  99:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * MTU is checked to be big enough in dhcp_start */
 100:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #define DHCP_MAX_MSG_LEN(netif)        (netif->mtu)
 101:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #define DHCP_MAX_MSG_LEN_MIN_REQUIRED  576
 102:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /** Minimum length for reply before packet is parsed */
 103:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #define DHCP_MIN_REPLY_LEN             44
 104:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 105:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #define REBOOT_TRIES 2
 106:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 107:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /* DHCP client state machine functions */
 108:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_handle_ack(struct netif *netif);
 109:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_handle_nak(struct netif *netif);
 110:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_handle_offer(struct netif *netif);
 111:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 112:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t dhcp_discover(struct netif *netif);
 113:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t dhcp_select(struct netif *netif);
 114:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_bind(struct netif *netif);
 115:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if DHCP_DOES_ARP_CHECK
 116:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_check(struct netif *netif);
 117:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t dhcp_decline(struct netif *netif);
 118:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* DHCP_DOES_ARP_CHECK */
 119:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t dhcp_rebind(struct netif *netif);
 120:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t dhcp_reboot(struct netif *netif);
 121:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_set_state(struct dhcp *dhcp, u8_t new_state);
 122:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 123:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /* receive, unfold, parse and free incoming messages */
 124:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t p
 125:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t dhcp_unfold_reply(struct dhcp *dhcp, struct pbuf *p);
 126:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static u8_t *dhcp_get_option_ptr(struct dhcp *dhcp, u8_t option_type);
 127:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static u8_t dhcp_get_option_byte(u8_t *ptr);
 128:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if 0
 129:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static u16_t dhcp_get_option_short(u8_t *ptr);
 130:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
 131:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static u32_t dhcp_get_option_long(u8_t *ptr);
 132:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_free_reply(struct dhcp *dhcp);
 133:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 134:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /* set the DHCP timers */
 135:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_timeout(struct netif *netif);
 136:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_t1_timeout(struct netif *netif);
 137:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_t2_timeout(struct netif *netif);
 138:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 139:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /* build outgoing messages */
 140:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /* create a DHCP request, fill in common headers */
 141:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t dhcp_create_request(struct netif *netif);
 142:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /* free a DHCP request */
 143:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_delete_request(struct netif *netif);
 144:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /* add a DHCP option (type, then length in bytes) */
 145:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len);
 146:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /* add option values */
 147:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_option_byte(struct dhcp *dhcp, u8_t value);
 148:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_option_short(struct dhcp *dhcp, u16_t value);
 149:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_option_long(struct dhcp *dhcp, u32_t value);
 150:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /* always add the DHCP options trailer to end and pad */
 151:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_option_trailer(struct dhcp *dhcp);
 152:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 153:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 154:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Back-off the DHCP client (because of a received NAK response).
 155:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 156:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Back-off the DHCP client because of a received NAK. Receiving a
 157:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * NAK means the client asked for something non-sensible, for
 158:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * example when it tries to renew a lease obtained on another network.
 159:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 160:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * We clear any existing set IP address and restart DHCP negotiation
 161:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * afresh (as per RFC2131 3.2.3).
 162:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 163:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 164:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 165:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
 166:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_handle_nak(struct netif *netif)
 167:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 168:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 169:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
 170:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 171:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* Set the interface down since the address must no longer be used, as per RFC2131 */
 172:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_down(netif);
 173:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* remove IP address from interface */
 174:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_ipaddr(netif, IP_ADDR_ANY);
 175:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_gw(netif, IP_ADDR_ANY);
 176:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_netmask(netif, IP_ADDR_ANY); 
 177:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* Change to a defined state */
 178:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_BACKING_OFF);
 179:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* We can immediately restart discovery */
 180:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_discover(netif);
 181:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 182:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 183:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if DHCP_DOES_ARP_CHECK
 184:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 185:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Checks if the offered IP address is already in use.
 186:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 187:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * It does so by sending an ARP request for the offered address and
 188:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * entering CHECKING state. If no ARP reply is received within a small
 189:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * interval, the address is assumed to be free for use by us.
 190:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 191:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 192:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 193:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
 194:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_check(struct netif *netif)
 195:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 196:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 197:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result;
 198:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t msecs;
 199:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)ne
 200:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     (s16_t)netif->name[1]));
 201:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_CHECKING);
 202:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* create an ARP query for the offered IP address, expecting that no host
 203:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****      responds, as the IP address should not be in use. */
 204:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 205:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result != ERR_OK) {
 206:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perfo
 207:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 208:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->tries++;
 209:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   msecs = 500;
 210:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 211:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U
 212:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 213:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* DHCP_DOES_ARP_CHECK */
 214:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 215:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 216:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Remember the configuration offered by a DHCP server.
 217:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 218:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 219:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 220:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
 221:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_handle_offer(struct netif *netif)
 222:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 223:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 224:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* obtain the server address */
 225:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u8_t *option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_SERVER_ID);
 226:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
 227:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 228:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (option_ptr != NULL) {
 229:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->server_ip_addr.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
 230:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n", dhcp->s
 231:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* remember offered address */
 232:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     ip_addr_set(&dhcp->offered_ip_addr, (struct ip_addr *)&dhcp->msg_in->yiaddr);
 233:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n", dhcp
 234:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 235:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_select(netif);
 236:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 237:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 238:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 239:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 240:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Select a DHCP server offer out of all offers.
 241:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 242:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Simply select the first offer received.
 243:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 244:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 245:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @return lwIP specific error (see error.h)
 246:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 247:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t
 248:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_select(struct netif *netif)
 249:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 250:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 251:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result;
 252:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t msecs;
 253:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_NETIF_HOSTNAME
 254:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   const char *p;
 255:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_NETIF_HOSTNAME */
 256:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 257:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, n
 258:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_REQUESTING);
 259:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 260:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* create and initialize the DHCP message header */
 261:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = dhcp_create_request(netif);
 262:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result == ERR_OK) {
 263:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 264:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_REQUEST);
 265:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 266:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 267:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 268:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 269:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* MUST request the offered IP address */
 270:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 271:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
 272:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 273:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 274:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
 275:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 276:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
 277:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
 278:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
 279:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
 280:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
 281:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 282:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_NETIF_HOSTNAME
 283:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     p = (const char*)netif->hostname;
 284:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (p != NULL) {
 285:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, strlen(p));
 286:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       while (*p) {
 287:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         dhcp_option_byte(dhcp, *p++);
 288:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
 289:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 290:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_NETIF_HOSTNAME */
 291:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 292:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_trailer(dhcp);
 293:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* shrink the pbuf to the actual content length */
 294:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 295:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 296:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* send broadcast to any DHCP server */
 297:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 298:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_delete_request(netif);
 299:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
 300:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
 301:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allo
 302:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 303:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->tries++;
 304:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 305:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 306:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", 
 307:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return result;
 308:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 309:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 310:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 311:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * The DHCP timer that checks for lease renewal/rebind timeouts.
 312:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 313:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 314:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** void
 315:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_coarse_tmr()
 316:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 317:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct netif *netif = netif_list;
 318:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
 319:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* iterate through all network interfaces */
 320:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   while (netif != NULL) {
 321:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* only act on DHCP configured interfaces */
 322:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (netif->dhcp != NULL) {
 323:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* timer is active (non zero), and triggers (zeroes) now? */
 324:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       if (netif->dhcp->t2_timeout-- == 1) {
 325:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n
 326:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         /* this clients' rebind timeout triggered */
 327:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         dhcp_t2_timeout(netif);
 328:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* timer is active (non zero), and triggers (zeroes) now */
 329:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       } else if (netif->dhcp->t1_timeout-- == 1) {
 330:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n
 331:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         /* this clients' renewal timeout triggered */
 332:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         dhcp_t1_timeout(netif);
 333:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
 334:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 335:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* proceed to next netif */
 336:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     netif = netif->next;
 337:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 338:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 339:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 340:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 341:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * DHCP transaction timeout handling
 342:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 343:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * A DHCP server is expected to respond within a short period of time.
 344:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * This timer checks whether an outstanding DHCP request is timed out.
 345:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * 
 346:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 347:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** void
 348:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_fine_tmr()
 349:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 350:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct netif *netif = netif_list;
 351:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* loop through netif's */
 352:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   while (netif != NULL) {
 353:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* only act on DHCP configured interfaces */
 354:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (netif->dhcp != NULL) {
 355:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* timer is active (non zero), and is about to trigger now */      
 356:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       if (netif->dhcp->request_timeout > 1) {
 357:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         netif->dhcp->request_timeout--;
 358:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
 359:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       else if (netif->dhcp->request_timeout == 1) {
 360:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         netif->dhcp->request_timeout--;
 361:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         /* { netif->dhcp->request_timeout == 0 } */
 362:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeou
 363:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         /* this clients' request timeout triggered */
 364:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         dhcp_timeout(netif);
 365:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
 366:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 367:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* proceed to next network interface */
 368:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     netif = netif->next;
 369:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 370:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 371:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 372:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 373:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * A DHCP negotiation transaction, or ARP request, has timed out.
 374:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 375:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * The timer that was started with the DHCP or ARP request has
 376:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * timed out, indicating no response was received in time.
 377:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 378:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 379:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 380:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
 381:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_timeout(struct netif *netif)
 382:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 383:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 384:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
 385:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* back-off period has passed, or server selection timed out */
 386:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
 387:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
 388:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_discover(netif);
 389:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* receiving the requested lease timed out */
 390:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else if (dhcp->state == DHCP_REQUESTING) {
 391:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP re
 392:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->tries <= 5) {
 393:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_select(netif);
 394:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     } else {
 395:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, relea
 396:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_release(netif);
 397:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_discover(netif);
 398:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 399:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if DHCP_DOES_ARP_CHECK
 400:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* received no ARP reply for the offered address (which is good) */
 401:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else if (dhcp->state == DHCP_CHECKING) {
 402:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP reque
 403:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->tries <= 1) {
 404:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_check(netif);
 405:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* no ARP replies on the offered address,
 406:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****        looks like the IP address is indeed free */
 407:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     } else {
 408:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* bind the interface to the offered address */
 409:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_bind(netif);
 410:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 411:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* DHCP_DOES_ARP_CHECK */
 412:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 413:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* did not get response to renew request? */
 414:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   else if (dhcp->state == DHCP_RENEWING) {
 415:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP requ
 416:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* just retry renewal */
 417:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* note that the rebind timer will eventually time-out if renew does not work */
 418:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_renew(netif);
 419:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* did not get response to rebind request? */
 420:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else if (dhcp->state == DHCP_REBINDING) {
 421:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP req
 422:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->tries <= 8) {
 423:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_rebind(netif);
 424:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     } else {
 425:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOV
 426:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_release(netif);
 427:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_discover(netif);
 428:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 429:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else if (dhcp->state == DHCP_REBOOTING) {
 430:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->tries < REBOOT_TRIES) {
 431:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_reboot(netif);
 432:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     } else {
 433:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_discover(netif);
 434:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 435:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 436:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 437:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 438:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 439:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * The renewal period has timed out.
 440:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 441:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 442:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 443:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
 444:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_t1_timeout(struct netif *netif)
 445:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 446:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 447:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
 448:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) || (dhcp->state == DHCP_RENEW
 449:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* just retry to renew - note that the rebind timer (t2) will
 450:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****      * eventually time-out if renew tries fail. */
 451:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t1_timeout(): must renew\n"));
 452:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_renew(netif);
 453:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 454:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 455:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 456:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 457:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * The rebind period has timed out.
 458:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 459:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 460:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 461:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
 462:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_t2_timeout(struct netif *netif)
 463:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 464:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 465:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
 466:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) || (dhcp->state == DHCP_RENEW
 467:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* just retry to rebind */
 468:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout(): must rebind\n"))
 469:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_rebind(netif);
 470:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 471:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 472:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 473:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 474:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Handle a DHCP ACK packet
 475:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 476:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 477:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 478:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
 479:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_handle_ack(struct netif *netif)
 480:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 481:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 482:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u8_t *option_ptr;
 483:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* clear options we might not get from the ACK */
 484:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->offered_sn_mask.addr = 0;
 485:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->offered_gw_addr.addr = 0;
 486:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->offered_bc_addr.addr = 0;
 487:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 488:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* lease time given? */
 489:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_LEASE_TIME);
 490:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (option_ptr != NULL) {
 491:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* remember offered lease time */
 492:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->offered_t0_lease = dhcp_get_option_long(option_ptr + 2);
 493:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 494:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* renewal period given? */
 495:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_T1);
 496:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (option_ptr != NULL) {
 497:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* remember given renewal period */
 498:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->offered_t1_renew = dhcp_get_option_long(option_ptr + 2);
 499:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
 500:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* calculate safe periods for renewal */
 501:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 502:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 503:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 504:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* renewal period given? */
 505:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_T2);
 506:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (option_ptr != NULL) {
 507:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* remember given rebind period */
 508:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->offered_t2_rebind = dhcp_get_option_long(option_ptr + 2);
 509:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
 510:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* calculate safe periods for rebinding */
 511:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
 512:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 513:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 514:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* (y)our internet address */
 515:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   ip_addr_set(&dhcp->offered_ip_addr, &dhcp->msg_in->yiaddr);
 516:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 517:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 518:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Patch #1308
 519:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * TODO: we must check if the file field is not overloaded by DHCP options!
 520:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 521:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if 0
 522:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* boot server address */
 523:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   ip_addr_set(&dhcp->offered_si_addr, &dhcp->msg_in->siaddr);
 524:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* boot file name */
 525:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->msg_in->file[0]) {
 526:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->boot_file_name = mem_malloc(strlen(dhcp->msg_in->file) + 1);
 527:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     strcpy(dhcp->boot_file_name, dhcp->msg_in->file);
 528:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 529:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
 530:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 531:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* subnet mask */
 532:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_SUBNET_MASK);
 533:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* subnet mask given? */
 534:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (option_ptr != NULL) {
 535:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->offered_sn_mask.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
 536:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 537:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 538:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* gateway router */
 539:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_ROUTER);
 540:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (option_ptr != NULL) {
 541:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->offered_gw_addr.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
 542:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 543:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 544:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* broadcast address */
 545:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_BROADCAST);
 546:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (option_ptr != NULL) {
 547:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->offered_bc_addr.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
 548:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 549:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   
 550:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* DNS servers */
 551:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_DNS_SERVER);
 552:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (option_ptr != NULL) {
 553:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     u8_t n;
 554:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->dns_count = dhcp_get_option_byte(&option_ptr[1]) / (u32_t)sizeof(struct ip_addr);
 555:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* limit to at most DHCP_MAX_DNS DNS servers */
 556:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->dns_count > DHCP_MAX_DNS)
 557:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->dns_count = DHCP_MAX_DNS;
 558:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     for (n = 0; n < dhcp->dns_count; n++) {
 559:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->offered_dns_addr[n].addr = htonl(dhcp_get_option_long(&option_ptr[2 + n * 4]));
 560:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_DNS
 561:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dns_setserver( n, (struct ip_addr *)(&(dhcp->offered_dns_addr[n].addr)));
 562:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_DNS */
 563:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 564:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_DNS
 565:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dns_setserver( n, (struct ip_addr *)(&ip_addr_any));
 566:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_DNS */
 567:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 568:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 569:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 570:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 571:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Start DHCP negotiation for a network interface.
 572:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 573:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * If no DHCP client instance was attached to this interface,
 574:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * a new client is created first. If a DHCP client instance
 575:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * was already present, it restarts negotiation.
 576:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 577:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif The lwIP network interface
 578:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @return lwIP error code
 579:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * - ERR_OK - No error
 580:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * - ERR_MEM - Out of memory
 581:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 582:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** err_t
 583:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_start(struct netif *netif)
 584:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 585:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp;
 586:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result = ERR_OK;
 587:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 588:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 589:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp = netif->dhcp;
 590:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n",
 591:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* Remove the flag that says this netif is handled by DHCP,
 592:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****      it is set when we succeeded starting. */
 593:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif->flags &= ~NETIF_FLAG_DHCP;
 594:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 595:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* check MTU of the netif */
 596:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 597:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU i
 598:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     return ERR_MEM;
 599:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 600:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 601:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* no DHCP client attached yet? */
 602:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp == NULL) {
 603:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
 604:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp = mem_malloc(sizeof(struct dhcp));
 605:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp == NULL) {
 606:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
 607:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       return ERR_MEM;
 608:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 609:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* store this dhcp client in the netif */
 610:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     netif->dhcp = dhcp;
 611:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 612:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* already has DHCP client attached */
 613:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
 614:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP confi
 615:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->pcb != NULL) {
 616:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       udp_remove(dhcp->pcb);
 617:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 618:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 619:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL &&
 620:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->options_in == NULL && dhcp->options_in_len == 0);
 621:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 622:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     
 623:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* clear data structure */
 624:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   memset(dhcp, 0, sizeof(struct dhcp));
 625:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* allocate UDP PCB */
 626:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->pcb = udp_new();
 627:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->pcb == NULL) {
 628:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
 629:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     mem_free((void *)dhcp);
 630:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     netif->dhcp = dhcp = NULL;
 631:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     return ERR_MEM;
 632:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 633:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if IP_SOF_BROADCAST
 634:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->pcb->so_options|=SOF_BROADCAST;
 635:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* IP_SOF_BROADCAST */
 636:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* set up local and remote port for the pcb */
 637:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 638:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 639:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* set up the recv callback and argument */
 640:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   udp_recv(dhcp->pcb, dhcp_recv, netif);
 641:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
 642:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* (re)start the DHCP negotiation */
 643:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = dhcp_discover(netif);
 644:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result != ERR_OK) {
 645:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* free resources allocated above */
 646:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_stop(netif);
 647:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     return ERR_MEM;
 648:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 649:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* Set the flag that says this netif is handled by DHCP. */
 650:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif->flags |= NETIF_FLAG_DHCP;
 651:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return result;
 652:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 653:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 654:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 655:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Inform a DHCP server of our manual configuration.
 656:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 657:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * This informs DHCP servers of our fixed IP address configuration
 658:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * by sending an INFORM message. It does not involve DHCP address
 659:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * configuration, it is just here to be nice to the network.
 660:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 661:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif The lwIP network interface
 662:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 663:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** void
 664:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_inform(struct netif *netif)
 665:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 666:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp, *old_dhcp;
 667:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result = ERR_OK;
 668:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp = mem_malloc(sizeof(struct dhcp));
 669:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp == NULL) {
 670:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not al
 671:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     return;
 672:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 673:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   memset(dhcp, 0, sizeof(struct dhcp));
 674:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 675:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): allocated dhcp\n"));
 676:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->pcb = udp_new();
 677:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->pcb == NULL) {
 678:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not ob
 679:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     goto free_dhcp_and_return;
 680:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 681:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   old_dhcp = netif->dhcp;
 682:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif->dhcp = dhcp;
 683:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
 684:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* create and initialize the DHCP message header */
 685:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = dhcp_create_request(netif);
 686:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result == ERR_OK) {
 687:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 688:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 689:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_INFORM);
 690:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 691:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 692:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 693:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 694:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_trailer(dhcp);
 695:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 696:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 697:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 698:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if IP_SOF_BROADCAST
 699:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->pcb->so_options|=SOF_BROADCAST;
 700:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* IP_SOF_BROADCAST */
 701:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 702:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
 703:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 704:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_delete_request(netif);
 705:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
 706:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allo
 707:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 708:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 709:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   udp_remove(dhcp->pcb);
 710:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->pcb = NULL;
 711:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif->dhcp = old_dhcp;
 712:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** free_dhcp_and_return:
 713:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   mem_free((void *)dhcp);
 714:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 715:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 716:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /** Handle a possible change in the network configuration.
 717:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 718:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * This enters the REBOOTING state to verify that the currently bound
 719:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * address is still valid.
 720:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 721:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** void
 722:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_network_changed(struct netif *netif)
 723:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 724:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 725:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (!dhcp)
 726:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     return;
 727:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   switch (dhcp->state) {
 728:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   case DHCP_REBINDING:
 729:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   case DHCP_RENEWING:
 730:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   case DHCP_BOUND:
 731:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   case DHCP_REBOOTING:
 732:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     netif_set_down(netif);
 733:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->tries = 0;
 734:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_reboot(netif);
 735:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     break;
 736:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   case DHCP_OFF:
 737:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* stay off */
 738:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     break;
 739:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   default:
 740:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->tries = 0;
 741:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_discover(netif);
 742:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     break;
 743:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 744:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 745:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 746:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if DHCP_DOES_ARP_CHECK
 747:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 748:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Match an ARP reply with the offered IP address.
 749:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 750:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the network interface on which the reply was received
 751:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param addr The IP address we received a reply from
 752:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 753:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** void dhcp_arp_reply(struct netif *netif, struct ip_addr *addr)
 754:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 755:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 756:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
 757:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* is a DHCP client doing an ARP check? */
 758:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
 759:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp rep
 760:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* did a host respond with the address we
 761:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****        were offered by the DHCP server? */
 762:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
 763:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* we will not accept the offered address */
 764:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
 765:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
 766:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_decline(netif);
 767:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 768:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 769:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 770:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 771:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 772:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Decline an offered lease.
 773:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 774:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Tell the DHCP server we do not accept the offered address.
 775:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * One reason to decline the lease is when we find out the address
 776:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * is already in use by another host (through ARP).
 777:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 778:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 779:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 780:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t
 781:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_decline(struct netif *netif)
 782:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 783:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 784:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result = ERR_OK;
 785:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t msecs;
 786:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
 787:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_BACKING_OFF);
 788:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* create and initialize the DHCP message header */
 789:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = dhcp_create_request(netif);
 790:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result == ERR_OK) {
 791:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 792:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_DECLINE);
 793:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 794:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 795:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
 796:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 797:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_trailer(dhcp);
 798:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* resize pbuf to reflect true size of options */
 799:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 801:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* per section 4.4.4, broadcast DECLINE messages */
 802:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 803:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_delete_request(netif);
 804:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
 805:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
 806:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 807:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       ("dhcp_decline: could not allocate DHCP request\n"));
 808:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 809:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->tries++;
 810:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   msecs = 10*1000;
 811:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 812:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n",
 813:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return result;
 814:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 815:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
 816:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 817:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 818:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 819:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Start the DHCP process, discover a DHCP server.
 820:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 821:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
 822:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 823:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t
 824:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_discover(struct netif *netif)
 825:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 826:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 827:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result = ERR_OK;
 828:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t msecs;
 829:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
 830:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   ip_addr_set(&dhcp->offered_ip_addr, IP_ADDR_ANY);
 831:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_SELECTING);
 832:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* create and initialize the DHCP message header */
 833:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = dhcp_create_request(netif);
 834:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result == ERR_OK) {
 835:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
 836:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 837:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_DISCOVER);
 838:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 839:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 840:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 841:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 842:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
 843:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
 844:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
 845:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
 846:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
 847:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 848:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_trailer(dhcp);
 849:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 850:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
 851:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 852:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 853:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, D
 854:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 855:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
 856:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_delete_request(netif);
 857:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
 858:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
 859:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not al
 860:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 861:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->tries++;
 862:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_DHCP_AUTOIP_COOP
 863:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STAT
 864:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
 865:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     autoip_start(netif);
 866:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 867:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_DHCP_AUTOIP_COOP */
 868:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 869:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 870:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout 
 871:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return result;
 872:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 873:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 874:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 875:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 876:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Bind the interface to the offered IP address.
 877:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 878:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif network interface to bind to the offered address
 879:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 880:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
 881:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_bind(struct netif *netif)
 882:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 883:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u32_t timeout;
 884:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp;
 885:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct ip_addr sn_mask, gw_addr;
 886:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 887:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp = netif->dhcp;
 888:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 889:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, net
 890:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 891:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* temporary DHCP lease? */
 892:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->offered_t1_renew != 0xffffffffUL) {
 893:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* set renewal period timer */
 894:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp
 895:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 896:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if(timeout > 0xffff) {
 897:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       timeout = 0xffff;
 898:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 899:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->t1_timeout = (u16_t)timeout;
 900:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->t1_timeout == 0) {
 901:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->t1_timeout = 1;
 902:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 903:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"
 904:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 905:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* set renewal period timer */
 906:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 907:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp-
 908:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 909:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if(timeout > 0xffff) {
 910:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       timeout = 0xffff;
 911:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 912:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->t2_timeout = (u16_t)timeout;
 913:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->t2_timeout == 0) {
 914:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->t2_timeout = 1;
 915:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 916:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"
 917:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 918:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* copy offered network mask */
 919:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   ip_addr_set(&sn_mask, &dhcp->offered_sn_mask);
 920:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 921:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* subnet mask not given? */
 922:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* TODO: this is not a valid check. what if the network mask is 0? */
 923:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (sn_mask.addr == 0) {
 924:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* choose a safe subnet mask given the network class */
 925:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     u8_t first_octet = ip4_addr1(&sn_mask);
 926:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (first_octet <= 127) {
 927:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       sn_mask.addr = htonl(0xff000000);
 928:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     } else if (first_octet >= 192) {
 929:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       sn_mask.addr = htonl(0xffffff00);
 930:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     } else {
 931:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       sn_mask.addr = htonl(0xffff0000);
 932:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 933:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 934:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 935:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   ip_addr_set(&gw_addr, &dhcp->offered_gw_addr);
 936:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* gateway address not given? */
 937:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (gw_addr.addr == 0) {
 938:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* copy network address */
 939:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     gw_addr.addr = (dhcp->offered_ip_addr.addr & sn_mask.addr);
 940:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* use first host address on network as gateway */
 941:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     gw_addr.addr |= htonl(0x00000001);
 942:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 943:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 944:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_DHCP_AUTOIP_COOP
 945:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
 946:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     autoip_stop(netif);
 947:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
 948:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
 949:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_DHCP_AUTOIP_COOP */
 950:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 951:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n", dhcp->offered_ip_add
 952:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
 953:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n", sn_mask.addr));
 954:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_netmask(netif, &sn_mask);
 955:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n", gw_addr.addr));
 956:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_gw(netif, &gw_addr);
 957:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* bring the interface up */
 958:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_up(netif);
 959:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* netif is now bound to DHCP leased address */
 960:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_BOUND);
 961:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 962:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 963:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
 964:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Renew an existing DHCP lease at the involved DHCP server.
 965:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
 966:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif network interface which must renew its lease
 967:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
 968:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** err_t
 969:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_renew(struct netif *netif)
 970:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 971:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
 972:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result;
 973:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t msecs;
 974:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_NETIF_HOSTNAME
 975:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   const char *p;
 976:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_NETIF_HOSTNAME */
 977:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
 978:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_RENEWING);
 979:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 980:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* create and initialize the DHCP message header */
 981:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = dhcp_create_request(netif);
 982:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result == ERR_OK) {
 983:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 984:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 985:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_REQUEST);
 986:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 987:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 988:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 989:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
 990:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_NETIF_HOSTNAME
 991:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     p = (const char*)netif->hostname;
 992:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (p != NULL) {
 993:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, strlen(p));
 994:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       while (*p) {
 995:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         dhcp_option_byte(dhcp, *p++);
 996:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
 997:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
 998:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_NETIF_HOSTNAME */
 999:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1000:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if 0
1001:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
1002:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
1003:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
1004:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1005:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if 0
1006:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
1007:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
1008:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
1009:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* append DHCP message trailer */
1010:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_trailer(dhcp);
1011:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1012:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
1013:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1014:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
1015:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_delete_request(netif);
1016:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1017:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
1018:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
1019:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not alloc
1020:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1021:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->tries++;
1022:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* back-off on retries, but to a maximum of 20 seconds */
1023:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
1024:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
1025:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U
1026:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return result;
1027:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1028:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1029:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1030:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Rebind with a DHCP server for an existing DHCP lease.
1031:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1032:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif network interface which must rebind with a DHCP server
1033:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1034:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t
1035:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_rebind(struct netif *netif)
1036:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1037:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
1038:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result;
1039:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t msecs;
1040:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_NETIF_HOSTNAME
1041:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   const char *p;
1042:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_NETIF_HOSTNAME */
1043:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
1044:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_REBINDING);
1045:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1046:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* create and initialize the DHCP message header */
1047:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = dhcp_create_request(netif);
1048:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result == ERR_OK) {
1049:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1050:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
1051:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_REQUEST);
1052:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1053:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
1054:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
1055:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1056:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_NETIF_HOSTNAME
1057:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     p = (const char*)netif->hostname;
1058:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (p != NULL) {
1059:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, strlen(p));
1060:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       while (*p) {
1061:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         dhcp_option_byte(dhcp, *p++);
1062:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
1063:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
1064:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_NETIF_HOSTNAME */
1065:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1066:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if 0
1067:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
1068:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
1069:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1070:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
1071:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
1072:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
1073:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1074:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_trailer(dhcp);
1075:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1076:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
1077:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1078:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* broadcast to server */
1079:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
1080:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_delete_request(netif);
1081:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
1082:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
1083:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allo
1084:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1085:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->tries++;
1086:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
1087:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
1088:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"
1089:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return result;
1090:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1091:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1092:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1093:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Enter REBOOTING state to verify an existing lease
1094:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1095:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif network interface which must reboot
1096:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1097:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t
1098:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_reboot(struct netif *netif)
1099:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1100:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
1101:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result;
1102:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t msecs;
1103:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
1104:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_REBOOTING);
1105:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1106:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* create and initialize the DHCP message header */
1107:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = dhcp_create_request(netif);
1108:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result == ERR_OK) {
1109:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1110:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
1111:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_REQUEST);
1112:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1113:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
1114:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_short(dhcp, 576);
1115:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1116:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
1117:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
1118:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1119:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_trailer(dhcp);
1120:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1121:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
1122:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1123:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* broadcast to server */
1124:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
1125:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_delete_request(netif);
1126:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
1127:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
1128:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allo
1129:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1130:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->tries++;
1131:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
1132:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
1133:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"
1134:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return result;
1135:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1136:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1137:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1138:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1139:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Release a DHCP lease.
1140:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1141:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif network interface which must release its lease
1142:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1143:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** err_t
1144:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_release(struct netif *netif)
1145:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1146:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
1147:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   err_t result;
1148:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t msecs;
1149:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
1150:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1151:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* idle DHCP client */
1152:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_set_state(dhcp, DHCP_OFF);
1153:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* clean old DHCP offer */
1154:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->server_ip_addr.addr = 0;
1155:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->offered_ip_addr.addr = dhcp->offered_sn_mask.addr = 0;
1156:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->offered_gw_addr.addr = dhcp->offered_bc_addr.addr = 0;
1157:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
1158:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->dns_count = 0;
1159:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   
1160:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* create and initialize the DHCP message header */
1161:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   result = dhcp_create_request(netif);
1162:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (result == ERR_OK) {
1163:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
1164:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_byte(dhcp, DHCP_RELEASE);
1165:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1166:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_option_trailer(dhcp);
1167:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1168:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
1169:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1170:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
1171:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_delete_request(netif);
1172:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"
1173:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   } else {
1174:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not all
1175:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1176:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->tries++;
1177:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
1178:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
1179:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %
1180:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* bring the interface down */
1181:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_down(netif);
1182:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* remove IP address from interface */
1183:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_ipaddr(netif, IP_ADDR_ANY);
1184:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_gw(netif, IP_ADDR_ANY);
1185:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif_set_netmask(netif, IP_ADDR_ANY);
1186:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   
1187:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* TODO: netif_down(netif); */
1188:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return result;
1189:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1190:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1191:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1192:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Remove the DHCP client from the interface.
1193:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1194:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif The network interface to stop DHCP on
1195:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1196:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** void
1197:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_stop(struct netif *netif)
1198:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1199:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
1200:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
1201:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* Remove the flag that says this netif is handled by DHCP. */
1202:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   netif->flags &= ~NETIF_FLAG_DHCP;
1203:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1204:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
1205:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* netif is DHCP configured? */
1206:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp != NULL) {
1207:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if LWIP_DHCP_AUTOIP_COOP
1208:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
1209:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     autoip_stop(netif);
1210:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
1211:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1212:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif /* LWIP_DHCP_AUTOIP_COOP */
1213:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1214:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->pcb != NULL) {
1215:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       udp_remove(dhcp->pcb);
1216:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->pcb = NULL;
1217:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
1218:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL &&
1219:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->options_in == NULL && dhcp->options_in_len == 0);
1220:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     mem_free((void *)dhcp);
1221:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     netif->dhcp = NULL;
1222:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1223:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1224:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1225:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /*
1226:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Set the DHCP state of a DHCP client.
1227:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1228:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * If the state changed, reset the number of tries.
1229:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1230:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * TODO: we might also want to reset the timeout here?
1231:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1232:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
1233:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
1234:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
  18              		.loc 1 1234 0
  19              	.LVL0:
  20 0000 0906     		lsl	r1, r1, #24
  21              	.LVL1:
  22 0002 090E     		lsr	r1, r1, #24
  23              	.LVL2:
1235:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (new_state != dhcp->state) {
  24              		.loc 1 1235 0
  25 0004 837C     		ldrb	r3, [r0, #18]
  26 0006 8B42     		cmp	r3, r1
  27 0008 02D0     		beq	.L3
1236:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->state = new_state;
  28              		.loc 1 1236 0
  29 000a 8174     		strb	r1, [r0, #18]
1237:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->tries = 0;
  30              		.loc 1 1237 0
  31 000c 0023     		mov	r3, #0
  32 000e C374     		strb	r3, [r0, #19]
  33              	.L3:
1238:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1239:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
  34              		.loc 1 1239 0
  35              		@ sp needed for prologue
  36 0010 7047     		bx	lr
  37              	.LFE309:
  39 0012 C046     		.align	2
  40              		.code	16
  41              		.thumb_func
  43              	dhcp_option:
  44              	.LFB310:
1240:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1241:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /*
1242:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Concatenate an option type and length field to the outgoing
1243:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * DHCP message.
1244:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1245:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1246:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
1247:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
1248:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
  45              		.loc 1 1248 0
  46 0014 10B5     		push	{r4, lr}
  47              	.LCFI0:
  48              	.LVL3:
1249:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->opti
1250:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  49              		.loc 1 1250 0
  50 0016 848B     		ldrh	r4, [r0, #28]
  51 0018 8369     		ldr	r3, [r0, #24]
  52 001a 1B19     		add	r3, r3, r4
  53 001c F033     		add	r3, r3, #240
  54 001e 1970     		strb	r1, [r3]
  55 0020 0134     		add	r4, r4, #1
  56 0022 2404     		lsl	r4, r4, #16
  57 0024 240C     		lsr	r4, r4, #16
1251:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  58              		.loc 1 1251 0
  59 0026 8369     		ldr	r3, [r0, #24]
  60 0028 1B19     		add	r3, r3, r4
  61 002a F033     		add	r3, r3, #240
  62 002c 1A70     		strb	r2, [r3]
  63 002e 0134     		add	r4, r4, #1
  64 0030 8483     		strh	r4, [r0, #28]
1252:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
  65              		.loc 1 1252 0
  66              		@ sp needed for prologue
  67 0032 10BC     		pop	{r4}
  68 0034 01BC     		pop	{r0}
  69 0036 0047     		bx	r0
  70              	.LFE310:
  72              		.align	2
  73              		.code	16
  74              		.thumb_func
  76              	dhcp_option_byte:
  77              	.LFB311:
1253:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /*
1254:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Concatenate a single byte to the outgoing DHCP message.
1255:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1256:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1257:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
1258:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_option_byte(struct dhcp *dhcp, u8_t value)
1259:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
  78              		.loc 1 1259 0
  79              	.LVL4:
1260:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len <
1261:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = value;
  80              		.loc 1 1261 0
  81 0038 828B     		ldrh	r2, [r0, #28]
  82 003a 8369     		ldr	r3, [r0, #24]
  83 003c 9B18     		add	r3, r3, r2
  84 003e F033     		add	r3, r3, #240
  85 0040 1970     		strb	r1, [r3]
  86 0042 0132     		add	r2, r2, #1
  87 0044 8283     		strh	r2, [r0, #28]
1262:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
  88              		.loc 1 1262 0
  89              		@ sp needed for prologue
  90 0046 7047     		bx	lr
  91              	.LFE311:
  93              		.align	2
  94              		.code	16
  95              		.thumb_func
  97              	dhcp_option_short:
  98              	.LFB312:
1263:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1264:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
1265:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_option_short(struct dhcp *dhcp, u16_t value)
1266:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
  99              		.loc 1 1266 0
 100 0048 10B5     		push	{r4, lr}
 101              	.LCFI1:
 102              	.LVL5:
 103 004a 0904     		lsl	r1, r1, #16
 104              	.LVL6:
 105 004c 0C0C     		lsr	r4, r1, #16
 106              	.LVL7:
1267:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out
1268:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 107              		.loc 1 1268 0
 108 004e 828B     		ldrh	r2, [r0, #28]
 109 0050 8369     		ldr	r3, [r0, #24]
 110 0052 9B18     		add	r3, r3, r2
 111 0054 F033     		add	r3, r3, #240
 112 0056 090E     		lsr	r1, r1, #24
 113 0058 1970     		strb	r1, [r3]
 114 005a 0132     		add	r2, r2, #1
 115 005c 1204     		lsl	r2, r2, #16
 116 005e 120C     		lsr	r2, r2, #16
1269:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 117              		.loc 1 1269 0
 118 0060 8369     		ldr	r3, [r0, #24]
 119 0062 9B18     		add	r3, r3, r2
 120 0064 F033     		add	r3, r3, #240
 121 0066 1C70     		strb	r4, [r3]
 122 0068 0132     		add	r2, r2, #1
 123 006a 8283     		strh	r2, [r0, #28]
1270:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 124              		.loc 1 1270 0
 125              		@ sp needed for prologue
 126              	.LVL8:
 127 006c 10BC     		pop	{r4}
 128 006e 01BC     		pop	{r0}
 129 0070 0047     		bx	r0
 130              	.LFE312:
 132 0072 C046     		.align	2
 133              		.code	16
 134              		.thumb_func
 136              	dhcp_option_long:
 137              	.LFB313:
1271:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1272:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
1273:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_option_long(struct dhcp *dhcp, u32_t value)
1274:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 138              		.loc 1 1274 0
 139 0074 10B5     		push	{r4, lr}
 140              	.LCFI2:
 141              	.LVL9:
1275:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_
1276:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 142              		.loc 1 1276 0
 143 0076 828B     		ldrh	r2, [r0, #28]
 144 0078 8369     		ldr	r3, [r0, #24]
 145 007a 9B18     		add	r3, r3, r2
 146 007c F033     		add	r3, r3, #240
 147 007e 0C0E     		lsr	r4, r1, #24
 148 0080 1C70     		strb	r4, [r3]
 149 0082 0132     		add	r2, r2, #1
 150 0084 1204     		lsl	r2, r2, #16
 151 0086 120C     		lsr	r2, r2, #16
1277:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 152              		.loc 1 1277 0
 153 0088 8369     		ldr	r3, [r0, #24]
 154 008a 9B18     		add	r3, r3, r2
 155 008c F033     		add	r3, r3, #240
 156 008e 0C0C     		lsr	r4, r1, #16
 157 0090 1C70     		strb	r4, [r3]
 158 0092 0132     		add	r2, r2, #1
 159 0094 1204     		lsl	r2, r2, #16
 160 0096 120C     		lsr	r2, r2, #16
1278:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 161              		.loc 1 1278 0
 162 0098 8369     		ldr	r3, [r0, #24]
 163 009a 9B18     		add	r3, r3, r2
 164 009c F033     		add	r3, r3, #240
 165 009e 0C0A     		lsr	r4, r1, #8
 166 00a0 1C70     		strb	r4, [r3]
 167 00a2 0132     		add	r2, r2, #1
 168 00a4 1204     		lsl	r2, r2, #16
 169 00a6 120C     		lsr	r2, r2, #16
1279:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 170              		.loc 1 1279 0
 171 00a8 8369     		ldr	r3, [r0, #24]
 172 00aa 9B18     		add	r3, r3, r2
 173 00ac F033     		add	r3, r3, #240
 174 00ae 1970     		strb	r1, [r3]
 175 00b0 0132     		add	r2, r2, #1
 176 00b2 8283     		strh	r2, [r0, #28]
1280:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 177              		.loc 1 1280 0
 178              		@ sp needed for prologue
 179 00b4 10BC     		pop	{r4}
 180 00b6 01BC     		pop	{r0}
 181 00b8 0047     		bx	r0
 182              	.LFE313:
 184 00ba C046     		.align	2
 185              		.code	16
 186              		.thumb_func
 188              	dhcp_option_trailer:
 189              	.LFB319:
1281:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1282:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1283:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Extract the DHCP message and the DHCP options.
1284:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1285:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Extract the DHCP message and the DHCP options, each into a contiguous
1286:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * piece of memory. As a DHCP message is variable sized by its options,
1287:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * and also allows overriding some fields for options, the easy approach
1288:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * is to first unfold the options into a conitguous piece of memory, and
1289:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * use that further on.
1290:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1291:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1292:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t
1293:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_unfold_reply(struct dhcp *dhcp, struct pbuf *p)
1294:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1295:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t ret;
1296:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("dhcp != NULL", (dhcp != NULL), return ERR_ARG;);
1297:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* free any left-overs from previous unfolds */
1298:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_free_reply(dhcp);
1299:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* options present? */
1300:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (p->tot_len > (sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN)) {
1301:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->options_in_len = p->tot_len - (sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
1302:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->options_in = mem_malloc(dhcp->options_in_len);
1303:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->options_in == NULL) {
1304:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
1305:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         ("dhcp_unfold_reply(): could not allocate dhcp->options\n"));
1306:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->options_in_len = 0;
1307:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       return ERR_MEM;
1308:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
1309:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1310:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_in = mem_malloc(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
1311:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->msg_in == NULL) {
1312:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
1313:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       ("dhcp_unfold_reply(): could not allocate dhcp->msg_in\n"));
1314:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->options_in != NULL) {
1315:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       mem_free(dhcp->options_in);
1316:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->options_in = NULL;
1317:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->options_in_len = 0;
1318:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
1319:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     return ERR_MEM;
1320:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1321:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1322:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /** copy the DHCP message without options */
1323:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   ret = pbuf_copy_partial(p, dhcp->msg_in, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN, 0);
1324:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("ret == sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN", ret == sizeof(struct dhcp_msg) -
1325:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_unfold_reply(): copied %"U16_F" bytes into dhcp->
1326:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****      sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN));
1327:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1328:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->options_in != NULL) {
1329:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /** copy the DHCP options */
1330:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     ret = pbuf_copy_partial(p, dhcp->options_in, dhcp->options_in_len, sizeof(struct dhcp_msg) - DH
1331:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_ASSERT("ret == dhcp->options_in_len", ret == dhcp->options_in_len);
1332:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_unfold_reply(): copied %"U16_F" bytes to dhcp->
1333:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->options_in_len));
1334:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1335:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_UNUSED_ARG(ret);
1336:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return ERR_OK;
1337:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1338:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1339:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1340:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Free the incoming DHCP message including contiguous copy of
1341:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * its DHCP options.
1342:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1343:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_free_reply(struct dhcp *dhcp)
1344:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1345:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->msg_in != NULL) {
1346:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     mem_free((void *)dhcp->msg_in);
1347:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->msg_in = NULL;
1348:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1349:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->options_in) {
1350:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     mem_free(dhcp->options_in);
1351:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->options_in = NULL;
1352:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->options_in_len = 0;
1353:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1354:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG, ("dhcp_free_reply(): free'd\n"));
1355:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1356:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1357:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1358:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * If an incoming DHCP message is in response to us, then trigger the state machine
1359:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1360:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t p
1361:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1362:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct netif *netif = (struct netif *)arg;
1363:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp = netif->dhcp;
1364:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
1365:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u8_t *options_ptr;
1366:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u8_t msg_type;
1367:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u8_t i;
1368:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F
1369:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     (u16_t)(ntohl(addr->addr) >> 24 & 0xff), (u16_t)(ntohl(addr->addr) >> 16 & 0xff),
1370:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     (u16_t)(ntohl(addr->addr) >>  8 & 0xff), (u16_t)(ntohl(addr->addr) & 0xff), port));
1371:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
1372:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
1373:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* prevent warnings about unused arguments */
1374:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_UNUSED_ARG(pcb);
1375:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_UNUSED_ARG(addr);
1376:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_UNUSED_ARG(port);
1377:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1378:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL &&
1379:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->options_in == NULL && dhcp->options_in_len == 0);
1380:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1381:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (p->len < DHCP_MIN_REPLY_LEN) {
1382:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message too shor
1383:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     goto free_pbuf_and_return;
1384:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1385:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1386:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (reply_msg->op != DHCP_BOOTREPLY) {
1387:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, b
1388:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     goto free_pbuf_and_return;
1389:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1390:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* iterate through hardware address and match against DHCP message */
1391:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   for (i = 0; i < netif->hwaddr_len; i++) {
1392:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
1393:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
1394:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
1395:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
1396:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       goto free_pbuf_and_return;
1397:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
1398:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1399:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* match transaction ID against what we expected */
1400:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (ntohl(reply_msg->xid) != dhcp->xid) {
1401:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
1402:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->x
1403:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     goto free_pbuf_and_return;
1404:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1405:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* option fields could be unfold? */
1406:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp_unfold_reply(dhcp, p) != ERR_OK) {
1407:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
1408:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       ("problem unfolding DHCP message - too short on memory?\n"));
1409:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     goto free_pbuf_and_return;
1410:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1411:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1412:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
1413:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* obtain pointer to DHCP message type */
1414:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   options_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_MESSAGE_TYPE);
1415:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (options_ptr == NULL) {
1416:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE op
1417:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     goto free_pbuf_and_return;
1418:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1419:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1420:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* read DHCP message type */
1421:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   msg_type = dhcp_get_option_byte(options_ptr + 2);
1422:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* message type is DHCP ACK? */
1423:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (msg_type == DHCP_ACK) {
1424:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
1425:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* in requesting state? */
1426:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (dhcp->state == DHCP_REQUESTING) {
1427:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_handle_ack(netif);
1428:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->request_timeout = 0;
1429:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if DHCP_DOES_ARP_CHECK
1430:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* check if the acknowledged lease address is already in use */
1431:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_check(netif);
1432:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #else
1433:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* bind interface to the acknowledged lease address */
1434:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_bind(netif);
1435:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
1436:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
1437:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* already bound to the given lease address? */
1438:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == 
1439:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp->request_timeout = 0;
1440:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       dhcp_bind(netif);
1441:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
1442:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1443:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* received a DHCP_NAK in appropriate state? */
1444:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   else if ((msg_type == DHCP_NAK) &&
1445:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
1446:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****      (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
1447:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
1448:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->request_timeout = 0;
1449:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_handle_nak(netif);
1450:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1451:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* received a DHCP_OFFER in DHCP_SELECTING state? */
1452:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
1453:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
1454:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->request_timeout = 0;
1455:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* remember offered lease */
1456:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp_handle_offer(netif);
1457:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1458:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** free_pbuf_and_return:
1459:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp_free_reply(dhcp);
1460:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   pbuf_free(p);
1461:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1462:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1463:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1464:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Create a DHCP request, fill in common headers
1465:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1466:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
1467:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1468:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static err_t
1469:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_create_request(struct netif *netif)
1470:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1471:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp;
1472:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t i;
1473:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #ifndef DHCP_GLOBAL_XID
1474:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /** default global transaction identifier starting value (easy to match
1475:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****    *  with a packet analyser). We simply increment for each new request.
1476:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****    *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
1477:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****    *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
1478:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   static u32_t xid = 0xABCD0000;
1479:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #else
1480:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   static u32_t xid;
1481:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   static u8_t xid_initialised = 0;
1482:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (!xid_initialised) {
1483:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     xid = DHCP_GLOBAL_XID;
1484:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     xid_initialised = !xid_initialised;
1485:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1486:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
1487:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("dhcp_create_request: netif != NULL", (netif != NULL), return ERR_ARG;);
1488:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp = netif->dhcp;
1489:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("dhcp_create_request: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
1490:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_create_request: dhcp->p_out == NULL", dhcp->p_out == NULL);
1491:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_create_request: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
1492:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
1493:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->p_out == NULL) {
1494:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
1495:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       ("dhcp_create_request(): could not allocate pbuf\n"));
1496:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     return ERR_MEM;
1497:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1498:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_create_request: check that first pbuf can hold struct dhcp_msg",
1499:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****            (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
1500:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1501:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* reuse transaction identifier in retransmissions */
1502:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->tries==0)
1503:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       xid++;
1504:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->xid = xid;
1505:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
1506:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****               ("transaction id xid(%"X32_F")\n", xid));
1507:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1508:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
1509:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1510:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->op = DHCP_BOOTREQUEST;
1511:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* TODO: make link layer independent */
1512:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->htype = DHCP_HTYPE_ETH;
1513:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* TODO: make link layer independent */
1514:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->hlen = DHCP_HLEN_ETH;
1515:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->hops = 0;
1516:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->xid = htonl(dhcp->xid);
1517:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->secs = 0;
1518:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->flags = 0;
1519:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->ciaddr.addr = 0;
1520:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->state==DHCP_BOUND || dhcp->state==DHCP_RENEWING || dhcp->state==DHCP_REBINDING) {
1521:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->msg_out->ciaddr.addr = netif->ip_addr.addr;
1522:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1523:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->yiaddr.addr = 0;
1524:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->siaddr.addr = 0;
1525:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->giaddr.addr = 0;
1526:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   for (i = 0; i < DHCP_CHADDR_LEN; i++) {
1527:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* copy netif hardware address, pad with zeroes */
1528:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
1529:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1530:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   for (i = 0; i < DHCP_SNAME_LEN; i++) {
1531:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->msg_out->sname[i] = 0;
1532:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1533:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   for (i = 0; i < DHCP_FILE_LEN; i++) {
1534:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->msg_out->file[i] = 0;
1535:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1536:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->cookie = htonl(0x63825363UL);
1537:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->options_out_len = 0;
1538:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* fill options field with an incrementing array (for debugging purposes) */
1539:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
1540:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
1541:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1542:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return ERR_OK;
1543:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1544:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1545:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1546:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Free previously allocated memory used to send a DHCP request.
1547:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1548:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param netif the netif under DHCP control
1549:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1550:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
1551:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_delete_request(struct netif *netif)
1552:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1553:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   struct dhcp *dhcp;
1554:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("dhcp_delete_request: netif != NULL", (netif != NULL), return;);
1555:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp = netif->dhcp;
1556:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("dhcp_delete_request: dhcp != NULL", (dhcp != NULL), return;);
1557:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_delete_request: dhcp->p_out != NULL", dhcp->p_out != NULL);
1558:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_delete_request: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
1559:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if (dhcp->p_out != NULL) {
1560:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     pbuf_free(dhcp->p_out);
1561:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1562:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->p_out = NULL;
1563:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out = NULL;
1564:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1565:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1566:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1567:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Add a DHCP message trailer
1568:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1569:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Adds the END option to the DHCP message, and if
1570:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * necessary, up to three padding bytes.
1571:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1572:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param dhcp DHCP state structure
1573:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1574:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static void
1575:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_option_trailer(struct dhcp *dhcp)
1576:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 190              		.loc 1 1576 0
 191 00bc 10B5     		push	{r4, lr}
 192              	.LCFI3:
 193              	.LVL10:
1577:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 194              		.loc 1 1577 0
 195 00be 0028     		cmp	r0, #0
 196 00c0 16D0     		beq	.L16
1578:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
1579:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_
1580:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 197              		.loc 1 1580 0
 198 00c2 818B     		ldrh	r1, [r0, #28]
 199 00c4 8269     		ldr	r2, [r0, #24]
 200 00c6 5218     		add	r2, r2, r1
 201 00c8 F032     		add	r2, r2, #240
 202 00ca 0123     		mov	r3, #1
 203 00cc 5B42     		neg	r3, r3
 204 00ce 1370     		strb	r3, [r2]
 205 00d0 0131     		add	r1, r1, #1
 206 00d2 8183     		strh	r1, [r0, #28]
1581:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* packet is too small, or not 4 byte aligned? */
1582:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   while ((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) {
 207              		.loc 1 1582 0
 208 00d4 0324     		mov	r4, #3
1583:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* LWIP_DEBUGF(DHCP_DEBUG,("dhcp_option_trailer:dhcp->options_out_len=%"U16_F", DHCP_OPTIONS_LE
1584:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_ou
1585:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* add a fill/padding byte */
1586:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 209              		.loc 1 1586 0
 210 00d6 0021     		mov	r1, #0
 211 00d8 05E0     		b	.L14
 212              	.L15:
 213 00da 8369     		ldr	r3, [r0, #24]
 214 00dc 9B18     		add	r3, r3, r2
 215 00de F033     		add	r3, r3, #240
 216 00e0 1970     		strb	r1, [r3]
 217 00e2 531C     		add	r3, r2, #1
 218 00e4 8383     		strh	r3, [r0, #28]
 219              	.L14:
 220              		.loc 1 1582 0
 221 00e6 828B     		ldrh	r2, [r0, #28]
 222 00e8 432A     		cmp	r2, #67
 223 00ea F6D9     		bls	.L15
 224 00ec 2242     		tst	r2, r4
 225 00ee F4D1     		bne	.L15
 226              	.L16:
1587:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1588:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 227              		.loc 1 1588 0
 228              		@ sp needed for prologue
 229 00f0 10BC     		pop	{r4}
 230 00f2 01BC     		pop	{r0}
 231 00f4 0047     		bx	r0
 232              	.LFE319:
 234 00f6 C046     		.align	2
 235              		.code	16
 236              		.thumb_func
 238              	dhcp_get_option_ptr:
 239              	.LFB320:
1589:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1590:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1591:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Find the offset of a DHCP option inside the DHCP message.
1592:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1593:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param dhcp DHCP client
1594:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param option_type
1595:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1596:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @return a byte offset into the UDP message where the option was found, or
1597:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * zero if the given option was not found.
1598:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1599:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static u8_t *dhcp_get_option_ptr(struct dhcp *dhcp, u8_t option_type)
1600:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 240              		.loc 1 1600 0
 241 00f8 F0B5     		push	{r4, r5, r6, r7, lr}
 242              	.LCFI4:
 243              	.LVL11:
 244 00fa 041C     		mov	r4, r0
 245 00fc 0906     		lsl	r1, r1, #24
 246              	.LVL12:
 247 00fe 0D0E     		lsr	r5, r1, #24
 248              	.LVL13:
1601:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u8_t overload = DHCP_OVERLOAD_NONE;
1602:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1603:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   /* options available? */
1604:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   if ((dhcp->options_in != NULL) && (dhcp->options_in_len > 0)) {
 249              		.loc 1 1604 0
 250 0100 C368     		ldr	r3, [r0, #12]
 251 0102 002B     		cmp	r3, #0
 252 0104 54D0     		beq	.L18
 253 0106 068A     		ldrh	r6, [r0, #16]
 254 0108 002E     		cmp	r6, #0
 255 010a 51D0     		beq	.L18
 256              	.LBB2:
1605:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* start with options field */
1606:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     u8_t *options = (u8_t *)dhcp->options_in;
 257              		.loc 1 1606 0
 258 010c 191C     		mov	r1, r3
 259              	.LVL14:
1607:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     u16_t offset = 0;
1608:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
1609:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     while ((offset < dhcp->options_in_len) && (options[offset] != DHCP_OPTION_END)) {
 260              		.loc 1 1609 0
 261 010e 1A78     		ldrb	r2, [r3]
 262 0110 FF2A     		cmp	r2, #255
 263 0112 4DD0     		beq	.L18
 264              	.LVL15:
 265 0114 181C     		mov	r0, r3
 266              	.LVL16:
 267 0116 0027     		mov	r7, #0
 268              	.LVL17:
 269 0118 0023     		mov	r3, #0
 270              	.LVL18:
 271              	.L23:
1610:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
1611:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* are the sname and/or file field overloaded with options? */
1612:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       if (options[offset] == DHCP_OPTION_OVERLOAD) {
 272              		.loc 1 1612 0
 273 011a 342A     		cmp	r2, #52
 274 011c 07D1     		bne	.L19
1613:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded message detected\n"));
1614:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         /* skip option type and length */
1615:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         offset += 2;
 275              		.loc 1 1615 0
 276 011e 0233     		add	r3, r3, #2
 277              	.LVL19:
 278 0120 1B04     		lsl	r3, r3, #16
 279 0122 1B0C     		lsr	r3, r3, #16
 280              	.LVL20:
1616:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         overload = options[offset++];
 281              		.loc 1 1616 0
 282 0124 CF5C     		ldrb	r7, [r1, r3]
 283              	.LVL21:
 284 0126 0133     		add	r3, r3, #1
 285              	.LVL22:
 286 0128 1B04     		lsl	r3, r3, #16
 287 012a 1B0C     		lsr	r3, r3, #16
 288              	.LVL23:
 289 012c 0BE0     		b	.L20
 290              	.L19:
1617:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
1618:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* requested option found */
1619:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       else if (options[offset] == option_type) {
 291              		.loc 1 1619 0
 292 012e AA42     		cmp	r2, r5
 293 0130 3FD0     		beq	.L21
1620:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("option found at offset %"U16_F" in options\n", o
1621:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         return &options[offset];
1622:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* skip option */
1623:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       } else {
1624:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****          LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", options[offset]));
1625:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         /* skip option type */
1626:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         offset++;
 294              		.loc 1 1626 0
 295 0132 0133     		add	r3, r3, #1
 296              	.LVL24:
 297 0134 1B04     		lsl	r3, r3, #16
 298 0136 1B0C     		lsr	r3, r3, #16
 299              	.LVL25:
1627:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         /* skip option length, and then length bytes */
1628:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         offset += 1 + options[offset];
 300              		.loc 1 1628 0
 301 0138 CA5C     		ldrb	r2, [r1, r3]
 302 013a 0133     		add	r3, r3, #1
 303              	.LVL26:
 304 013c 1B04     		lsl	r3, r3, #16
 305 013e 1B0C     		lsr	r3, r3, #16
 306 0140 9B18     		add	r3, r3, r2
 307 0142 1B04     		lsl	r3, r3, #16
 308 0144 1B0C     		lsr	r3, r3, #16
 309              	.LVL27:
 310              	.L20:
 311              		.loc 1 1609 0
 312 0146 9E42     		cmp	r6, r3
 313 0148 03D9     		bls	.L22
 314 014a C818     		add	r0, r1, r3
 315              	.LVL28:
 316 014c 0278     		ldrb	r2, [r0]
 317 014e FF2A     		cmp	r2, #255
 318 0150 E3D1     		bne	.L23
 319              	.LVL29:
 320              	.L22:
1629:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
1630:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
1631:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     /* is this an overloaded message? */
1632:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     if (overload != DHCP_OVERLOAD_NONE) {
 321              		.loc 1 1632 0
 322 0152 002F     		cmp	r7, #0
 323 0154 2CD0     		beq	.L18
 324              	.LBB3:
1633:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       u16_t field_len;
1634:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       if (overload == DHCP_OVERLOAD_FILE) {
 325              		.loc 1 1634 0
 326 0156 012F     		cmp	r7, #1
 327 0158 04D1     		bne	.L24
1635:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
1636:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         options = (u8_t *)&dhcp->msg_in->file;
 328              		.loc 1 1636 0
 329 015a A368     		ldr	r3, [r4, #8]
 330              	.LVL30:
 331 015c 181C     		mov	r0, r3
 332 015e 6C30     		add	r0, r0, #108
 333 0160 8024     		mov	r4, #128
 334              	.LVL31:
 335 0162 0AE0     		b	.L25
 336              	.LVL32:
 337              	.L24:
1637:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         field_len = DHCP_FILE_LEN;
1638:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       } else if (overload == DHCP_OVERLOAD_SNAME) {
 338              		.loc 1 1638 0
 339 0164 022F     		cmp	r7, #2
 340 0166 04D1     		bne	.L26
1639:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
1640:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         options = (u8_t *)&dhcp->msg_in->sname;
 341              		.loc 1 1640 0
 342 0168 A368     		ldr	r3, [r4, #8]
 343              	.LVL33:
 344 016a 181C     		mov	r0, r3
 345 016c 2C30     		add	r0, r0, #44
 346 016e 4024     		mov	r4, #64
 347              	.LVL34:
 348 0170 03E0     		b	.L25
 349              	.LVL35:
 350              	.L26:
1641:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         field_len = DHCP_SNAME_LEN;
1642:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* TODO: check if else if () is necessary */
1643:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       } else {
1644:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
1645:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         options = (u8_t *)&dhcp->msg_in->sname;
 351              		.loc 1 1645 0
 352 0172 A368     		ldr	r3, [r4, #8]
 353              	.LVL36:
 354 0174 181C     		mov	r0, r3
 355 0176 2C30     		add	r0, r0, #44
 356 0178 C024     		mov	r4, #192
 357              	.LVL37:
 358              	.L25:
1646:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         field_len = DHCP_FILE_LEN + DHCP_SNAME_LEN;
1647:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
1648:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       offset = 0;
1649:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1650:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       /* at least 1 byte to read and no end marker */
1651:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       while ((offset < field_len) && (options[offset] != DHCP_OPTION_END)) {
 359              		.loc 1 1651 0
 360 017a 0378     		ldrb	r3, [r0]
 361 017c FF2B     		cmp	r3, #255
 362 017e 17D0     		beq	.L18
1652:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         if (options[offset] == option_type) {
 363              		.loc 1 1652 0
 364 0180 9D42     		cmp	r5, r3
 365 0182 04D1     		bne	.L33
 366 0184 15E0     		b	.L21
 367              	.LVL38:
 368              	.L29:
 369 0186 9542     		cmp	r5, r2
 370 0188 02D1     		bne	.L28
 371 018a 081C     		mov	r0, r1
 372 018c 11E0     		b	.L21
 373              	.LVL39:
 374              	.L33:
 375 018e 0023     		mov	r3, #0
 376              	.LVL40:
 377              	.L28:
1653:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("option found at offset=%"U16_F"\n", offset));
1654:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****           return &options[offset];
1655:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         /* skip option */
1656:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         } else {
1657:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****           LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("skipping option %"U16_F"\n", options[offset]))
1658:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****           /* skip option type */
1659:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****           offset++;
 378              		.loc 1 1659 0
 379 0190 0133     		add	r3, r3, #1
 380              	.LVL41:
 381 0192 1B04     		lsl	r3, r3, #16
 382 0194 1B0C     		lsr	r3, r3, #16
 383              	.LVL42:
1660:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****           offset += 1 + options[offset];
 384              		.loc 1 1660 0
 385 0196 C25C     		ldrb	r2, [r0, r3]
 386 0198 0133     		add	r3, r3, #1
 387              	.LVL43:
 388 019a 1B04     		lsl	r3, r3, #16
 389 019c 1B0C     		lsr	r3, r3, #16
 390 019e 9B18     		add	r3, r3, r2
 391 01a0 1B04     		lsl	r3, r3, #16
 392 01a2 1B0C     		lsr	r3, r3, #16
 393              	.LVL44:
 394              		.loc 1 1651 0
 395 01a4 9C42     		cmp	r4, r3
 396 01a6 03D9     		bls	.L18
 397              	.LVL45:
 398 01a8 C118     		add	r1, r0, r3
 399              	.LVL46:
 400 01aa 0A78     		ldrb	r2, [r1]
 401 01ac FF2A     		cmp	r2, #255
 402 01ae EAD1     		bne	.L29
 403              	.LVL47:
 404              	.L18:
 405 01b0 0020     		mov	r0, #0
 406              	.LVL48:
 407              	.L21:
 408              	.LVL49:
 409              	.LBE3:
 410              	.LBE2:
1661:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****         }
1662:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****       }
1663:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****     }
1664:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   }
1665:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return NULL;
1666:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 411              		.loc 1 1666 0
 412              		@ sp needed for prologue
 413              	.LVL50:
 414              	.LVL51:
 415              	.LVL52:
 416 01b2 F0BC     		pop	{r4, r5, r6, r7}
 417 01b4 02BC     		pop	{r1}
 418 01b6 0847     		bx	r1
 419              	.LFE320:
 421              		.align	2
 422              		.code	16
 423              		.thumb_func
 425              	dhcp_get_option_byte:
 426              	.LFB321:
1667:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1668:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1669:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Return the byte of DHCP option data.
1670:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1671:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param client DHCP client.
1672:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param ptr pointer obtained by dhcp_get_option_ptr().
1673:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1674:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @return byte value at the given address.
1675:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1676:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static u8_t
1677:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_get_option_byte(u8_t *ptr)
1678:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 427              		.loc 1 1678 0
 428              	.LVL53:
 429              		.loc 1 1678 0
 430 01b8 0078     		ldrb	r0, [r0]
 431              	.LVL54:
1679:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG, ("option byte value=%"U16_F"\n", (u16_t)(*ptr)));
1680:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return *ptr;
1681:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 432              		.loc 1 1681 0
 433              		@ sp needed for prologue
 434 01ba 7047     		bx	lr
 435              	.LFE321:
 437              		.align	2
 438              		.code	16
 439              		.thumb_func
 441              	dhcp_get_option_long:
 442              	.LFB322:
1682:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1683:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #if 0 /* currently unused */
1684:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1685:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Return the 16-bit value of DHCP option data.
1686:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1687:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param client DHCP client.
1688:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param ptr pointer obtained by dhcp_get_option_ptr().
1689:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1690:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @return byte value at the given address.
1691:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1692:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static u16_t
1693:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** dhcp_get_option_short(u8_t *ptr)
1694:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
1695:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u16_t value;
1696:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   value = *ptr++ << 8;
1697:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   value |= *ptr;
1698:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG, ("option short value=%"U16_F"\n", value));
1699:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return value;
1700:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
1701:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** #endif
1702:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** 
1703:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** /**
1704:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * Return the 32-bit value of DHCP option data.
1705:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1706:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param client DHCP client.
1707:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @param ptr pointer obtained by dhcp_get_option_ptr().
1708:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  *
1709:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  * @return byte value at the given address.
1710:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****  */
1711:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** static u32_t dhcp_get_option_long(u8_t *ptr)
1712:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** {
 443              		.loc 1 1712 0
 444              	.LVL55:
1713:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   u32_t value;
1714:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   value = (u32_t)(*ptr++) << 24;
 445              		.loc 1 1714 0
 446 01bc 0378     		ldrb	r3, [r0]
 447 01be 1B06     		lsl	r3, r3, #24
 448              	.LVL56:
 449 01c0 0130     		add	r0, r0, #1
 450              	.LVL57:
1715:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   value |= (u32_t)(*ptr++) << 16;
 451              		.loc 1 1715 0
 452 01c2 421C     		add	r2, r0, #1
 453              	.LVL58:
 454 01c4 0078     		ldrb	r0, [r0]
 455 01c6 0004     		lsl	r0, r0, #16
 456 01c8 1843     		orr	r0, r0, r3
 457              	.LVL59:
1716:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   value |= (u32_t)(*ptr++) << 8;
 458              		.loc 1 1716 0
 459 01ca 1378     		ldrb	r3, [r2]
 460 01cc 1B02     		lsl	r3, r3, #8
 461 01ce 1843     		orr	r0, r0, r3
 462              	.LVL60:
 463 01d0 5378     		ldrb	r3, [r2, #1]
 464 01d2 1843     		orr	r0, r0, r3
 465              	.LVL61:
1717:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   value |= (u32_t)(*ptr++);
1718:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   LWIP_DEBUGF(DHCP_DEBUG, ("option long value=%"U32_F"\n", value));
1719:rtos/common/ethernet/lwIP_132/src/core/dhcp.c ****   return value;
1720:rtos/common/ethernet/lwIP_132/src/core/dhcp.c **** }
 466              		.loc 1 1720 0
 467              		@ sp needed for prologue
 468 01d4 7047     		bx	lr
 469              	.LFE322:
 471 01d6 C046     		.align	2
 472              		.global	dhcp_stop
 473              		.code	16
 474              		.thumb_func
 476              	dhcp_stop:
 477              	.LFB308:
 478              		.loc 1 1198 0
 479 01d8 30B5     		push	{r4, r5, lr}
 480              	.LCFI5:
 481              	.LVL62:
 482 01da 041C     		mov	r4, r0
 483              		.loc 1 1199 0
 484 01dc 056A     		ldr	r5, [r0, #32]
 485              	.LVL63:
 486              		.loc 1 1200 0
 487 01de 0028     		cmp	r0, #0
 488 01e0 12D0     		beq	.L41
 489              		.loc 1 1202 0
 490 01e2 2D23     		mov	r3, #45
 491 01e4 C25C     		ldrb	r2, [r0, r3]
 492 01e6 0821     		mov	r1, #8
 493 01e8 8A43     		bic	r2, r2, r1
 494 01ea C254     		strb	r2, [r0, r3]
 495              		.loc 1 1206 0
 496 01ec 002D     		cmp	r5, #0
 497 01ee 0BD0     		beq	.L41
 498              		.loc 1 1214 0
 499 01f0 6868     		ldr	r0, [r5, #4]
 500              	.LVL64:
 501 01f2 0028     		cmp	r0, #0
 502 01f4 03D0     		beq	.L40
 503              		.loc 1 1215 0
 504 01f6 FFF7FEFF 		bl	udp_remove
 505              		.loc 1 1216 0
 506 01fa 0023     		mov	r3, #0
 507 01fc 6B60     		str	r3, [r5, #4]
 508              	.L40:
 509              		.loc 1 1220 0
 510 01fe 281C     		mov	r0, r5
 511 0200 FFF7FEFF 		bl	mem_free
 512              		.loc 1 1221 0
 513 0204 0023     		mov	r3, #0
 514 0206 2362     		str	r3, [r4, #32]
 515              	.LVL65:
 516              	.L41:
 517              		.loc 1 1223 0
 518              		@ sp needed for prologue
 519              	.LVL66:
 520              	.LVL67:
 521 0208 30BC     		pop	{r4, r5}
 522 020a 01BC     		pop	{r0}
 523 020c 0047     		bx	r0
 524              	.LFE308:
 526 020e C046     		.align	2
 527              		.code	16
 528              		.thumb_func
 530              	dhcp_free_reply:
 531              	.LFB315:
 532              		.loc 1 1344 0
 533 0210 10B5     		push	{r4, lr}
 534              	.LCFI6:
 535              	.LVL68:
 536 0212 041C     		mov	r4, r0
 537              		.loc 1 1345 0
 538 0214 8068     		ldr	r0, [r0, #8]
 539              	.LVL69:
 540 0216 0028     		cmp	r0, #0
 541 0218 03D0     		beq	.L43
 542              		.loc 1 1346 0
 543 021a FFF7FEFF 		bl	mem_free
 544              		.loc 1 1347 0
 545 021e 0023     		mov	r3, #0
 546 0220 A360     		str	r3, [r4, #8]
 547              	.L43:
 548              		.loc 1 1349 0
 549 0222 E068     		ldr	r0, [r4, #12]
 550 0224 0028     		cmp	r0, #0
 551 0226 04D0     		beq	.L45
 552              		.loc 1 1350 0
 553 0228 FFF7FEFF 		bl	mem_free
 554              		.loc 1 1351 0
 555 022c 0023     		mov	r3, #0
 556 022e E360     		str	r3, [r4, #12]
 557              		.loc 1 1352 0
 558 0230 2382     		strh	r3, [r4, #16]
 559              	.L45:
 560              		.loc 1 1355 0
 561              		@ sp needed for prologue
 562              	.LVL70:
 563 0232 10BC     		pop	{r4}
 564 0234 01BC     		pop	{r0}
 565 0236 0047     		bx	r0
 566              	.LFE315:
 568              		.align	2
 569              		.code	16
 570              		.thumb_func
 572              	dhcp_create_request:
 573              	.LFB317:
 574              		.loc 1 1470 0
 575 0238 F0B5     		push	{r4, r5, r6, r7, lr}
 576              	.LCFI7:
 577              	.LVL71:
 578 023a 071C     		mov	r7, r0
 579              		.loc 1 1487 0
 580 023c 0028     		cmp	r0, #0
 581 023e 01D1     		bne	.L47
 582 0240 F620     		mov	r0, #246
 583              	.LVL72:
 584 0242 79E0     		b	.L48
 585              	.LVL73:
 586              	.L47:
 587              		.loc 1 1488 0
 588 0244 066A     		ldr	r6, [r0, #32]
 589              	.LVL74:
 590              		.loc 1 1489 0
 591 0246 002E     		cmp	r6, #0
 592 0248 01D1     		bne	.L49
 593 024a F720     		mov	r0, #247
 594              	.LVL75:
 595 024c 74E0     		b	.L48
 596              	.LVL76:
 597              	.L49:
 598              		.loc 1 1492 0
 599 024e 9A21     		mov	r1, #154
 600 0250 4900     		lsl	r1, r1, #1
 601 0252 0020     		mov	r0, #0
 602              	.LVL77:
 603 0254 0022     		mov	r2, #0
 604 0256 FFF7FEFF 		bl	pbuf_alloc
 605 025a 7061     		str	r0, [r6, #20]
 606              		.loc 1 1493 0
 607 025c 0028     		cmp	r0, #0
 608 025e 01D1     		bne	.L50
 609 0260 FF20     		mov	r0, #255
 610 0262 69E0     		b	.L48
 611              	.L50:
 612              		.loc 1 1502 0
 613 0264 F37C     		ldrb	r3, [r6, #19]
 614 0266 002B     		cmp	r3, #0
 615 0268 03D1     		bne	.L51
 616              		.loc 1 1503 0
 617 026a 364A     		ldr	r2, .L65
 618 026c 1368     		ldr	r3, [r2]
 619 026e 0133     		add	r3, r3, #1
 620 0270 1360     		str	r3, [r2]
 621              	.L51:
 622              		.loc 1 1504 0
 623 0272 344B     		ldr	r3, .L65
 624 0274 1B68     		ldr	r3, [r3]
 625 0276 3360     		str	r3, [r6]
 626              		.loc 1 1508 0
 627 0278 7369     		ldr	r3, [r6, #20]
 628 027a 5B68     		ldr	r3, [r3, #4]
 629 027c B361     		str	r3, [r6, #24]
 630              		.loc 1 1510 0
 631 027e 0122     		mov	r2, #1
 632 0280 1A70     		strb	r2, [r3]
 633              		.loc 1 1512 0
 634 0282 B369     		ldr	r3, [r6, #24]
 635 0284 5A70     		strb	r2, [r3, #1]
 636              		.loc 1 1514 0
 637 0286 B269     		ldr	r2, [r6, #24]
 638 0288 0623     		mov	r3, #6
 639 028a 9370     		strb	r3, [r2, #2]
 640              		.loc 1 1515 0
 641 028c B369     		ldr	r3, [r6, #24]
 642 028e 0024     		mov	r4, #0
 643 0290 DC70     		strb	r4, [r3, #3]
 644              		.loc 1 1516 0
 645 0292 B569     		ldr	r5, [r6, #24]
 646 0294 3068     		ldr	r0, [r6]
 647 0296 FFF7FEFF 		bl	htonl
 648 029a 6860     		str	r0, [r5, #4]
 649              		.loc 1 1517 0
 650 029c B369     		ldr	r3, [r6, #24]
 651 029e 1C81     		strh	r4, [r3, #8]
 652              		.loc 1 1518 0
 653 02a0 B369     		ldr	r3, [r6, #24]
 654 02a2 5C81     		strh	r4, [r3, #10]
 655              		.loc 1 1519 0
 656 02a4 B369     		ldr	r3, [r6, #24]
 657 02a6 DC60     		str	r4, [r3, #12]
 658              		.loc 1 1520 0
 659 02a8 B37C     		ldrb	r3, [r6, #18]
 660 02aa 0A2B     		cmp	r3, #10
 661 02ac 03D0     		beq	.L52
 662 02ae 052B     		cmp	r3, #5
 663 02b0 01D0     		beq	.L52
 664 02b2 042B     		cmp	r3, #4
 665 02b4 02D1     		bne	.L53
 666              	.L52:
 667              		.loc 1 1521 0
 668 02b6 B269     		ldr	r2, [r6, #24]
 669 02b8 7B68     		ldr	r3, [r7, #4]
 670 02ba D360     		str	r3, [r2, #12]
 671              	.L53:
 672              		.loc 1 1523 0
 673 02bc B369     		ldr	r3, [r6, #24]
 674 02be 0022     		mov	r2, #0
 675 02c0 1A61     		str	r2, [r3, #16]
 676              		.loc 1 1524 0
 677 02c2 B369     		ldr	r3, [r6, #24]
 678 02c4 5A61     		str	r2, [r3, #20]
 679              		.loc 1 1525 0
 680 02c6 B369     		ldr	r3, [r6, #24]
 681 02c8 9A61     		str	r2, [r3, #24]
 682 02ca 0021     		mov	r1, #0
 683              		.loc 1 1528 0
 684 02cc 2625     		mov	r5, #38
 685 02ce 8C46     		mov	ip, r1
 686              	.L56:
 687 02d0 B469     		ldr	r4, [r6, #24]
 688 02d2 081C     		mov	r0, r1
 689 02d4 7A5D     		ldrb	r2, [r7, r5]
 690 02d6 0B04     		lsl	r3, r1, #16
 691 02d8 1B0C     		lsr	r3, r3, #16
 692 02da 9A42     		cmp	r2, r3
 693 02dc 01D8     		bhi	.L54
 694 02de 6246     		mov	r2, ip
 695 02e0 02E0     		b	.L55
 696              	.L54:
 697 02e2 7B18     		add	r3, r7, r1
 698 02e4 2733     		add	r3, r3, #39
 699 02e6 1A78     		ldrb	r2, [r3]
 700              	.L55:
 701 02e8 2318     		add	r3, r4, r0
 702 02ea 1A77     		strb	r2, [r3, #28]
 703 02ec 0131     		add	r1, r1, #1
 704              		.loc 1 1526 0
 705 02ee 1029     		cmp	r1, #16
 706 02f0 EED1     		bne	.L56
 707 02f2 0022     		mov	r2, #0
 708              		.loc 1 1531 0
 709 02f4 0021     		mov	r1, #0
 710              	.L57:
 711 02f6 B369     		ldr	r3, [r6, #24]
 712 02f8 9B18     		add	r3, r3, r2
 713 02fa 2C33     		add	r3, r3, #44
 714 02fc 1970     		strb	r1, [r3]
 715 02fe 0132     		add	r2, r2, #1
 716              		.loc 1 1530 0
 717 0300 402A     		cmp	r2, #64
 718 0302 F8D1     		bne	.L57
 719 0304 0022     		mov	r2, #0
 720              		.loc 1 1534 0
 721 0306 0021     		mov	r1, #0
 722              	.L58:
 723 0308 B369     		ldr	r3, [r6, #24]
 724 030a 9B18     		add	r3, r3, r2
 725 030c 6C33     		add	r3, r3, #108
 726 030e 1970     		strb	r1, [r3]
 727 0310 0132     		add	r2, r2, #1
 728              		.loc 1 1533 0
 729 0312 802A     		cmp	r2, #128
 730 0314 F8D1     		bne	.L58
 731              		.loc 1 1536 0
 732 0316 B469     		ldr	r4, [r6, #24]
 733 0318 0B48     		ldr	r0, .L65+4
 734 031a FFF7FEFF 		bl	htonl
 735 031e EC23     		mov	r3, #236
 736 0320 E050     		str	r0, [r4, r3]
 737              		.loc 1 1537 0
 738 0322 0023     		mov	r3, #0
 739 0324 B383     		strh	r3, [r6, #28]
 740 0326 0022     		mov	r2, #0
 741              	.L59:
 742              		.loc 1 1540 0
 743 0328 B369     		ldr	r3, [r6, #24]
 744 032a 9B18     		add	r3, r3, r2
 745 032c F033     		add	r3, r3, #240
 746 032e 1A70     		strb	r2, [r3]
 747 0330 0132     		add	r2, r2, #1
 748              		.loc 1 1539 0
 749 0332 442A     		cmp	r2, #68
 750 0334 F8D1     		bne	.L59
 751 0336 0020     		mov	r0, #0
 752              	.L48:
 753 0338 0006     		lsl	r0, r0, #24
 754 033a 0016     		asr	r0, r0, #24
 755              		.loc 1 1543 0
 756              		@ sp needed for prologue
 757              	.LVL78:
 758              	.LVL79:
 759 033c F0BC     		pop	{r4, r5, r6, r7}
 760 033e 02BC     		pop	{r1}
 761 0340 0847     		bx	r1
 762              	.L66:
 763 0342 C046     		.align	2
 764              	.L65:
 765 0344 00000000 		.word	xid.5836
 766 0348 63538263 		.word	1669485411
 767              	.LFE317:
 769              		.align	2
 770              		.code	16
 771              		.thumb_func
 773              	dhcp_delete_request:
 774              	.LFB318:
 775              		.loc 1 1552 0
 776 034c 10B5     		push	{r4, lr}
 777              	.LCFI8:
 778              	.LVL80:
 779              		.loc 1 1554 0
 780 034e 0028     		cmp	r0, #0
 781 0350 0AD0     		beq	.L70
 782              		.loc 1 1555 0
 783 0352 046A     		ldr	r4, [r0, #32]
 784              	.LVL81:
 785              		.loc 1 1556 0
 786 0354 002C     		cmp	r4, #0
 787 0356 07D0     		beq	.L70
 788              		.loc 1 1559 0
 789 0358 6069     		ldr	r0, [r4, #20]
 790              	.LVL82:
 791 035a 0028     		cmp	r0, #0
 792 035c 01D0     		beq	.L69
 793              		.loc 1 1560 0
 794 035e FFF7FEFF 		bl	pbuf_free
 795              	.L69:
 796              		.loc 1 1562 0
 797 0362 0023     		mov	r3, #0
 798 0364 6361     		str	r3, [r4, #20]
 799              		.loc 1 1563 0
 800 0366 A361     		str	r3, [r4, #24]
 801              	.LVL83:
 802              	.L70:
 803              		.loc 1 1564 0
 804              		@ sp needed for prologue
 805              	.LVL84:
 806 0368 10BC     		pop	{r4}
 807 036a 01BC     		pop	{r0}
 808 036c 0047     		bx	r0
 809              	.LFE318:
 811              		.global	__divsi3
 812 036e C046     		.align	2
 813              		.global	dhcp_release
 814              		.code	16
 815              		.thumb_func
 817              	dhcp_release:
 818              	.LFB307:
 819              		.loc 1 1145 0
 820 0370 70B5     		push	{r4, r5, r6, lr}
 821              	.LCFI9:
 822              	.LVL85:
 823 0372 81B0     		sub	sp, sp, #4
 824              	.LCFI10:
 825 0374 051C     		mov	r5, r0
 826              		.loc 1 1146 0
 827 0376 046A     		ldr	r4, [r0, #32]
 828              	.LVL86:
 829              		.loc 1 1152 0
 830 0378 201C     		mov	r0, r4
 831              	.LVL87:
 832 037a 0D21     		mov	r1, #13
 833 037c FFF740FE 		bl	dhcp_set_state
 834              		.loc 1 1154 0
 835 0380 0023     		mov	r3, #0
 836 0382 6362     		str	r3, [r4, #36]
 837              		.loc 1 1155 0
 838 0384 E362     		str	r3, [r4, #44]
 839 0386 A362     		str	r3, [r4, #40]
 840              		.loc 1 1156 0
 841 0388 6363     		str	r3, [r4, #52]
 842 038a 2363     		str	r3, [r4, #48]
 843              		.loc 1 1157 0
 844 038c E364     		str	r3, [r4, #76]
 845 038e A364     		str	r3, [r4, #72]
 846 0390 6364     		str	r3, [r4, #68]
 847              		.loc 1 1158 0
 848 0392 A363     		str	r3, [r4, #56]
 849              		.loc 1 1161 0
 850 0394 281C     		mov	r0, r5
 851 0396 FFF74FFF 		bl	dhcp_create_request
 852 039a 0006     		lsl	r0, r0, #24
 853 039c 060E     		lsr	r6, r0, #24
 854              	.LVL88:
 855              		.loc 1 1162 0
 856 039e 002E     		cmp	r6, #0
 857 03a0 1DD1     		bne	.L72
 858              		.loc 1 1163 0
 859 03a2 201C     		mov	r0, r4
 860 03a4 3521     		mov	r1, #53
 861 03a6 0122     		mov	r2, #1
 862 03a8 FFF734FE 		bl	dhcp_option
 863              		.loc 1 1164 0
 864 03ac 201C     		mov	r0, r4
 865 03ae 0721     		mov	r1, #7
 866 03b0 FFF742FE 		bl	dhcp_option_byte
 867              		.loc 1 1166 0
 868 03b4 201C     		mov	r0, r4
 869 03b6 FFF781FE 		bl	dhcp_option_trailer
 870              		.loc 1 1168 0
 871 03ba 6069     		ldr	r0, [r4, #20]
 872 03bc A18B     		ldrh	r1, [r4, #28]
 873 03be F031     		add	r1, r1, #240
 874 03c0 0904     		lsl	r1, r1, #16
 875 03c2 090C     		lsr	r1, r1, #16
 876 03c4 FFF7FEFF 		bl	pbuf_realloc
 877              		.loc 1 1170 0
 878 03c8 6068     		ldr	r0, [r4, #4]
 879 03ca 6169     		ldr	r1, [r4, #20]
 880 03cc 221C     		mov	r2, r4
 881 03ce 2432     		add	r2, r2, #36
 882 03d0 0095     		str	r5, [sp]
 883 03d2 4323     		mov	r3, #67
 884 03d4 FFF7FEFF 		bl	udp_sendto_if
 885              		.loc 1 1171 0
 886 03d8 281C     		mov	r0, r5
 887 03da FFF7B7FF 		bl	dhcp_delete_request
 888              	.L72:
 889              		.loc 1 1176 0
 890 03de E37C     		ldrb	r3, [r4, #19]
 891 03e0 0133     		add	r3, r3, #1
 892 03e2 1B06     		lsl	r3, r3, #24
 893 03e4 1A0E     		lsr	r2, r3, #24
 894 03e6 E274     		strb	r2, [r4, #19]
 895              		.loc 1 1177 0
 896 03e8 092A     		cmp	r2, #9
 897 03ea 01D9     		bls	.L73
 898 03ec 1248     		ldr	r0, .L76
 899              	.LVL89:
 900 03ee 05E0     		b	.L74
 901              	.LVL90:
 902              	.L73:
 903 03f0 5301     		lsl	r3, r2, #5
 904 03f2 9B1A     		sub	r3, r3, r2
 905 03f4 9B00     		lsl	r3, r3, #2
 906 03f6 9B18     		add	r3, r3, r2
 907 03f8 DB04     		lsl	r3, r3, #19
 908 03fa 180C     		lsr	r0, r3, #16
 909              	.LVL91:
 910              	.L74:
 911              		.loc 1 1178 0
 912 03fc 0F4B     		ldr	r3, .L76+4
 913 03fe C018     		add	r0, r0, r3
 914              	.LVL92:
 915 0400 FA21     		mov	r1, #250
 916 0402 4900     		lsl	r1, r1, #1
 917 0404 FFF7FEFF 		bl	__divsi3
 918 0408 E083     		strh	r0, [r4, #30]
 919              		.loc 1 1181 0
 920 040a 281C     		mov	r0, r5
 921 040c FFF7FEFF 		bl	netif_set_down
 922              		.loc 1 1183 0
 923 0410 0B4C     		ldr	r4, .L76+8
 924              	.LVL93:
 925 0412 281C     		mov	r0, r5
 926 0414 211C     		mov	r1, r4
 927 0416 FFF7FEFF 		bl	netif_set_ipaddr
 928              		.loc 1 1184 0
 929 041a 281C     		mov	r0, r5
 930 041c 211C     		mov	r1, r4
 931 041e FFF7FEFF 		bl	netif_set_gw
 932              		.loc 1 1185 0
 933 0422 281C     		mov	r0, r5
 934 0424 211C     		mov	r1, r4
 935 0426 FFF7FEFF 		bl	netif_set_netmask
 936 042a 3006     		lsl	r0, r6, #24
 937 042c 0016     		asr	r0, r0, #24
 938              		.loc 1 1189 0
 939 042e 01B0     		add	sp, sp, #4
 940              		@ sp needed for prologue
 941              	.LVL94:
 942              	.LVL95:
 943 0430 70BC     		pop	{r4, r5, r6}
 944 0432 02BC     		pop	{r1}
 945 0434 0847     		bx	r1
 946              	.L77:
 947 0436 C046     		.align	2
 948              	.L76:
 949 0438 10270000 		.word	10000
 950 043c F3010000 		.word	499
 951 0440 00000000 		.word	ip_addr_any
 952              	.LFE307:
 954              		.align	2
 955              		.global	dhcp_renew
 956              		.code	16
 957              		.thumb_func
 959              	dhcp_renew:
 960              	.LFB304:
 961              		.loc 1 970 0
 962 0444 70B5     		push	{r4, r5, r6, lr}
 963              	.LCFI11:
 964              	.LVL96:
 965 0446 81B0     		sub	sp, sp, #4
 966              	.LCFI12:
 967 0448 051C     		mov	r5, r0
 968              		.loc 1 971 0
 969 044a 046A     		ldr	r4, [r0, #32]
 970              	.LVL97:
 971              		.loc 1 978 0
 972 044c 201C     		mov	r0, r4
 973              	.LVL98:
 974 044e 0521     		mov	r1, #5
 975 0450 FFF7D6FD 		bl	dhcp_set_state
 976              		.loc 1 981 0
 977 0454 281C     		mov	r0, r5
 978 0456 FFF7EFFE 		bl	dhcp_create_request
 979 045a 0006     		lsl	r0, r0, #24
 980 045c 060E     		lsr	r6, r0, #24
 981              	.LVL99:
 982              		.loc 1 982 0
 983 045e 002E     		cmp	r6, #0
 984 0460 26D1     		bne	.L79
 985              		.loc 1 984 0
 986 0462 201C     		mov	r0, r4
 987 0464 3521     		mov	r1, #53
 988 0466 0122     		mov	r2, #1
 989 0468 FFF7D4FD 		bl	dhcp_option
 990              		.loc 1 985 0
 991 046c 201C     		mov	r0, r4
 992 046e 0321     		mov	r1, #3
 993 0470 FFF7E2FD 		bl	dhcp_option_byte
 994              		.loc 1 987 0
 995 0474 201C     		mov	r0, r4
 996 0476 3921     		mov	r1, #57
 997 0478 0222     		mov	r2, #2
 998 047a FFF7CBFD 		bl	dhcp_option
 999              		.loc 1 988 0
 1000 047e A98C     		ldrh	r1, [r5, #36]
 1001 0480 201C     		mov	r0, r4
 1002 0482 FFF7E1FD 		bl	dhcp_option_short
 1003              		.loc 1 1010 0
 1004 0486 201C     		mov	r0, r4
 1005 0488 FFF718FE 		bl	dhcp_option_trailer
 1006              		.loc 1 1012 0
 1007 048c 6069     		ldr	r0, [r4, #20]
 1008 048e A18B     		ldrh	r1, [r4, #28]
 1009 0490 F031     		add	r1, r1, #240
 1010 0492 0904     		lsl	r1, r1, #16
 1011 0494 090C     		lsr	r1, r1, #16
 1012 0496 FFF7FEFF 		bl	pbuf_realloc
 1013              		.loc 1 1014 0
 1014 049a 6068     		ldr	r0, [r4, #4]
 1015 049c 6169     		ldr	r1, [r4, #20]
 1016 049e 221C     		mov	r2, r4
 1017 04a0 2432     		add	r2, r2, #36
 1018 04a2 0095     		str	r5, [sp]
 1019 04a4 4323     		mov	r3, #67
 1020 04a6 FFF7FEFF 		bl	udp_sendto_if
 1021              		.loc 1 1015 0
 1022 04aa 281C     		mov	r0, r5
 1023 04ac FFF74EFF 		bl	dhcp_delete_request
 1024              	.L79:
 1025              		.loc 1 1021 0
 1026 04b0 E37C     		ldrb	r3, [r4, #19]
 1027 04b2 0133     		add	r3, r3, #1
 1028 04b4 1B06     		lsl	r3, r3, #24
 1029 04b6 1A0E     		lsr	r2, r3, #24
 1030 04b8 E274     		strb	r2, [r4, #19]
 1031              		.loc 1 1023 0
 1032 04ba 092A     		cmp	r2, #9
 1033 04bc 01D9     		bls	.L80
 1034 04be 0A48     		ldr	r0, .L83
 1035              	.LVL100:
 1036 04c0 05E0     		b	.L81
 1037              	.LVL101:
 1038              	.L80:
 1039 04c2 5301     		lsl	r3, r2, #5
 1040 04c4 9B1A     		sub	r3, r3, r2
 1041 04c6 9B00     		lsl	r3, r3, #2
 1042 04c8 9B18     		add	r3, r3, r2
 1043 04ca 1B05     		lsl	r3, r3, #20
 1044 04cc 180C     		lsr	r0, r3, #16
 1045              	.LVL102:
 1046              	.L81:
 1047              		.loc 1 1024 0
 1048 04ce 074B     		ldr	r3, .L83+4
 1049 04d0 C018     		add	r0, r0, r3
 1050              	.LVL103:
 1051 04d2 FA21     		mov	r1, #250
 1052 04d4 4900     		lsl	r1, r1, #1
 1053 04d6 FFF7FEFF 		bl	__divsi3
 1054 04da E083     		strh	r0, [r4, #30]
 1055 04dc 3006     		lsl	r0, r6, #24
 1056 04de 0016     		asr	r0, r0, #24
 1057              		.loc 1 1027 0
 1058 04e0 01B0     		add	sp, sp, #4
 1059              		@ sp needed for prologue
 1060              	.LVL104:
 1061              	.LVL105:
 1062              	.LVL106:
 1063 04e2 70BC     		pop	{r4, r5, r6}
 1064 04e4 02BC     		pop	{r1}
 1065 04e6 0847     		bx	r1
 1066              	.L84:
 1067              		.align	2
 1068              	.L83:
 1069 04e8 204E0000 		.word	20000
 1070 04ec F3010000 		.word	499
 1071              	.LFE304:
 1073              		.align	2
 1074              		.code	16
 1075              		.thumb_func
 1077              	dhcp_discover:
 1078              	.LFB302:
 1079              		.loc 1 825 0
 1080 04f0 70B5     		push	{r4, r5, r6, lr}
 1081              	.LCFI13:
 1082              	.LVL107:
 1083 04f2 81B0     		sub	sp, sp, #4
 1084              	.LCFI14:
 1085 04f4 051C     		mov	r5, r0
 1086              		.loc 1 826 0
 1087 04f6 046A     		ldr	r4, [r0, #32]
 1088              	.LVL108:
 1089              		.loc 1 830 0
 1090 04f8 314B     		ldr	r3, .L90
 1091 04fa 1B68     		ldr	r3, [r3]
 1092 04fc A362     		str	r3, [r4, #40]
 1093              		.loc 1 831 0
 1094 04fe 201C     		mov	r0, r4
 1095              	.LVL109:
 1096 0500 0621     		mov	r1, #6
 1097 0502 FFF77DFD 		bl	dhcp_set_state
 1098              		.loc 1 833 0
 1099 0506 281C     		mov	r0, r5
 1100 0508 FFF796FE 		bl	dhcp_create_request
 1101 050c 0006     		lsl	r0, r0, #24
 1102 050e 060E     		lsr	r6, r0, #24
 1103              	.LVL110:
 1104              		.loc 1 834 0
 1105 0510 002E     		cmp	r6, #0
 1106 0512 3AD1     		bne	.L86
 1107              		.loc 1 836 0
 1108 0514 201C     		mov	r0, r4
 1109 0516 3521     		mov	r1, #53
 1110 0518 0122     		mov	r2, #1
 1111 051a FFF77BFD 		bl	dhcp_option
 1112              		.loc 1 837 0
 1113 051e 201C     		mov	r0, r4
 1114 0520 0121     		mov	r1, #1
 1115 0522 FFF789FD 		bl	dhcp_option_byte
 1116              		.loc 1 839 0
 1117 0526 201C     		mov	r0, r4
 1118 0528 3921     		mov	r1, #57
 1119 052a 0222     		mov	r2, #2
 1120 052c FFF772FD 		bl	dhcp_option
 1121              		.loc 1 840 0
 1122 0530 A98C     		ldrh	r1, [r5, #36]
 1123 0532 201C     		mov	r0, r4
 1124 0534 FFF788FD 		bl	dhcp_option_short
 1125              		.loc 1 842 0
 1126 0538 201C     		mov	r0, r4
 1127 053a 3721     		mov	r1, #55
 1128 053c 0422     		mov	r2, #4
 1129 053e FFF769FD 		bl	dhcp_option
 1130              		.loc 1 843 0
 1131 0542 201C     		mov	r0, r4
 1132 0544 0121     		mov	r1, #1
 1133 0546 FFF777FD 		bl	dhcp_option_byte
 1134              		.loc 1 844 0
 1135 054a 201C     		mov	r0, r4
 1136 054c 0321     		mov	r1, #3
 1137 054e FFF773FD 		bl	dhcp_option_byte
 1138              		.loc 1 845 0
 1139 0552 201C     		mov	r0, r4
 1140 0554 1C21     		mov	r1, #28
 1141 0556 FFF76FFD 		bl	dhcp_option_byte
 1142              		.loc 1 846 0
 1143 055a 201C     		mov	r0, r4
 1144 055c 0621     		mov	r1, #6
 1145 055e FFF76BFD 		bl	dhcp_option_byte
 1146              		.loc 1 848 0
 1147 0562 201C     		mov	r0, r4
 1148 0564 FFF7AAFD 		bl	dhcp_option_trailer
 1149              		.loc 1 851 0
 1150 0568 6069     		ldr	r0, [r4, #20]
 1151 056a A18B     		ldrh	r1, [r4, #28]
 1152 056c F031     		add	r1, r1, #240
 1153 056e 0904     		lsl	r1, r1, #16
 1154 0570 090C     		lsr	r1, r1, #16
 1155 0572 FFF7FEFF 		bl	pbuf_realloc
 1156              		.loc 1 854 0
 1157 0576 6068     		ldr	r0, [r4, #4]
 1158 0578 6169     		ldr	r1, [r4, #20]
 1159 057a 124A     		ldr	r2, .L90+4
 1160 057c 0095     		str	r5, [sp]
 1161 057e 4323     		mov	r3, #67
 1162 0580 FFF7FEFF 		bl	udp_sendto_if
 1163              		.loc 1 856 0
 1164 0584 281C     		mov	r0, r5
 1165 0586 FFF7E1FE 		bl	dhcp_delete_request
 1166              	.L86:
 1167              		.loc 1 861 0
 1168 058a E37C     		ldrb	r3, [r4, #19]
 1169 058c 0133     		add	r3, r3, #1
 1170 058e 1B06     		lsl	r3, r3, #24
 1171 0590 1A0E     		lsr	r2, r3, #24
 1172 0592 E274     		strb	r2, [r4, #19]
 1173              		.loc 1 868 0
 1174 0594 052A     		cmp	r2, #5
 1175 0596 01D9     		bls	.L87
 1176 0598 0B48     		ldr	r0, .L90+8
 1177              	.LVL111:
 1178 059a 03E0     		b	.L88
 1179              	.LVL112:
 1180              	.L87:
 1181 059c FA23     		mov	r3, #250
 1182 059e 9B04     		lsl	r3, r3, #18
 1183 05a0 9340     		lsl	r3, r3, r2
 1184 05a2 180C     		lsr	r0, r3, #16
 1185              	.LVL113:
 1186              	.L88:
 1187              		.loc 1 869 0
 1188 05a4 094B     		ldr	r3, .L90+12
 1189 05a6 C018     		add	r0, r0, r3
 1190              	.LVL114:
 1191 05a8 FA21     		mov	r1, #250
 1192 05aa 4900     		lsl	r1, r1, #1
 1193 05ac FFF7FEFF 		bl	__divsi3
 1194 05b0 E083     		strh	r0, [r4, #30]
 1195 05b2 3006     		lsl	r0, r6, #24
 1196 05b4 0016     		asr	r0, r0, #24
 1197              		.loc 1 872 0
 1198 05b6 01B0     		add	sp, sp, #4
 1199              		@ sp needed for prologue
 1200              	.LVL115:
 1201              	.LVL116:
 1202              	.LVL117:
 1203 05b8 70BC     		pop	{r4, r5, r6}
 1204 05ba 02BC     		pop	{r1}
 1205 05bc 0847     		bx	r1
 1206              	.L91:
 1207 05be C046     		.align	2
 1208              	.L90:
 1209 05c0 00000000 		.word	ip_addr_any
 1210 05c4 00000000 		.word	ip_addr_broadcast
 1211 05c8 60EA0000 		.word	60000
 1212 05cc F3010000 		.word	499
 1213              	.LFE302:
 1215              		.align	2
 1216              		.code	16
 1217              		.thumb_func
 1219              	dhcp_rebind:
 1220              	.LFB305:
 1221              		.loc 1 1036 0
 1222 05d0 70B5     		push	{r4, r5, r6, lr}
 1223              	.LCFI15:
 1224              	.LVL118:
 1225 05d2 81B0     		sub	sp, sp, #4
 1226              	.LCFI16:
 1227 05d4 051C     		mov	r5, r0
 1228              		.loc 1 1037 0
 1229 05d6 046A     		ldr	r4, [r0, #32]
 1230              	.LVL119:
 1231              		.loc 1 1044 0
 1232 05d8 201C     		mov	r0, r4
 1233              	.LVL120:
 1234 05da 0421     		mov	r1, #4
 1235 05dc FFF710FD 		bl	dhcp_set_state
 1236              		.loc 1 1047 0
 1237 05e0 281C     		mov	r0, r5
 1238 05e2 FFF729FE 		bl	dhcp_create_request
 1239 05e6 0006     		lsl	r0, r0, #24
 1240 05e8 060E     		lsr	r6, r0, #24
 1241              	.LVL121:
 1242              		.loc 1 1048 0
 1243 05ea 002E     		cmp	r6, #0
 1244 05ec 25D1     		bne	.L93
 1245              		.loc 1 1050 0
 1246 05ee 201C     		mov	r0, r4
 1247 05f0 3521     		mov	r1, #53
 1248 05f2 0122     		mov	r2, #1
 1249 05f4 FFF70EFD 		bl	dhcp_option
 1250              		.loc 1 1051 0
 1251 05f8 201C     		mov	r0, r4
 1252 05fa 0321     		mov	r1, #3
 1253 05fc FFF71CFD 		bl	dhcp_option_byte
 1254              		.loc 1 1053 0
 1255 0600 201C     		mov	r0, r4
 1256 0602 3921     		mov	r1, #57
 1257 0604 0222     		mov	r2, #2
 1258 0606 FFF705FD 		bl	dhcp_option
 1259              		.loc 1 1054 0
 1260 060a A98C     		ldrh	r1, [r5, #36]
 1261 060c 201C     		mov	r0, r4
 1262 060e FFF71BFD 		bl	dhcp_option_short
 1263              		.loc 1 1074 0
 1264 0612 201C     		mov	r0, r4
 1265 0614 FFF752FD 		bl	dhcp_option_trailer
 1266              		.loc 1 1076 0
 1267 0618 6069     		ldr	r0, [r4, #20]
 1268 061a A18B     		ldrh	r1, [r4, #28]
 1269 061c F031     		add	r1, r1, #240
 1270 061e 0904     		lsl	r1, r1, #16
 1271 0620 090C     		lsr	r1, r1, #16
 1272 0622 FFF7FEFF 		bl	pbuf_realloc
 1273              		.loc 1 1079 0
 1274 0626 6068     		ldr	r0, [r4, #4]
 1275 0628 6169     		ldr	r1, [r4, #20]
 1276 062a 124A     		ldr	r2, .L97
 1277 062c 0095     		str	r5, [sp]
 1278 062e 4323     		mov	r3, #67
 1279 0630 FFF7FEFF 		bl	udp_sendto_if
 1280              		.loc 1 1080 0
 1281 0634 281C     		mov	r0, r5
 1282 0636 FFF789FE 		bl	dhcp_delete_request
 1283              	.L93:
 1284              		.loc 1 1085 0
 1285 063a E37C     		ldrb	r3, [r4, #19]
 1286 063c 0133     		add	r3, r3, #1
 1287 063e 1B06     		lsl	r3, r3, #24
 1288 0640 1A0E     		lsr	r2, r3, #24
 1289 0642 E274     		strb	r2, [r4, #19]
 1290              		.loc 1 1086 0
 1291 0644 092A     		cmp	r2, #9
 1292 0646 01D9     		bls	.L94
 1293 0648 0B48     		ldr	r0, .L97+4
 1294              	.LVL122:
 1295 064a 05E0     		b	.L95
 1296              	.LVL123:
 1297              	.L94:
 1298 064c 5301     		lsl	r3, r2, #5
 1299 064e 9B1A     		sub	r3, r3, r2
 1300 0650 9B00     		lsl	r3, r3, #2
 1301 0652 9B18     		add	r3, r3, r2
 1302 0654 DB04     		lsl	r3, r3, #19
 1303 0656 180C     		lsr	r0, r3, #16
 1304              	.LVL124:
 1305              	.L95:
 1306              		.loc 1 1087 0
 1307 0658 084B     		ldr	r3, .L97+8
 1308 065a C018     		add	r0, r0, r3
 1309              	.LVL125:
 1310 065c FA21     		mov	r1, #250
 1311 065e 4900     		lsl	r1, r1, #1
 1312 0660 FFF7FEFF 		bl	__divsi3
 1313 0664 E083     		strh	r0, [r4, #30]
 1314 0666 3006     		lsl	r0, r6, #24
 1315 0668 0016     		asr	r0, r0, #24
 1316              		.loc 1 1090 0
 1317 066a 01B0     		add	sp, sp, #4
 1318              		@ sp needed for prologue
 1319              	.LVL126:
 1320              	.LVL127:
 1321              	.LVL128:
 1322 066c 70BC     		pop	{r4, r5, r6}
 1323 066e 02BC     		pop	{r1}
 1324 0670 0847     		bx	r1
 1325              	.L98:
 1326 0672 C046     		.align	2
 1327              	.L97:
 1328 0674 00000000 		.word	ip_addr_broadcast
 1329 0678 10270000 		.word	10000
 1330 067c F3010000 		.word	499
 1331              	.LFE305:
 1333              		.align	2
 1334              		.global	dhcp_coarse_tmr
 1335              		.code	16
 1336              		.thumb_func
 1338              	dhcp_coarse_tmr:
 1339              	.LFB293:
 1340              		.loc 1 316 0
 1341 0680 10B5     		push	{r4, lr}
 1342              	.LCFI17:
 1343              		.loc 1 317 0
 1344 0682 174B     		ldr	r3, .L109
 1345 0684 1C68     		ldr	r4, [r3]
 1346              	.LVL129:
 1347              		.loc 1 320 0
 1348 0686 002C     		cmp	r4, #0
 1349 0688 27D0     		beq	.L106
 1350              	.L107:
 1351              		.loc 1 322 0
 1352 068a 216A     		ldr	r1, [r4, #32]
 1353 068c 0029     		cmp	r1, #0
 1354 068e 21D0     		beq	.L101
 1355              		.loc 1 324 0
 1356 0690 4A8C     		ldrh	r2, [r1, #34]
 1357 0692 531E     		sub	r3, r2, #1
 1358 0694 4B84     		strh	r3, [r1, #34]
 1359 0696 012A     		cmp	r2, #1
 1360 0698 0BD1     		bne	.L102
 1361              	.LBB8:
 1362              	.LBB9:
 1363              		.loc 1 466 0
 1364 069a 236A     		ldr	r3, [r4, #32]
 1365 069c 9B7C     		ldrb	r3, [r3, #18]
 1366 069e 012B     		cmp	r3, #1
 1367 06a0 03D0     		beq	.L103
 1368 06a2 0A2B     		cmp	r3, #10
 1369 06a4 01D0     		beq	.L103
 1370 06a6 052B     		cmp	r3, #5
 1371 06a8 14D1     		bne	.L101
 1372              	.L103:
 1373              		.loc 1 469 0
 1374 06aa 201C     		mov	r0, r4
 1375 06ac FFF790FF 		bl	dhcp_rebind
 1376 06b0 10E0     		b	.L101
 1377              	.L102:
 1378              	.LBE9:
 1379              	.LBE8:
 1380              		.loc 1 329 0
 1381 06b2 236A     		ldr	r3, [r4, #32]
 1382 06b4 198C     		ldrh	r1, [r3, #32]
 1383 06b6 4A1E     		sub	r2, r1, #1
 1384 06b8 1A84     		strh	r2, [r3, #32]
 1385 06ba 0129     		cmp	r1, #1
 1386 06bc 0AD1     		bne	.L101
 1387              	.LBB10:
 1388              	.LBB11:
 1389              		.loc 1 448 0
 1390 06be 236A     		ldr	r3, [r4, #32]
 1391 06c0 9B7C     		ldrb	r3, [r3, #18]
 1392 06c2 012B     		cmp	r3, #1
 1393 06c4 03D0     		beq	.L104
 1394 06c6 0A2B     		cmp	r3, #10
 1395 06c8 01D0     		beq	.L104
 1396 06ca 052B     		cmp	r3, #5
 1397 06cc 02D1     		bne	.L101
 1398              	.L104:
 1399              		.loc 1 452 0
 1400 06ce 201C     		mov	r0, r4
 1401 06d0 FFF7FEFF 		bl	dhcp_renew
 1402              	.L101:
 1403              	.LBE11:
 1404              	.LBE10:
 1405              		.loc 1 336 0
 1406 06d4 2468     		ldr	r4, [r4]
 1407              		.loc 1 320 0
 1408 06d6 002C     		cmp	r4, #0
 1409 06d8 D7D1     		bne	.L107
 1410              	.L106:
 1411              		.loc 1 338 0
 1412              		@ sp needed for prologue
 1413              	.LVL130:
 1414 06da 10BC     		pop	{r4}
 1415 06dc 01BC     		pop	{r0}
 1416 06de 0047     		bx	r0
 1417              	.L110:
 1418              		.align	2
 1419              	.L109:
 1420 06e0 00000000 		.word	netif_list
 1421              	.LFE293:
 1423              		.align	2
 1424              		.code	16
 1425              		.thumb_func
 1427              	dhcp_reboot:
 1428              	.LFB306:
 1429              		.loc 1 1099 0
 1430 06e4 70B5     		push	{r4, r5, r6, lr}
 1431              	.LCFI18:
 1432              	.LVL131:
 1433 06e6 81B0     		sub	sp, sp, #4
 1434              	.LCFI19:
 1435 06e8 051C     		mov	r5, r0
 1436              		.loc 1 1100 0
 1437 06ea 046A     		ldr	r4, [r0, #32]
 1438              	.LVL132:
 1439              		.loc 1 1104 0
 1440 06ec 201C     		mov	r0, r4
 1441              	.LVL133:
 1442 06ee 0321     		mov	r1, #3
 1443 06f0 FFF786FC 		bl	dhcp_set_state
 1444              		.loc 1 1107 0
 1445 06f4 281C     		mov	r0, r5
 1446 06f6 FFF79FFD 		bl	dhcp_create_request
 1447 06fa 0006     		lsl	r0, r0, #24
 1448 06fc 060E     		lsr	r6, r0, #24
 1449              	.LVL134:
 1450              		.loc 1 1108 0
 1451 06fe 002E     		cmp	r6, #0
 1452 0700 32D1     		bne	.L112
 1453              		.loc 1 1110 0
 1454 0702 201C     		mov	r0, r4
 1455 0704 3521     		mov	r1, #53
 1456 0706 0122     		mov	r2, #1
 1457 0708 FFF784FC 		bl	dhcp_option
 1458              		.loc 1 1111 0
 1459 070c 201C     		mov	r0, r4
 1460 070e 0321     		mov	r1, #3
 1461 0710 FFF792FC 		bl	dhcp_option_byte
 1462              		.loc 1 1113 0
 1463 0714 201C     		mov	r0, r4
 1464 0716 3921     		mov	r1, #57
 1465 0718 0222     		mov	r2, #2
 1466 071a FFF77BFC 		bl	dhcp_option
 1467              		.loc 1 1114 0
 1468 071e 9021     		mov	r1, #144
 1469 0720 8900     		lsl	r1, r1, #2
 1470 0722 201C     		mov	r0, r4
 1471 0724 FFF790FC 		bl	dhcp_option_short
 1472              		.loc 1 1116 0
 1473 0728 201C     		mov	r0, r4
 1474 072a 3221     		mov	r1, #50
 1475 072c 0422     		mov	r2, #4
 1476 072e FFF771FC 		bl	dhcp_option
 1477              		.loc 1 1117 0
 1478 0732 A06A     		ldr	r0, [r4, #40]
 1479 0734 FFF7FEFF 		bl	ntohl
 1480 0738 011C     		mov	r1, r0
 1481 073a 201C     		mov	r0, r4
 1482 073c FFF79AFC 		bl	dhcp_option_long
 1483              		.loc 1 1119 0
 1484 0740 201C     		mov	r0, r4
 1485 0742 FFF7BBFC 		bl	dhcp_option_trailer
 1486              		.loc 1 1121 0
 1487 0746 6069     		ldr	r0, [r4, #20]
 1488 0748 A18B     		ldrh	r1, [r4, #28]
 1489 074a F031     		add	r1, r1, #240
 1490 074c 0904     		lsl	r1, r1, #16
 1491 074e 090C     		lsr	r1, r1, #16
 1492 0750 FFF7FEFF 		bl	pbuf_realloc
 1493              		.loc 1 1124 0
 1494 0754 6068     		ldr	r0, [r4, #4]
 1495 0756 6169     		ldr	r1, [r4, #20]
 1496 0758 114A     		ldr	r2, .L116
 1497 075a 0095     		str	r5, [sp]
 1498 075c 4323     		mov	r3, #67
 1499 075e FFF7FEFF 		bl	udp_sendto_if
 1500              		.loc 1 1125 0
 1501 0762 281C     		mov	r0, r5
 1502 0764 FFF7F2FD 		bl	dhcp_delete_request
 1503              	.L112:
 1504              		.loc 1 1130 0
 1505 0768 E37C     		ldrb	r3, [r4, #19]
 1506 076a 0133     		add	r3, r3, #1
 1507 076c 1B06     		lsl	r3, r3, #24
 1508 076e 1A0E     		lsr	r2, r3, #24
 1509 0770 E274     		strb	r2, [r4, #19]
 1510              		.loc 1 1131 0
 1511 0772 092A     		cmp	r2, #9
 1512 0774 01D9     		bls	.L113
 1513 0776 0B48     		ldr	r0, .L116+4
 1514              	.LVL135:
 1515 0778 05E0     		b	.L114
 1516              	.LVL136:
 1517              	.L113:
 1518 077a 5301     		lsl	r3, r2, #5
 1519 077c 9B1A     		sub	r3, r3, r2
 1520 077e 9B00     		lsl	r3, r3, #2
 1521 0780 9B18     		add	r3, r3, r2
 1522 0782 DB04     		lsl	r3, r3, #19
 1523 0784 180C     		lsr	r0, r3, #16
 1524              	.LVL137:
 1525              	.L114:
 1526              		.loc 1 1132 0
 1527 0786 084B     		ldr	r3, .L116+8
 1528 0788 C018     		add	r0, r0, r3
 1529              	.LVL138:
 1530 078a FA21     		mov	r1, #250
 1531 078c 4900     		lsl	r1, r1, #1
 1532 078e FFF7FEFF 		bl	__divsi3
 1533 0792 E083     		strh	r0, [r4, #30]
 1534 0794 3006     		lsl	r0, r6, #24
 1535 0796 0016     		asr	r0, r0, #24
 1536              		.loc 1 1135 0
 1537 0798 01B0     		add	sp, sp, #4
 1538              		@ sp needed for prologue
 1539              	.LVL139:
 1540              	.LVL140:
 1541              	.LVL141:
 1542 079a 70BC     		pop	{r4, r5, r6}
 1543 079c 02BC     		pop	{r1}
 1544 079e 0847     		bx	r1
 1545              	.L117:
 1546              		.align	2
 1547              	.L116:
 1548 07a0 00000000 		.word	ip_addr_broadcast
 1549 07a4 10270000 		.word	10000
 1550 07a8 F3010000 		.word	499
 1551              	.LFE306:
 1553              		.align	2
 1554              		.global	dhcp_network_changed
 1555              		.code	16
 1556              		.thumb_func
 1558              	dhcp_network_changed:
 1559              	.LFB301:
 1560              		.loc 1 723 0
 1561 07ac 30B5     		push	{r4, r5, lr}
 1562              	.LCFI20:
 1563              	.LVL142:
 1564 07ae 051C     		mov	r5, r0
 1565              		.loc 1 724 0
 1566 07b0 046A     		ldr	r4, [r0, #32]
 1567              	.LVL143:
 1568              		.loc 1 725 0
 1569 07b2 002C     		cmp	r4, #0
 1570 07b4 21D0     		beq	.L123
 1571              		.loc 1 727 0
 1572 07b6 A27C     		ldrb	r2, [r4, #18]
 1573 07b8 1306     		lsl	r3, r2, #24
 1574 07ba 1B0E     		lsr	r3, r3, #24
 1575 07bc 0A2B     		cmp	r3, #10
 1576 07be 0ED0     		beq	.L121
 1577 07c0 1306     		lsl	r3, r2, #24
 1578 07c2 1B0E     		lsr	r3, r3, #24
 1579 07c4 0A2B     		cmp	r3, #10
 1580 07c6 05D8     		bhi	.L122
 1581 07c8 D31E     		sub	r3, r2, #3
 1582 07ca 1B06     		lsl	r3, r3, #24
 1583 07cc 1B0E     		lsr	r3, r3, #24
 1584 07ce 022B     		cmp	r3, #2
 1585 07d0 0ED8     		bhi	.L120
 1586 07d2 04E0     		b	.L121
 1587              	.L122:
 1588 07d4 1306     		lsl	r3, r2, #24
 1589 07d6 1B0E     		lsr	r3, r3, #24
 1590 07d8 0D2B     		cmp	r3, #13
 1591 07da 09D1     		bne	.L120
 1592 07dc 0DE0     		b	.L123
 1593              	.L121:
 1594              		.loc 1 732 0
 1595 07de 281C     		mov	r0, r5
 1596              	.LVL144:
 1597 07e0 FFF7FEFF 		bl	netif_set_down
 1598              		.loc 1 733 0
 1599 07e4 0023     		mov	r3, #0
 1600 07e6 E374     		strb	r3, [r4, #19]
 1601              		.loc 1 734 0
 1602 07e8 281C     		mov	r0, r5
 1603 07ea FFF77BFF 		bl	dhcp_reboot
 1604 07ee 04E0     		b	.L123
 1605              	.LVL145:
 1606              	.L120:
 1607              		.loc 1 740 0
 1608 07f0 0023     		mov	r3, #0
 1609 07f2 E374     		strb	r3, [r4, #19]
 1610              		.loc 1 741 0
 1611 07f4 281C     		mov	r0, r5
 1612              	.LVL146:
 1613 07f6 FFF77BFE 		bl	dhcp_discover
 1614              	.LVL147:
 1615              	.L123:
 1616              		.loc 1 744 0
 1617              		@ sp needed for prologue
 1618              	.LVL148:
 1619              	.LVL149:
 1620 07fa 30BC     		pop	{r4, r5}
 1621 07fc 01BC     		pop	{r0}
 1622 07fe 0047     		bx	r0
 1623              	.LFE301:
 1625              		.align	2
 1626              		.code	16
 1627              		.thumb_func
 1629              	dhcp_select:
 1630              	.LFB292:
 1631              		.loc 1 249 0
 1632 0800 70B5     		push	{r4, r5, r6, lr}
 1633              	.LCFI21:
 1634              	.LVL150:
 1635 0802 81B0     		sub	sp, sp, #4
 1636              	.LCFI22:
 1637 0804 051C     		mov	r5, r0
 1638              		.loc 1 250 0
 1639 0806 046A     		ldr	r4, [r0, #32]
 1640              	.LVL151:
 1641              		.loc 1 258 0
 1642 0808 201C     		mov	r0, r4
 1643              	.LVL152:
 1644 080a 0121     		mov	r1, #1
 1645 080c FFF7F8FB 		bl	dhcp_set_state
 1646              		.loc 1 261 0
 1647 0810 281C     		mov	r0, r5
 1648 0812 FFF711FD 		bl	dhcp_create_request
 1649 0816 0006     		lsl	r0, r0, #24
 1650 0818 060E     		lsr	r6, r0, #24
 1651              	.LVL153:
 1652              		.loc 1 262 0
 1653 081a 002E     		cmp	r6, #0
 1654 081c 52D1     		bne	.L125
 1655              		.loc 1 263 0
 1656 081e 201C     		mov	r0, r4
 1657 0820 3521     		mov	r1, #53
 1658 0822 0122     		mov	r2, #1
 1659 0824 FFF7F6FB 		bl	dhcp_option
 1660              		.loc 1 264 0
 1661 0828 201C     		mov	r0, r4
 1662 082a 0321     		mov	r1, #3
 1663 082c FFF704FC 		bl	dhcp_option_byte
 1664              		.loc 1 266 0
 1665 0830 201C     		mov	r0, r4
 1666 0832 3921     		mov	r1, #57
 1667 0834 0222     		mov	r2, #2
 1668 0836 FFF7EDFB 		bl	dhcp_option
 1669              		.loc 1 267 0
 1670 083a A98C     		ldrh	r1, [r5, #36]
 1671 083c 201C     		mov	r0, r4
 1672 083e FFF703FC 		bl	dhcp_option_short
 1673              		.loc 1 270 0
 1674 0842 201C     		mov	r0, r4
 1675 0844 3221     		mov	r1, #50
 1676 0846 0422     		mov	r2, #4
 1677 0848 FFF7E4FB 		bl	dhcp_option
 1678              		.loc 1 271 0
 1679 084c A06A     		ldr	r0, [r4, #40]
 1680 084e FFF7FEFF 		bl	ntohl
 1681 0852 011C     		mov	r1, r0
 1682 0854 201C     		mov	r0, r4
 1683 0856 FFF70DFC 		bl	dhcp_option_long
 1684              		.loc 1 273 0
 1685 085a 201C     		mov	r0, r4
 1686 085c 3621     		mov	r1, #54
 1687 085e 0422     		mov	r2, #4
 1688 0860 FFF7D8FB 		bl	dhcp_option
 1689              		.loc 1 274 0
 1690 0864 606A     		ldr	r0, [r4, #36]
 1691 0866 FFF7FEFF 		bl	ntohl
 1692 086a 011C     		mov	r1, r0
 1693 086c 201C     		mov	r0, r4
 1694 086e FFF701FC 		bl	dhcp_option_long
 1695              		.loc 1 276 0
 1696 0872 201C     		mov	r0, r4
 1697 0874 3721     		mov	r1, #55
 1698 0876 0422     		mov	r2, #4
 1699 0878 FFF7CCFB 		bl	dhcp_option
 1700              		.loc 1 277 0
 1701 087c 201C     		mov	r0, r4
 1702 087e 0121     		mov	r1, #1
 1703 0880 FFF7DAFB 		bl	dhcp_option_byte
 1704              		.loc 1 278 0
 1705 0884 201C     		mov	r0, r4
 1706 0886 0321     		mov	r1, #3
 1707 0888 FFF7D6FB 		bl	dhcp_option_byte
 1708              		.loc 1 279 0
 1709 088c 201C     		mov	r0, r4
 1710 088e 1C21     		mov	r1, #28
 1711 0890 FFF7D2FB 		bl	dhcp_option_byte
 1712              		.loc 1 280 0
 1713 0894 201C     		mov	r0, r4
 1714 0896 0621     		mov	r1, #6
 1715 0898 FFF7CEFB 		bl	dhcp_option_byte
 1716              		.loc 1 292 0
 1717 089c 201C     		mov	r0, r4
 1718 089e FFF70DFC 		bl	dhcp_option_trailer
 1719              		.loc 1 294 0
 1720 08a2 6069     		ldr	r0, [r4, #20]
 1721 08a4 A18B     		ldrh	r1, [r4, #28]
 1722 08a6 F031     		add	r1, r1, #240
 1723 08a8 0904     		lsl	r1, r1, #16
 1724 08aa 090C     		lsr	r1, r1, #16
 1725 08ac FFF7FEFF 		bl	pbuf_realloc
 1726              		.loc 1 297 0
 1727 08b0 6068     		ldr	r0, [r4, #4]
 1728 08b2 6169     		ldr	r1, [r4, #20]
 1729 08b4 104A     		ldr	r2, .L129
 1730 08b6 0095     		str	r5, [sp]
 1731 08b8 4323     		mov	r3, #67
 1732 08ba FFF7FEFF 		bl	udp_sendto_if
 1733              		.loc 1 298 0
 1734 08be 281C     		mov	r0, r5
 1735 08c0 FFF744FD 		bl	dhcp_delete_request
 1736              	.L125:
 1737              		.loc 1 303 0
 1738 08c4 E37C     		ldrb	r3, [r4, #19]
 1739 08c6 0133     		add	r3, r3, #1
 1740 08c8 1B06     		lsl	r3, r3, #24
 1741 08ca 1A0E     		lsr	r2, r3, #24
 1742 08cc E274     		strb	r2, [r4, #19]
 1743              		.loc 1 304 0
 1744 08ce 052A     		cmp	r2, #5
 1745 08d0 01D9     		bls	.L126
 1746 08d2 0A48     		ldr	r0, .L129+4
 1747              	.LVL154:
 1748 08d4 03E0     		b	.L127
 1749              	.LVL155:
 1750              	.L126:
 1751 08d6 FA23     		mov	r3, #250
 1752 08d8 9B04     		lsl	r3, r3, #18
 1753 08da 9340     		lsl	r3, r3, r2
 1754 08dc 180C     		lsr	r0, r3, #16
 1755              	.LVL156:
 1756              	.L127:
 1757              		.loc 1 305 0
 1758 08de 084B     		ldr	r3, .L129+8
 1759 08e0 C018     		add	r0, r0, r3
 1760              	.LVL157:
 1761 08e2 FA21     		mov	r1, #250
 1762 08e4 4900     		lsl	r1, r1, #1
 1763 08e6 FFF7FEFF 		bl	__divsi3
 1764 08ea E083     		strh	r0, [r4, #30]
 1765 08ec 3006     		lsl	r0, r6, #24
 1766 08ee 0016     		asr	r0, r0, #24
 1767              		.loc 1 308 0
 1768 08f0 01B0     		add	sp, sp, #4
 1769              		@ sp needed for prologue
 1770              	.LVL158:
 1771              	.LVL159:
 1772              	.LVL160:
 1773 08f2 70BC     		pop	{r4, r5, r6}
 1774 08f4 02BC     		pop	{r1}
 1775 08f6 0847     		bx	r1
 1776              	.L130:
 1777              		.align	2
 1778              	.L129:
 1779 08f8 00000000 		.word	ip_addr_broadcast
 1780 08fc 60EA0000 		.word	60000
 1781 0900 F3010000 		.word	499
 1782              	.LFE292:
 1784              		.align	2
 1785              		.global	dhcp_fine_tmr
 1786              		.code	16
 1787              		.thumb_func
 1789              	dhcp_fine_tmr:
 1790              	.LFB294:
 1791              		.loc 1 349 0
 1792 0904 30B5     		push	{r4, r5, lr}
 1793              	.LCFI23:
 1794              		.loc 1 350 0
 1795 0906 294B     		ldr	r3, .L148
 1796 0908 1C68     		ldr	r4, [r3]
 1797              	.LVL161:
 1798              		.loc 1 352 0
 1799 090a 002C     		cmp	r4, #0
 1800 090c 4BD0     		beq	.L144
 1801              		.loc 1 360 0
 1802 090e 0025     		mov	r5, #0
 1803              	.LVL162:
 1804              	.L146:
 1805              		.loc 1 354 0
 1806 0910 226A     		ldr	r2, [r4, #32]
 1807              	.LVL163:
 1808 0912 002A     		cmp	r2, #0
 1809 0914 44D0     		beq	.L133
 1810              		.loc 1 356 0
 1811 0916 D38B     		ldrh	r3, [r2, #30]
 1812 0918 012B     		cmp	r3, #1
 1813 091a 02D9     		bls	.L134
 1814              		.loc 1 357 0
 1815 091c 013B     		sub	r3, r3, #1
 1816 091e D383     		strh	r3, [r2, #30]
 1817 0920 3EE0     		b	.L133
 1818              	.L134:
 1819              		.loc 1 359 0
 1820 0922 012B     		cmp	r3, #1
 1821 0924 3CD1     		bne	.L133
 1822              		.loc 1 360 0
 1823 0926 D583     		strh	r5, [r2, #30]
 1824              	.LBB14:
 1825              	.LBB15:
 1826              		.loc 1 383 0
 1827 0928 226A     		ldr	r2, [r4, #32]
 1828              	.LVL164:
 1829              		.loc 1 386 0
 1830 092a 937C     		ldrb	r3, [r2, #18]
 1831 092c 0C2B     		cmp	r3, #12
 1832 092e 01D0     		beq	.L145
 1833 0930 062B     		cmp	r3, #6
 1834 0932 03D1     		bne	.L135
 1835              	.L145:
 1836              		.loc 1 388 0
 1837 0934 201C     		mov	r0, r4
 1838 0936 FFF7DBFD 		bl	dhcp_discover
 1839              	.LVL165:
 1840 093a 31E0     		b	.L133
 1841              	.LVL166:
 1842              	.L135:
 1843              		.loc 1 390 0
 1844 093c 012B     		cmp	r3, #1
 1845 093e 0DD1     		bne	.L137
 1846              		.loc 1 392 0
 1847 0940 D37C     		ldrb	r3, [r2, #19]
 1848 0942 052B     		cmp	r3, #5
 1849 0944 03D8     		bhi	.L138
 1850              		.loc 1 393 0
 1851 0946 201C     		mov	r0, r4
 1852 0948 FFF75AFF 		bl	dhcp_select
 1853              	.LVL167:
 1854 094c 28E0     		b	.L133
 1855              	.LVL168:
 1856              	.L138:
 1857              		.loc 1 396 0
 1858 094e 201C     		mov	r0, r4
 1859 0950 FFF7FEFF 		bl	dhcp_release
 1860              	.LVL169:
 1861              		.loc 1 397 0
 1862 0954 201C     		mov	r0, r4
 1863 0956 FFF7CBFD 		bl	dhcp_discover
 1864 095a 21E0     		b	.L133
 1865              	.LVL170:
 1866              	.L137:
 1867              		.loc 1 414 0
 1868 095c 052B     		cmp	r3, #5
 1869 095e 03D1     		bne	.L139
 1870              		.loc 1 418 0
 1871 0960 201C     		mov	r0, r4
 1872 0962 FFF7FEFF 		bl	dhcp_renew
 1873              	.LVL171:
 1874 0966 1BE0     		b	.L133
 1875              	.LVL172:
 1876              	.L139:
 1877              		.loc 1 420 0
 1878 0968 042B     		cmp	r3, #4
 1879 096a 0DD1     		bne	.L140
 1880              		.loc 1 422 0
 1881 096c D37C     		ldrb	r3, [r2, #19]
 1882 096e 082B     		cmp	r3, #8
 1883 0970 03D8     		bhi	.L141
 1884              		.loc 1 423 0
 1885 0972 201C     		mov	r0, r4
 1886 0974 FFF72CFE 		bl	dhcp_rebind
 1887              	.LVL173:
 1888 0978 12E0     		b	.L133
 1889              	.LVL174:
 1890              	.L141:
 1891              		.loc 1 426 0
 1892 097a 201C     		mov	r0, r4
 1893 097c FFF7FEFF 		bl	dhcp_release
 1894              	.LVL175:
 1895              		.loc 1 427 0
 1896 0980 201C     		mov	r0, r4
 1897 0982 FFF7B5FD 		bl	dhcp_discover
 1898 0986 0BE0     		b	.L133
 1899              	.LVL176:
 1900              	.L140:
 1901              		.loc 1 429 0
 1902 0988 032B     		cmp	r3, #3
 1903 098a 09D1     		bne	.L133
 1904              		.loc 1 430 0
 1905 098c D37C     		ldrb	r3, [r2, #19]
 1906 098e 012B     		cmp	r3, #1
 1907 0990 03D8     		bhi	.L142
 1908              		.loc 1 431 0
 1909 0992 201C     		mov	r0, r4
 1910 0994 FFF7A6FE 		bl	dhcp_reboot
 1911              	.LVL177:
 1912 0998 02E0     		b	.L133
 1913              	.LVL178:
 1914              	.L142:
 1915              		.loc 1 433 0
 1916 099a 201C     		mov	r0, r4
 1917 099c FFF7A8FD 		bl	dhcp_discover
 1918              	.LVL179:
 1919              	.L133:
 1920              	.LBE15:
 1921              	.LBE14:
 1922              		.loc 1 368 0
 1923 09a0 2468     		ldr	r4, [r4]
 1924              		.loc 1 352 0
 1925 09a2 002C     		cmp	r4, #0
 1926 09a4 B4D1     		bne	.L146
 1927              	.L144:
 1928              		.loc 1 370 0
 1929              		@ sp needed for prologue
 1930              	.LVL180:
 1931 09a6 30BC     		pop	{r4, r5}
 1932 09a8 01BC     		pop	{r0}
 1933 09aa 0047     		bx	r0
 1934              	.L149:
 1935              		.align	2
 1936              	.L148:
 1937 09ac 00000000 		.word	netif_list
 1938              	.LFE294:
 1940              		.align	2
 1941              		.global	dhcp_inform
 1942              		.code	16
 1943              		.thumb_func
 1945              	dhcp_inform:
 1946              	.LFB300:
 1947              		.loc 1 665 0
 1948 09b0 70B5     		push	{r4, r5, r6, lr}
 1949              	.LCFI24:
 1950              	.LVL181:
 1951 09b2 81B0     		sub	sp, sp, #4
 1952              	.LCFI25:
 1953 09b4 051C     		mov	r5, r0
 1954              		.loc 1 668 0
 1955 09b6 5020     		mov	r0, #80
 1956              	.LVL182:
 1957 09b8 FFF7FEFF 		bl	mem_malloc
 1958 09bc 041C     		mov	r4, r0
 1959              	.LVL183:
 1960              		.loc 1 669 0
 1961 09be 0028     		cmp	r0, #0
 1962 09c0 44D0     		beq	.L154
 1963              	.LVL184:
 1964              		.loc 1 673 0
 1965 09c2 0021     		mov	r1, #0
 1966 09c4 5022     		mov	r2, #80
 1967 09c6 FFF7FEFF 		bl	memset
 1968              	.LVL185:
 1969              		.loc 1 676 0
 1970 09ca FFF7FEFF 		bl	udp_new
 1971 09ce 6060     		str	r0, [r4, #4]
 1972              		.loc 1 677 0
 1973 09d0 0028     		cmp	r0, #0
 1974 09d2 38D0     		beq	.L152
 1975              		.loc 1 681 0
 1976 09d4 2E6A     		ldr	r6, [r5, #32]
 1977              	.LVL186:
 1978              		.loc 1 682 0
 1979 09d6 2C62     		str	r4, [r5, #32]
 1980              		.loc 1 685 0
 1981 09d8 281C     		mov	r0, r5
 1982 09da FFF72DFC 		bl	dhcp_create_request
 1983 09de 0006     		lsl	r0, r0, #24
 1984              		.loc 1 686 0
 1985 09e0 0028     		cmp	r0, #0
 1986 09e2 2AD1     		bne	.L153
 1987              		.loc 1 688 0
 1988 09e4 201C     		mov	r0, r4
 1989 09e6 3521     		mov	r1, #53
 1990 09e8 0122     		mov	r2, #1
 1991 09ea FFF713FB 		bl	dhcp_option
 1992              		.loc 1 689 0
 1993 09ee 201C     		mov	r0, r4
 1994 09f0 0821     		mov	r1, #8
 1995 09f2 FFF721FB 		bl	dhcp_option_byte
 1996              		.loc 1 691 0
 1997 09f6 201C     		mov	r0, r4
 1998 09f8 3921     		mov	r1, #57
 1999 09fa 0222     		mov	r2, #2
 2000 09fc FFF70AFB 		bl	dhcp_option
 2001              		.loc 1 692 0
 2002 0a00 A98C     		ldrh	r1, [r5, #36]
 2003 0a02 201C     		mov	r0, r4
 2004 0a04 FFF720FB 		bl	dhcp_option_short
 2005              		.loc 1 694 0
 2006 0a08 201C     		mov	r0, r4
 2007 0a0a FFF757FB 		bl	dhcp_option_trailer
 2008              		.loc 1 696 0
 2009 0a0e 6069     		ldr	r0, [r4, #20]
 2010 0a10 A18B     		ldrh	r1, [r4, #28]
 2011 0a12 F031     		add	r1, r1, #240
 2012 0a14 0904     		lsl	r1, r1, #16
 2013 0a16 090C     		lsr	r1, r1, #16
 2014 0a18 FFF7FEFF 		bl	pbuf_realloc
 2015              		.loc 1 701 0
 2016 0a1c 6068     		ldr	r0, [r4, #4]
 2017 0a1e 0D49     		ldr	r1, .L155
 2018 0a20 4422     		mov	r2, #68
 2019 0a22 FFF7FEFF 		bl	udp_bind
 2020              		.loc 1 703 0
 2021 0a26 6068     		ldr	r0, [r4, #4]
 2022 0a28 6169     		ldr	r1, [r4, #20]
 2023 0a2a 0B4A     		ldr	r2, .L155+4
 2024 0a2c 0095     		str	r5, [sp]
 2025 0a2e 4323     		mov	r3, #67
 2026 0a30 FFF7FEFF 		bl	udp_sendto_if
 2027              		.loc 1 704 0
 2028 0a34 281C     		mov	r0, r5
 2029 0a36 FFF789FC 		bl	dhcp_delete_request
 2030              	.L153:
 2031              		.loc 1 709 0
 2032 0a3a 6068     		ldr	r0, [r4, #4]
 2033 0a3c FFF7FEFF 		bl	udp_remove
 2034              		.loc 1 710 0
 2035 0a40 0023     		mov	r3, #0
 2036 0a42 6360     		str	r3, [r4, #4]
 2037              		.loc 1 711 0
 2038 0a44 2E62     		str	r6, [r5, #32]
 2039              	.L152:
 2040              		.loc 1 713 0
 2041 0a46 201C     		mov	r0, r4
 2042 0a48 FFF7FEFF 		bl	mem_free
 2043              	.LVL187:
 2044              	.L154:
 2045              		.loc 1 714 0
 2046 0a4c 01B0     		add	sp, sp, #4
 2047              		@ sp needed for prologue
 2048              	.LVL188:
 2049              	.LVL189:
 2050              	.LVL190:
 2051 0a4e 70BC     		pop	{r4, r5, r6}
 2052 0a50 01BC     		pop	{r0}
 2053 0a52 0047     		bx	r0
 2054              	.L156:
 2055              		.align	2
 2056              	.L155:
 2057 0a54 00000000 		.word	ip_addr_any
 2058 0a58 00000000 		.word	ip_addr_broadcast
 2059              	.LFE300:
 2061              		.align	2
 2062              		.global	dhcp_start
 2063              		.code	16
 2064              		.thumb_func
 2066              	dhcp_start:
 2067              	.LFB299:
 2068              		.loc 1 584 0
 2069 0a5c 70B5     		push	{r4, r5, r6, lr}
 2070              	.LCFI26:
 2071              	.LVL191:
 2072 0a5e 051C     		mov	r5, r0
 2073              		.loc 1 588 0
 2074 0a60 0028     		cmp	r0, #0
 2075 0a62 01D1     		bne	.L158
 2076 0a64 F620     		mov	r0, #246
 2077              	.LVL192:
 2078 0a66 4BE0     		b	.L159
 2079              	.LVL193:
 2080              	.L158:
 2081              		.loc 1 589 0
 2082 0a68 066A     		ldr	r6, [r0, #32]
 2083              	.LVL194:
 2084              		.loc 1 593 0
 2085 0a6a 2D21     		mov	r1, #45
 2086 0a6c 435C     		ldrb	r3, [r0, r1]
 2087 0a6e 0822     		mov	r2, #8
 2088 0a70 9343     		bic	r3, r3, r2
 2089 0a72 4354     		strb	r3, [r0, r1]
 2090              		.loc 1 596 0
 2091 0a74 828C     		ldrh	r2, [r0, #36]
 2092 0a76 254B     		ldr	r3, .L166
 2093 0a78 9A42     		cmp	r2, r3
 2094 0a7a 40D9     		bls	.L160
 2095              		.loc 1 602 0
 2096 0a7c 002E     		cmp	r6, #0
 2097 0a7e 07D1     		bne	.L161
 2098              		.loc 1 604 0
 2099 0a80 5020     		mov	r0, #80
 2100              	.LVL195:
 2101 0a82 FFF7FEFF 		bl	mem_malloc
 2102 0a86 061C     		mov	r6, r0
 2103              		.loc 1 605 0
 2104 0a88 0028     		cmp	r0, #0
 2105 0a8a 38D0     		beq	.L160
 2106              	.LVL196:
 2107              		.loc 1 610 0
 2108 0a8c 2862     		str	r0, [r5, #32]
 2109 0a8e 04E0     		b	.L162
 2110              	.LVL197:
 2111              	.L161:
 2112              		.loc 1 615 0
 2113 0a90 7068     		ldr	r0, [r6, #4]
 2114              	.LVL198:
 2115 0a92 0028     		cmp	r0, #0
 2116 0a94 01D0     		beq	.L162
 2117              		.loc 1 616 0
 2118 0a96 FFF7FEFF 		bl	udp_remove
 2119              	.LVL199:
 2120              	.L162:
 2121              		.loc 1 624 0
 2122 0a9a 301C     		mov	r0, r6
 2123 0a9c 0021     		mov	r1, #0
 2124 0a9e 5022     		mov	r2, #80
 2125 0aa0 FFF7FEFF 		bl	memset
 2126              		.loc 1 626 0
 2127 0aa4 FFF7FEFF 		bl	udp_new
 2128 0aa8 7060     		str	r0, [r6, #4]
 2129              		.loc 1 627 0
 2130 0aaa 0028     		cmp	r0, #0
 2131 0aac 06D1     		bne	.L163
 2132              		.loc 1 629 0
 2133 0aae 301C     		mov	r0, r6
 2134 0ab0 FFF7FEFF 		bl	mem_free
 2135              		.loc 1 630 0
 2136 0ab4 0023     		mov	r3, #0
 2137 0ab6 2B62     		str	r3, [r5, #32]
 2138 0ab8 FF20     		mov	r0, #255
 2139              	.LVL200:
 2140 0aba 21E0     		b	.L159
 2141              	.LVL201:
 2142              	.L163:
 2143              		.loc 1 637 0
 2144 0abc 144C     		ldr	r4, .L166+4
 2145 0abe 211C     		mov	r1, r4
 2146 0ac0 4422     		mov	r2, #68
 2147 0ac2 FFF7FEFF 		bl	udp_bind
 2148              		.loc 1 638 0
 2149 0ac6 7068     		ldr	r0, [r6, #4]
 2150 0ac8 211C     		mov	r1, r4
 2151 0aca 4322     		mov	r2, #67
 2152 0acc FFF7FEFF 		bl	udp_connect
 2153              		.loc 1 640 0
 2154 0ad0 7068     		ldr	r0, [r6, #4]
 2155 0ad2 1049     		ldr	r1, .L166+8
 2156 0ad4 2A1C     		mov	r2, r5
 2157 0ad6 FFF7FEFF 		bl	udp_recv
 2158              		.loc 1 643 0
 2159 0ada 281C     		mov	r0, r5
 2160 0adc FFF708FD 		bl	dhcp_discover
 2161 0ae0 0006     		lsl	r0, r0, #24
 2162 0ae2 000E     		lsr	r0, r0, #24
 2163              	.LVL202:
 2164              		.loc 1 644 0
 2165 0ae4 0028     		cmp	r0, #0
 2166 0ae6 04D0     		beq	.L164
 2167              		.loc 1 646 0
 2168 0ae8 281C     		mov	r0, r5
 2169              	.LVL203:
 2170 0aea FFF7FEFF 		bl	dhcp_stop
 2171 0aee FF20     		mov	r0, #255
 2172              	.LVL204:
 2173 0af0 06E0     		b	.L159
 2174              	.L164:
 2175              		.loc 1 650 0
 2176 0af2 2D23     		mov	r3, #45
 2177 0af4 EA5C     		ldrb	r2, [r5, r3]
 2178 0af6 0821     		mov	r1, #8
 2179 0af8 0A43     		orr	r2, r2, r1
 2180 0afa EA54     		strb	r2, [r5, r3]
 2181 0afc 00E0     		b	.L159
 2182              	.LVL205:
 2183              	.L160:
 2184              		.loc 1 651 0
 2185 0afe FF20     		mov	r0, #255
 2186              	.LVL206:
 2187              	.L159:
 2188 0b00 0006     		lsl	r0, r0, #24
 2189              	.LVL207:
 2190 0b02 0016     		asr	r0, r0, #24
 2191              		.loc 1 652 0
 2192              		@ sp needed for prologue
 2193              	.LVL208:
 2194              	.LVL209:
 2195 0b04 70BC     		pop	{r4, r5, r6}
 2196 0b06 02BC     		pop	{r1}
 2197 0b08 0847     		bx	r1
 2198              	.L167:
 2199 0b0a C046     		.align	2
 2200              	.L166:
 2201 0b0c 3F020000 		.word	575
 2202 0b10 00000000 		.word	ip_addr_any
 2203 0b14 00000000 		.word	dhcp_recv
 2204              	.LFE299:
 2206              		.global	__udivsi3
 2207              		.align	2
 2208              		.code	16
 2209              		.thumb_func
 2211              	dhcp_bind:
 2212              	.LFB303:
 2213              		.loc 1 882 0
 2214 0b18 70B5     		push	{r4, r5, r6, lr}
 2215              	.LCFI27:
 2216              	.LVL210:
 2217 0b1a 82B0     		sub	sp, sp, #8
 2218              	.LCFI28:
 2219 0b1c 061C     		mov	r6, r0
 2220              		.loc 1 886 0
 2221 0b1e 0028     		cmp	r0, #0
 2222 0b20 75D0     		beq	.L182
 2223              		.loc 1 887 0
 2224 0b22 056A     		ldr	r5, [r0, #32]
 2225              	.LVL211:
 2226              		.loc 1 888 0
 2227 0b24 002D     		cmp	r5, #0
 2228 0b26 72D0     		beq	.L182
 2229              		.loc 1 892 0
 2230 0b28 A86C     		ldr	r0, [r5, #72]
 2231              	.LVL212:
 2232 0b2a 431C     		add	r3, r0, #1
 2233 0b2c 0DD0     		beq	.L170
 2234              		.loc 1 895 0
 2235 0b2e 1E30     		add	r0, r0, #30
 2236 0b30 3C21     		mov	r1, #60
 2237 0b32 FFF7FEFF 		bl	__udivsi3
 2238              		.loc 1 896 0
 2239 0b36 384B     		ldr	r3, .L183
 2240 0b38 9842     		cmp	r0, r3
 2241 0b3a 5AD8     		bhi	.L171
 2242              	.LVL213:
 2243              		.loc 1 899 0
 2244 0b3c 0304     		lsl	r3, r0, #16
 2245 0b3e 1B0C     		lsr	r3, r3, #16
 2246 0b40 2B84     		strh	r3, [r5, #32]
 2247              		.loc 1 900 0
 2248 0b42 002B     		cmp	r3, #0
 2249 0b44 01D1     		bne	.L170
 2250              		.loc 1 901 0
 2251 0b46 0123     		mov	r3, #1
 2252 0b48 2B84     		strh	r3, [r5, #32]
 2253              	.L170:
 2254              		.loc 1 906 0
 2255 0b4a E86C     		ldr	r0, [r5, #76]
 2256              	.LVL214:
 2257 0b4c 431C     		add	r3, r0, #1
 2258 0b4e 0DD0     		beq	.L172
 2259              		.loc 1 908 0
 2260 0b50 1E30     		add	r0, r0, #30
 2261 0b52 3C21     		mov	r1, #60
 2262 0b54 FFF7FEFF 		bl	__udivsi3
 2263              		.loc 1 909 0
 2264 0b58 2F4B     		ldr	r3, .L183
 2265 0b5a 9842     		cmp	r0, r3
 2266 0b5c 4DD8     		bhi	.L173
 2267              	.LVL215:
 2268              		.loc 1 912 0
 2269 0b5e 0304     		lsl	r3, r0, #16
 2270 0b60 1B0C     		lsr	r3, r3, #16
 2271 0b62 6B84     		strh	r3, [r5, #34]
 2272              		.loc 1 913 0
 2273 0b64 002B     		cmp	r3, #0
 2274 0b66 01D1     		bne	.L172
 2275              		.loc 1 914 0
 2276 0b68 0123     		mov	r3, #1
 2277 0b6a 6B84     		strh	r3, [r5, #34]
 2278              	.L172:
 2279              		.loc 1 919 0
 2280 0b6c 2B1C     		mov	r3, r5
 2281 0b6e 2C33     		add	r3, r3, #44
 2282 0b70 47D0     		beq	.L174
 2283 0b72 EB6A     		ldr	r3, [r5, #44]
 2284 0b74 0193     		str	r3, [sp, #4]
 2285              		.loc 1 923 0
 2286 0b76 002B     		cmp	r3, #0
 2287 0b78 16D1     		bne	.L175
 2288              	.L180:
 2289              	.LBB16:
 2290              		.loc 1 925 0
 2291 0b7a 0020     		mov	r0, #0
 2292              	.LVL216:
 2293 0b7c FFF7FEFF 		bl	ntohl
 2294              		.loc 1 926 0
 2295 0b80 030E     		lsr	r3, r0, #24
 2296              	.LVL217:
 2297 0b82 0028     		cmp	r0, #0
 2298 0b84 05DB     		blt	.L176
 2299              		.loc 1 927 0
 2300 0b86 FF20     		mov	r0, #255
 2301 0b88 0006     		lsl	r0, r0, #24
 2302 0b8a FFF7FEFF 		bl	htonl
 2303              	.LVL218:
 2304 0b8e 0190     		str	r0, [sp, #4]
 2305 0b90 0AE0     		b	.L175
 2306              	.LVL219:
 2307              	.L176:
 2308              		.loc 1 928 0
 2309 0b92 BF2B     		cmp	r3, #191
 2310 0b94 04D9     		bls	.L177
 2311              		.loc 1 929 0
 2312 0b96 2148     		ldr	r0, .L183+4
 2313 0b98 FFF7FEFF 		bl	htonl
 2314              	.LVL220:
 2315 0b9c 0190     		str	r0, [sp, #4]
 2316 0b9e 03E0     		b	.L175
 2317              	.LVL221:
 2318              	.L177:
 2319              		.loc 1 931 0
 2320 0ba0 1F48     		ldr	r0, .L183+8
 2321 0ba2 FFF7FEFF 		bl	htonl
 2322              	.LVL222:
 2323 0ba6 0190     		str	r0, [sp, #4]
 2324              	.LVL223:
 2325              	.L175:
 2326              	.LBE16:
 2327              		.loc 1 935 0
 2328 0ba8 2B1C     		mov	r3, r5
 2329 0baa 3033     		add	r3, r3, #48
 2330 0bac 2CD0     		beq	.L178
 2331 0bae 2B6B     		ldr	r3, [r5, #48]
 2332 0bb0 0093     		str	r3, [sp]
 2333              		.loc 1 937 0
 2334 0bb2 002B     		cmp	r3, #0
 2335 0bb4 08D1     		bne	.L179
 2336              	.L181:
 2337              		.loc 1 939 0
 2338 0bb6 019C     		ldr	r4, [sp, #4]
 2339 0bb8 AB6A     		ldr	r3, [r5, #40]
 2340 0bba 1C40     		and	r4, r4, r3
 2341 0bbc 0094     		str	r4, [sp]
 2342              		.loc 1 941 0
 2343 0bbe 0120     		mov	r0, #1
 2344              	.LVL224:
 2345 0bc0 FFF7FEFF 		bl	htonl
 2346 0bc4 2043     		orr	r0, r0, r4
 2347 0bc6 0090     		str	r0, [sp]
 2348              	.LVL225:
 2349              	.L179:
 2350              		.loc 1 952 0
 2351 0bc8 291C     		mov	r1, r5
 2352 0bca 2831     		add	r1, r1, #40
 2353 0bcc 301C     		mov	r0, r6
 2354              	.LVL226:
 2355 0bce FFF7FEFF 		bl	netif_set_ipaddr
 2356              		.loc 1 954 0
 2357 0bd2 301C     		mov	r0, r6
 2358 0bd4 01A9     		add	r1, sp, #4
 2359 0bd6 FFF7FEFF 		bl	netif_set_netmask
 2360              		.loc 1 956 0
 2361 0bda 301C     		mov	r0, r6
 2362 0bdc 6946     		mov	r1, sp
 2363 0bde FFF7FEFF 		bl	netif_set_gw
 2364              		.loc 1 958 0
 2365 0be2 301C     		mov	r0, r6
 2366 0be4 FFF7FEFF 		bl	netif_set_up
 2367              		.loc 1 960 0
 2368 0be8 281C     		mov	r0, r5
 2369 0bea 0A21     		mov	r1, #10
 2370 0bec FFF708FA 		bl	dhcp_set_state
 2371 0bf0 0DE0     		b	.L182
 2372              	.LVL227:
 2373              	.L171:
 2374              		.loc 1 899 0
 2375 0bf2 0123     		mov	r3, #1
 2376 0bf4 5B42     		neg	r3, r3
 2377 0bf6 2B84     		strh	r3, [r5, #32]
 2378 0bf8 A7E7     		b	.L170
 2379              	.L173:
 2380              		.loc 1 912 0
 2381 0bfa 0123     		mov	r3, #1
 2382 0bfc 5B42     		neg	r3, r3
 2383 0bfe 6B84     		strh	r3, [r5, #34]
 2384 0c00 B4E7     		b	.L172
 2385              	.L174:
 2386              		.loc 1 919 0
 2387 0c02 0023     		mov	r3, #0
 2388 0c04 0193     		str	r3, [sp, #4]
 2389 0c06 B8E7     		b	.L180
 2390              	.L178:
 2391              		.loc 1 935 0
 2392 0c08 0023     		mov	r3, #0
 2393 0c0a 0093     		str	r3, [sp]
 2394 0c0c D3E7     		b	.L181
 2395              	.LVL228:
 2396              	.L182:
 2397              		.loc 1 961 0
 2398 0c0e 02B0     		add	sp, sp, #8
 2399              		@ sp needed for prologue
 2400              	.LVL229:
 2401              	.LVL230:
 2402 0c10 70BC     		pop	{r4, r5, r6}
 2403 0c12 01BC     		pop	{r0}
 2404 0c14 0047     		bx	r0
 2405              	.L184:
 2406 0c16 C046     		.align	2
 2407              	.L183:
 2408 0c18 FFFF0000 		.word	65535
 2409 0c1c 00FFFFFF 		.word	-256
 2410 0c20 0000FFFF 		.word	-65536
 2411              	.LFE303:
 2413              		.align	2
 2414              		.code	16
 2415              		.thumb_func
 2417              	dhcp_recv:
 2418              	.LFB316:
 2419              		.loc 1 1361 0
 2420 0c24 F0B5     		push	{r4, r5, r6, r7, lr}
 2421              	.LCFI29:
 2422 0c26 5746     		mov	r7, sl
 2423 0c28 4646     		mov	r6, r8
 2424 0c2a C0B4     		push	{r6, r7}
 2425              	.LCFI30:
 2426              	.LVL231:
 2427 0c2c 9046     		mov	r8, r2
 2428              		.loc 1 1362 0
 2429 0c2e 061C     		mov	r6, r0
 2430              	.LVL232:
 2431              		.loc 1 1363 0
 2432 0c30 076A     		ldr	r7, [r0, #32]
 2433              	.LVL233:
 2434              		.loc 1 1364 0
 2435 0c32 5268     		ldr	r2, [r2, #4]
 2436              	.LVL234:
 2437              		.loc 1 1381 0
 2438 0c34 4146     		mov	r1, r8
 2439              	.LVL235:
 2440 0c36 4B89     		ldrh	r3, [r1, #10]
 2441              	.LVL236:
 2442 0c38 2B2B     		cmp	r3, #43
 2443 0c3a 00D8     		bhi	.LCB2225
 2444 0c3c 39E1     		b	.L186	@long jump
 2445              	.LCB2225:
 2446              	.LVL237:
 2447              		.loc 1 1364 0
 2448 0c3e 141C     		mov	r4, r2
 2449              	.LVL238:
 2450              		.loc 1 1386 0
 2451 0c40 1378     		ldrb	r3, [r2]
 2452 0c42 022B     		cmp	r3, #2
 2453 0c44 00D0     		beq	.LCB2231
 2454 0c46 34E1     		b	.L186	@long jump
 2455              	.LCB2231:
 2456              	.LVL239:
 2457              		.loc 1 1391 0
 2458 0c48 2623     		mov	r3, #38
 2459 0c4a C55C     		ldrb	r5, [r0, r3]
 2460 0c4c 002D     		cmp	r5, #0
 2461 0c4e 16D0     		beq	.L187
 2462              		.loc 1 1392 0
 2463 0c50 2723     		mov	r3, #39
 2464 0c52 C25C     		ldrb	r2, [r0, r3]
 2465              	.LVL240:
 2466 0c54 237F     		ldrb	r3, [r4, #28]
 2467 0c56 9A42     		cmp	r2, r3
 2468 0c58 00D0     		beq	.LCB2242
 2469 0c5a 2AE1     		b	.L186	@long jump
 2470              	.LCB2242:
 2471 0c5c 0020     		mov	r0, #0
 2472              	.LVL241:
 2473 0c5e 0021     		mov	r1, #0
 2474 0c60 08E0     		b	.L188
 2475              	.L189:
 2476 0c62 7318     		add	r3, r6, r1
 2477 0c64 2833     		add	r3, r3, #40
 2478 0c66 1A78     		ldrb	r2, [r3]
 2479 0c68 6318     		add	r3, r4, r1
 2480 0c6a 5B7F     		ldrb	r3, [r3, #29]
 2481 0c6c 0131     		add	r1, r1, #1
 2482 0c6e 9A42     		cmp	r2, r3
 2483 0c70 00D0     		beq	.LCB2259
 2484 0c72 1EE1     		b	.L186	@long jump
 2485              	.LCB2259:
 2486              	.L188:
 2487              		.loc 1 1391 0
 2488 0c74 431C     		add	r3, r0, #1
 2489 0c76 1B06     		lsl	r3, r3, #24
 2490 0c78 180E     		lsr	r0, r3, #24
 2491 0c7a A842     		cmp	r0, r5
 2492 0c7c F1D3     		bcc	.L189
 2493              	.LVL242:
 2494              	.L187:
 2495              		.loc 1 1400 0
 2496 0c7e 6068     		ldr	r0, [r4, #4]
 2497              	.LVL243:
 2498 0c80 FFF7FEFF 		bl	ntohl
 2499 0c84 3B68     		ldr	r3, [r7]
 2500 0c86 9842     		cmp	r0, r3
 2501 0c88 00D0     		beq	.LCB2277
 2502 0c8a 12E1     		b	.L186	@long jump
 2503              	.LCB2277:
 2504              	.LBB26:
 2505              	.LBB27:
 2506              		.loc 1 1296 0
 2507 0c8c 002F     		cmp	r7, #0
 2508 0c8e 00D1     		bne	.LCB2281
 2509 0c90 0FE1     		b	.L186	@long jump
 2510              	.LCB2281:
 2511              		.loc 1 1298 0
 2512 0c92 381C     		mov	r0, r7
 2513 0c94 FFF7BCFA 		bl	dhcp_free_reply
 2514              		.loc 1 1300 0
 2515 0c98 4246     		mov	r2, r8
 2516 0c9a 1089     		ldrh	r0, [r2, #8]
 2517 0c9c F028     		cmp	r0, #240
 2518 0c9e 0BD9     		bls	.L190
 2519              		.loc 1 1301 0
 2520 0ca0 F038     		sub	r0, r0, #240
 2521 0ca2 0004     		lsl	r0, r0, #16
 2522 0ca4 000C     		lsr	r0, r0, #16
 2523 0ca6 3882     		strh	r0, [r7, #16]
 2524              	.LBE27:
 2525              		.loc 1 1302 0
 2526 0ca8 FFF7FEFF 		bl	mem_malloc
 2527              	.LBB28:
 2528 0cac F860     		str	r0, [r7, #12]
 2529              		.loc 1 1303 0
 2530 0cae 0028     		cmp	r0, #0
 2531 0cb0 02D1     		bne	.L190
 2532              		.loc 1 1306 0
 2533 0cb2 0023     		mov	r3, #0
 2534 0cb4 3B82     		strh	r3, [r7, #16]
 2535 0cb6 FCE0     		b	.L186
 2536              	.L190:
 2537              	.LBE28:
 2538              		.loc 1 1310 0
 2539 0cb8 F020     		mov	r0, #240
 2540 0cba FFF7FEFF 		bl	mem_malloc
 2541 0cbe 011C     		mov	r1, r0
 2542              	.LBB29:
 2543 0cc0 B860     		str	r0, [r7, #8]
 2544              		.loc 1 1311 0
 2545 0cc2 0028     		cmp	r0, #0
 2546 0cc4 09D1     		bne	.L191
 2547              		.loc 1 1314 0
 2548 0cc6 F868     		ldr	r0, [r7, #12]
 2549 0cc8 0028     		cmp	r0, #0
 2550 0cca 00D1     		bne	.LCB2314
 2551 0ccc F1E0     		b	.L186	@long jump
 2552              	.LCB2314:
 2553              		.loc 1 1315 0
 2554 0cce FFF7FEFF 		bl	mem_free
 2555              		.loc 1 1316 0
 2556 0cd2 0023     		mov	r3, #0
 2557 0cd4 FB60     		str	r3, [r7, #12]
 2558              		.loc 1 1317 0
 2559 0cd6 3B82     		strh	r3, [r7, #16]
 2560 0cd8 EBE0     		b	.L186
 2561              	.L191:
 2562              		.loc 1 1323 0
 2563 0cda 4046     		mov	r0, r8
 2564 0cdc F022     		mov	r2, #240
 2565 0cde 0023     		mov	r3, #0
 2566 0ce0 FFF7FEFF 		bl	pbuf_copy_partial
 2567              		.loc 1 1328 0
 2568 0ce4 F968     		ldr	r1, [r7, #12]
 2569 0ce6 0029     		cmp	r1, #0
 2570 0ce8 00D1     		bne	.LCB2329
 2571 0cea EEE0     		b	.L192	@long jump
 2572              	.LCB2329:
 2573              		.loc 1 1330 0
 2574 0cec 3A8A     		ldrh	r2, [r7, #16]
 2575 0cee 4046     		mov	r0, r8
 2576 0cf0 F023     		mov	r3, #240
 2577 0cf2 FFF7FEFF 		bl	pbuf_copy_partial
 2578 0cf6 E8E0     		b	.L192
 2579              	.LVL244:
 2580              	.L216:
 2581              	.LBE29:
 2582              	.LBE26:
 2583              		.loc 1 1421 0
 2584 0cf8 0230     		add	r0, r0, #2
 2585              	.LVL245:
 2586 0cfa FFF75DFA 		bl	dhcp_get_option_byte
 2587              		.loc 1 1423 0
 2588 0cfe 0528     		cmp	r0, #5
 2589 0d00 00D0     		beq	.LCB2345
 2590 0d02 91E0     		b	.L193	@long jump
 2591              	.LCB2345:
 2592              	.LVL246:
 2593              		.loc 1 1426 0
 2594 0d04 BB7C     		ldrb	r3, [r7, #18]
 2595 0d06 012B     		cmp	r3, #1
 2596 0d08 00D0     		beq	.LCB2349
 2597 0d0a 82E0     		b	.L194	@long jump
 2598              	.LCB2349:
 2599              	.LBB30:
 2600              	.LBB31:
 2601              		.loc 1 481 0
 2602 0d0c 346A     		ldr	r4, [r6, #32]
 2603              	.LVL247:
 2604              		.loc 1 484 0
 2605 0d0e 0023     		mov	r3, #0
 2606 0d10 E362     		str	r3, [r4, #44]
 2607              		.loc 1 485 0
 2608 0d12 2363     		str	r3, [r4, #48]
 2609              		.loc 1 486 0
 2610 0d14 6363     		str	r3, [r4, #52]
 2611              	.LBE31:
 2612              		.loc 1 489 0
 2613 0d16 201C     		mov	r0, r4
 2614              	.LVL248:
 2615 0d18 3321     		mov	r1, #51
 2616 0d1a FFF7EDF9 		bl	dhcp_get_option_ptr
 2617              	.LBB34:
 2618              		.loc 1 490 0
 2619 0d1e 0028     		cmp	r0, #0
 2620 0d20 03D0     		beq	.L195
 2621              	.LVL249:
 2622              	.LBE34:
 2623              		.loc 1 492 0
 2624 0d22 0230     		add	r0, r0, #2
 2625              	.LVL250:
 2626 0d24 FFF74AFA 		bl	dhcp_get_option_long
 2627              	.LBB35:
 2628 0d28 6064     		str	r0, [r4, #68]
 2629              	.LVL251:
 2630              	.L195:
 2631              	.LBE35:
 2632              		.loc 1 495 0
 2633 0d2a 201C     		mov	r0, r4
 2634              	.LVL252:
 2635 0d2c 3A21     		mov	r1, #58
 2636 0d2e FFF7E3F9 		bl	dhcp_get_option_ptr
 2637              	.LBB36:
 2638              		.loc 1 496 0
 2639 0d32 0028     		cmp	r0, #0
 2640 0d34 04D0     		beq	.L196
 2641              	.LVL253:
 2642              	.LBE36:
 2643              		.loc 1 498 0
 2644 0d36 0230     		add	r0, r0, #2
 2645              	.LVL254:
 2646 0d38 FFF740FA 		bl	dhcp_get_option_long
 2647              	.LBB37:
 2648 0d3c A064     		str	r0, [r4, #72]
 2649 0d3e 02E0     		b	.L197
 2650              	.LVL255:
 2651              	.L196:
 2652              		.loc 1 501 0
 2653 0d40 636C     		ldr	r3, [r4, #68]
 2654 0d42 5B08     		lsr	r3, r3, #1
 2655 0d44 A364     		str	r3, [r4, #72]
 2656              	.L197:
 2657              	.LBE37:
 2658              		.loc 1 505 0
 2659 0d46 201C     		mov	r0, r4
 2660              	.LVL256:
 2661 0d48 3B21     		mov	r1, #59
 2662 0d4a FFF7D5F9 		bl	dhcp_get_option_ptr
 2663              	.LBB38:
 2664              		.loc 1 506 0
 2665 0d4e 0028     		cmp	r0, #0
 2666 0d50 04D0     		beq	.L198
 2667              	.LVL257:
 2668              	.LBE38:
 2669              		.loc 1 508 0
 2670 0d52 0230     		add	r0, r0, #2
 2671              	.LVL258:
 2672 0d54 FFF732FA 		bl	dhcp_get_option_long
 2673              	.LBB39:
 2674 0d58 E064     		str	r0, [r4, #76]
 2675 0d5a 01E0     		b	.L199
 2676              	.LVL259:
 2677              	.L198:
 2678              		.loc 1 511 0
 2679 0d5c 636C     		ldr	r3, [r4, #68]
 2680 0d5e E364     		str	r3, [r4, #76]
 2681              	.L199:
 2682              		.loc 1 515 0
 2683 0d60 A368     		ldr	r3, [r4, #8]
 2684 0d62 191C     		mov	r1, r3
 2685 0d64 1031     		add	r1, r1, #16
 2686 0d66 01D1     		bne	.L200
 2687 0d68 0023     		mov	r3, #0
 2688 0d6a 00E0     		b	.L201
 2689              	.L200:
 2690 0d6c 1B69     		ldr	r3, [r3, #16]
 2691              	.L201:
 2692 0d6e A362     		str	r3, [r4, #40]
 2693              	.LBE39:
 2694              		.loc 1 532 0
 2695 0d70 201C     		mov	r0, r4
 2696              	.LVL260:
 2697 0d72 0121     		mov	r1, #1
 2698 0d74 FFF7C0F9 		bl	dhcp_get_option_ptr
 2699              	.LBB40:
 2700              		.loc 1 534 0
 2701 0d78 0028     		cmp	r0, #0
 2702 0d7a 05D0     		beq	.L202
 2703              	.LVL261:
 2704              	.LBE40:
 2705              		.loc 1 535 0
 2706 0d7c 0230     		add	r0, r0, #2
 2707              	.LVL262:
 2708 0d7e FFF71DFA 		bl	dhcp_get_option_long
 2709 0d82 FFF7FEFF 		bl	htonl
 2710              	.LBB41:
 2711 0d86 E062     		str	r0, [r4, #44]
 2712              	.LVL263:
 2713              	.L202:
 2714              	.LBE41:
 2715              		.loc 1 539 0
 2716 0d88 201C     		mov	r0, r4
 2717              	.LVL264:
 2718 0d8a 0321     		mov	r1, #3
 2719 0d8c FFF7B4F9 		bl	dhcp_get_option_ptr
 2720              	.LBB42:
 2721              		.loc 1 540 0
 2722 0d90 0028     		cmp	r0, #0
 2723 0d92 05D0     		beq	.L203
 2724              	.LVL265:
 2725              	.LBE42:
 2726              		.loc 1 541 0
 2727 0d94 0230     		add	r0, r0, #2
 2728              	.LVL266:
 2729 0d96 FFF711FA 		bl	dhcp_get_option_long
 2730 0d9a FFF7FEFF 		bl	htonl
 2731              	.LBB43:
 2732 0d9e 2063     		str	r0, [r4, #48]
 2733              	.LVL267:
 2734              	.L203:
 2735              	.LBE43:
 2736              		.loc 1 545 0
 2737 0da0 201C     		mov	r0, r4
 2738              	.LVL268:
 2739 0da2 1C21     		mov	r1, #28
 2740 0da4 FFF7A8F9 		bl	dhcp_get_option_ptr
 2741              	.LBB44:
 2742              		.loc 1 546 0
 2743 0da8 0028     		cmp	r0, #0
 2744 0daa 05D0     		beq	.L204
 2745              	.LVL269:
 2746              	.LBE44:
 2747              		.loc 1 547 0
 2748 0dac 0230     		add	r0, r0, #2
 2749              	.LVL270:
 2750 0dae FFF705FA 		bl	dhcp_get_option_long
 2751 0db2 FFF7FEFF 		bl	htonl
 2752              	.LBB45:
 2753 0db6 6063     		str	r0, [r4, #52]
 2754              	.LVL271:
 2755              	.L204:
 2756              	.LBE45:
 2757              		.loc 1 551 0
 2758 0db8 201C     		mov	r0, r4
 2759              	.LVL272:
 2760 0dba 0621     		mov	r1, #6
 2761 0dbc FFF79CF9 		bl	dhcp_get_option_ptr
 2762 0dc0 8246     		mov	sl, r0
 2763              	.LVL273:
 2764              	.LBB46:
 2765              		.loc 1 552 0
 2766 0dc2 0028     		cmp	r0, #0
 2767 0dc4 1FD0     		beq	.L205
 2768              	.LBE46:
 2769              		.loc 1 554 0
 2770 0dc6 0130     		add	r0, r0, #1
 2771 0dc8 FFF7F6F9 		bl	dhcp_get_option_byte
 2772              	.LBB47:
 2773              	.LBB32:
 2774 0dcc 8005     		lsl	r0, r0, #22
 2775 0dce 000E     		lsr	r0, r0, #24
 2776 0dd0 A063     		str	r0, [r4, #56]
 2777              		.loc 1 556 0
 2778 0dd2 0228     		cmp	r0, #2
 2779 0dd4 03D9     		bls	.L206
 2780              		.loc 1 557 0
 2781 0dd6 0223     		mov	r3, #2
 2782 0dd8 A363     		str	r3, [r4, #56]
 2783              	.L208:
 2784 0dda 0025     		mov	r5, #0
 2785              	.LVL274:
 2786 0ddc 02E0     		b	.L207
 2787              	.LVL275:
 2788              	.L206:
 2789              		.loc 1 558 0
 2790 0dde 0028     		cmp	r0, #0
 2791 0de0 FBD1     		bne	.L208
 2792 0de2 10E0     		b	.L205
 2793              	.LVL276:
 2794              	.L207:
 2795              	.LBE32:
 2796              	.LBE47:
 2797              		.loc 1 559 0
 2798 0de4 A800     		lsl	r0, r5, #2
 2799 0de6 0230     		add	r0, r0, #2
 2800 0de8 5044     		add	r0, r0, sl
 2801 0dea FFF7E7F9 		bl	dhcp_get_option_long
 2802 0dee FFF7FEFF 		bl	htonl
 2803              	.LBB48:
 2804              	.LBB33:
 2805 0df2 2B1C     		mov	r3, r5
 2806 0df4 0F33     		add	r3, r3, #15
 2807 0df6 9B00     		lsl	r3, r3, #2
 2808 0df8 1851     		str	r0, [r3, r4]
 2809              		.loc 1 558 0
 2810 0dfa 6B1C     		add	r3, r5, #1
 2811 0dfc 1B06     		lsl	r3, r3, #24
 2812 0dfe 1D0E     		lsr	r5, r3, #24
 2813              	.LVL277:
 2814 0e00 A36B     		ldr	r3, [r4, #56]
 2815 0e02 9D42     		cmp	r5, r3
 2816 0e04 EED3     		bcc	.L207
 2817              	.L205:
 2818              	.LBE33:
 2819              	.LBE48:
 2820              	.LBE30:
 2821              		.loc 1 1428 0
 2822 0e06 0023     		mov	r3, #0
 2823 0e08 FB83     		strh	r3, [r7, #30]
 2824              		.loc 1 1434 0
 2825 0e0a 301C     		mov	r0, r6
 2826 0e0c FFF784FE 		bl	dhcp_bind
 2827 0e10 4FE0     		b	.L186
 2828              	.LVL278:
 2829              	.L194:
 2830              		.loc 1 1438 0
 2831 0e12 033B     		sub	r3, r3, #3
 2832 0e14 1B06     		lsl	r3, r3, #24
 2833 0e16 1B0E     		lsr	r3, r3, #24
 2834 0e18 022B     		cmp	r3, #2
 2835 0e1a 4AD8     		bhi	.L186
 2836              		.loc 1 1439 0
 2837 0e1c 0023     		mov	r3, #0
 2838 0e1e FB83     		strh	r3, [r7, #30]
 2839              		.loc 1 1440 0
 2840 0e20 301C     		mov	r0, r6
 2841              	.LVL279:
 2842 0e22 FFF779FE 		bl	dhcp_bind
 2843 0e26 44E0     		b	.L186
 2844              	.LVL280:
 2845              	.L193:
 2846              		.loc 1 1444 0
 2847 0e28 0628     		cmp	r0, #6
 2848 0e2a 23D1     		bne	.L209
 2849 0e2c BB7C     		ldrb	r3, [r7, #18]
 2850 0e2e 032B     		cmp	r3, #3
 2851 0e30 05D0     		beq	.L210
 2852 0e32 012B     		cmp	r3, #1
 2853 0e34 03D0     		beq	.L210
 2854 0e36 042B     		cmp	r3, #4
 2855 0e38 01D0     		beq	.L210
 2856 0e3a 052B     		cmp	r3, #5
 2857 0e3c 39D1     		bne	.L186
 2858              	.L210:
 2859              		.loc 1 1448 0
 2860 0e3e 0023     		mov	r3, #0
 2861 0e40 FB83     		strh	r3, [r7, #30]
 2862              	.LBB49:
 2863              	.LBB50:
 2864              		.loc 1 168 0
 2865 0e42 356A     		ldr	r5, [r6, #32]
 2866              	.LVL281:
 2867              		.loc 1 172 0
 2868 0e44 301C     		mov	r0, r6
 2869              	.LVL282:
 2870 0e46 FFF7FEFF 		bl	netif_set_down
 2871              		.loc 1 174 0
 2872 0e4a 244C     		ldr	r4, .L217
 2873              	.LVL283:
 2874 0e4c 301C     		mov	r0, r6
 2875 0e4e 211C     		mov	r1, r4
 2876 0e50 FFF7FEFF 		bl	netif_set_ipaddr
 2877              		.loc 1 175 0
 2878 0e54 301C     		mov	r0, r6
 2879 0e56 211C     		mov	r1, r4
 2880 0e58 FFF7FEFF 		bl	netif_set_gw
 2881              		.loc 1 176 0
 2882 0e5c 301C     		mov	r0, r6
 2883 0e5e 211C     		mov	r1, r4
 2884 0e60 FFF7FEFF 		bl	netif_set_netmask
 2885              		.loc 1 178 0
 2886 0e64 281C     		mov	r0, r5
 2887 0e66 0C21     		mov	r1, #12
 2888 0e68 FFF7CAF8 		bl	dhcp_set_state
 2889              		.loc 1 180 0
 2890 0e6c 301C     		mov	r0, r6
 2891 0e6e FFF73FFB 		bl	dhcp_discover
 2892 0e72 1EE0     		b	.L186
 2893              	.LVL284:
 2894              	.L209:
 2895              	.LBE50:
 2896              	.LBE49:
 2897              		.loc 1 1452 0
 2898 0e74 0228     		cmp	r0, #2
 2899 0e76 1CD1     		bne	.L186
 2900 0e78 BB7C     		ldrb	r3, [r7, #18]
 2901 0e7a 062B     		cmp	r3, #6
 2902 0e7c 19D1     		bne	.L186
 2903              		.loc 1 1454 0
 2904 0e7e 0023     		mov	r3, #0
 2905 0e80 FB83     		strh	r3, [r7, #30]
 2906              	.LBB51:
 2907              	.LBB52:
 2908              		.loc 1 223 0
 2909 0e82 346A     		ldr	r4, [r6, #32]
 2910              	.LVL285:
 2911              	.LBE52:
 2912              		.loc 1 225 0
 2913 0e84 201C     		mov	r0, r4
 2914              	.LVL286:
 2915 0e86 3621     		mov	r1, #54
 2916 0e88 FFF736F9 		bl	dhcp_get_option_ptr
 2917              	.LBB53:
 2918              		.loc 1 228 0
 2919 0e8c 0028     		cmp	r0, #0
 2920 0e8e 10D0     		beq	.L186
 2921              	.LVL287:
 2922              	.LBE53:
 2923              		.loc 1 229 0
 2924 0e90 0230     		add	r0, r0, #2
 2925              	.LVL288:
 2926 0e92 FFF793F9 		bl	dhcp_get_option_long
 2927 0e96 FFF7FEFF 		bl	htonl
 2928              	.LBB54:
 2929 0e9a 6062     		str	r0, [r4, #36]
 2930              		.loc 1 232 0
 2931 0e9c A368     		ldr	r3, [r4, #8]
 2932 0e9e 1A1C     		mov	r2, r3
 2933 0ea0 1032     		add	r2, r2, #16
 2934 0ea2 01D1     		bne	.L211
 2935 0ea4 0023     		mov	r3, #0
 2936 0ea6 00E0     		b	.L212
 2937              	.L211:
 2938 0ea8 1B69     		ldr	r3, [r3, #16]
 2939              	.L212:
 2940 0eaa A362     		str	r3, [r4, #40]
 2941              		.loc 1 235 0
 2942 0eac 301C     		mov	r0, r6
 2943 0eae FFF7A7FC 		bl	dhcp_select
 2944              	.LVL289:
 2945              	.L186:
 2946              	.LBE54:
 2947              	.LBE51:
 2948              		.loc 1 1459 0
 2949 0eb2 381C     		mov	r0, r7
 2950              	.LVL290:
 2951 0eb4 FFF7ACF9 		bl	dhcp_free_reply
 2952              		.loc 1 1460 0
 2953 0eb8 4046     		mov	r0, r8
 2954 0eba FFF7FEFF 		bl	pbuf_free
 2955              		.loc 1 1461 0
 2956              		@ sp needed for prologue
 2957              	.LVL291:
 2958              	.LVL292:
 2959              	.LVL293:
 2960              	.LVL294:
 2961              	.LVL295:
 2962              	.LVL296:
 2963 0ebe 0CBC     		pop	{r2, r3}
 2964 0ec0 9046     		mov	r8, r2
 2965 0ec2 9A46     		mov	sl, r3
 2966 0ec4 F0BC     		pop	{r4, r5, r6, r7}
 2967 0ec6 01BC     		pop	{r0}
 2968 0ec8 0047     		bx	r0
 2969              	.LVL297:
 2970              	.L192:
 2971              		.loc 1 1414 0
 2972 0eca 381C     		mov	r0, r7
 2973 0ecc 3521     		mov	r1, #53
 2974 0ece FFF713F9 		bl	dhcp_get_option_ptr
 2975              		.loc 1 1415 0
 2976 0ed2 0028     		cmp	r0, #0
 2977 0ed4 00D0     		beq	.LCB2735
 2978 0ed6 0FE7     		b	.L216	@long jump
 2979              	.LCB2735:
 2980              	.LVL298:
 2981 0ed8 EBE7     		b	.L186
 2982              	.L218:
 2983 0eda C046     		.align	2
 2984              	.L217:
 2985 0edc 00000000 		.word	ip_addr_any
 2986              	.LFE316:
 2988              		.data
 2989              		.align	2
 2992              	xid.5836:
 2993 0000 0000CDAB 		.word	-1412628480
 3494              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 dhcp.c
     /tmp/ccrgbmwv.s:1      .text:00000000 $t
     /tmp/ccrgbmwv.s:15     .text:00000000 dhcp_set_state
     /tmp/ccrgbmwv.s:43     .text:00000014 dhcp_option
     /tmp/ccrgbmwv.s:76     .text:00000038 dhcp_option_byte
     /tmp/ccrgbmwv.s:97     .text:00000048 dhcp_option_short
     /tmp/ccrgbmwv.s:136    .text:00000074 dhcp_option_long
     /tmp/ccrgbmwv.s:188    .text:000000bc dhcp_option_trailer
     /tmp/ccrgbmwv.s:238    .text:000000f8 dhcp_get_option_ptr
     /tmp/ccrgbmwv.s:425    .text:000001b8 dhcp_get_option_byte
     /tmp/ccrgbmwv.s:441    .text:000001bc dhcp_get_option_long
     /tmp/ccrgbmwv.s:476    .text:000001d8 dhcp_stop
     /tmp/ccrgbmwv.s:530    .text:00000210 dhcp_free_reply
     /tmp/ccrgbmwv.s:572    .text:00000238 dhcp_create_request
     /tmp/ccrgbmwv.s:765    .text:00000344 $d
     /tmp/ccrgbmwv.s:2992   .data:00000000 xid.5836
     /tmp/ccrgbmwv.s:770    .text:0000034c $t
     /tmp/ccrgbmwv.s:773    .text:0000034c dhcp_delete_request
     /tmp/ccrgbmwv.s:817    .text:00000370 dhcp_release
     /tmp/ccrgbmwv.s:949    .text:00000438 $d
     /tmp/ccrgbmwv.s:959    .text:00000444 dhcp_renew
     /tmp/ccrgbmwv.s:956    .text:00000444 $t
     /tmp/ccrgbmwv.s:1069   .text:000004e8 $d
     /tmp/ccrgbmwv.s:1074   .text:000004f0 $t
     /tmp/ccrgbmwv.s:1077   .text:000004f0 dhcp_discover
     /tmp/ccrgbmwv.s:1209   .text:000005c0 $d
     /tmp/ccrgbmwv.s:1216   .text:000005d0 $t
     /tmp/ccrgbmwv.s:1219   .text:000005d0 dhcp_rebind
     /tmp/ccrgbmwv.s:1328   .text:00000674 $d
     /tmp/ccrgbmwv.s:1338   .text:00000680 dhcp_coarse_tmr
     /tmp/ccrgbmwv.s:1335   .text:00000680 $t
     /tmp/ccrgbmwv.s:1420   .text:000006e0 $d
     /tmp/ccrgbmwv.s:1424   .text:000006e4 $t
     /tmp/ccrgbmwv.s:1427   .text:000006e4 dhcp_reboot
     /tmp/ccrgbmwv.s:1548   .text:000007a0 $d
     /tmp/ccrgbmwv.s:1558   .text:000007ac dhcp_network_changed
     /tmp/ccrgbmwv.s:1555   .text:000007ac $t
     /tmp/ccrgbmwv.s:1629   .text:00000800 dhcp_select
     /tmp/ccrgbmwv.s:1779   .text:000008f8 $d
     /tmp/ccrgbmwv.s:1789   .text:00000904 dhcp_fine_tmr
     /tmp/ccrgbmwv.s:1786   .text:00000904 $t
     /tmp/ccrgbmwv.s:1937   .text:000009ac $d
     /tmp/ccrgbmwv.s:1945   .text:000009b0 dhcp_inform
     /tmp/ccrgbmwv.s:1942   .text:000009b0 $t
     /tmp/ccrgbmwv.s:2057   .text:00000a54 $d
     /tmp/ccrgbmwv.s:2066   .text:00000a5c dhcp_start
     /tmp/ccrgbmwv.s:2063   .text:00000a5c $t
     /tmp/ccrgbmwv.s:2201   .text:00000b0c $d
     /tmp/ccrgbmwv.s:2417   .text:00000c24 dhcp_recv
     /tmp/ccrgbmwv.s:2208   .text:00000b18 $t
     /tmp/ccrgbmwv.s:2211   .text:00000b18 dhcp_bind
     /tmp/ccrgbmwv.s:2408   .text:00000c18 $d
     /tmp/ccrgbmwv.s:2414   .text:00000c24 $t
     /tmp/ccrgbmwv.s:2985   .text:00000edc $d
     /tmp/ccrgbmwv.s:2993   .data:00000000 $d

UNDEFINED SYMBOLS
udp_remove
mem_free
pbuf_alloc
htonl
pbuf_free
__divsi3
pbuf_realloc
udp_sendto_if
netif_set_down
netif_set_ipaddr
netif_set_gw
netif_set_netmask
ip_addr_any
ip_addr_broadcast
netif_list
ntohl
mem_malloc
memset
udp_new
udp_bind
udp_connect
udp_recv
__udivsi3
netif_set_up
pbuf_copy_partial
