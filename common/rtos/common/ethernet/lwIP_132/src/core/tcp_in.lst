   1              		.code	16
   2              		.file	"tcp_in.c"
  10              	.Ltext0:
  11              		.align	2
  12              		.code	16
  13              		.thumb_func
  15              	tcp_parseopt:
  16              	.LFB296:
  17              		.file 1 "rtos/common/ethernet/lwIP_132/src/core/tcp_in.c"
   1:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /**
   2:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @file
   3:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Transmission Control Protocol, incoming traffic
   4:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
   5:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * The input processing functions of the TCP layer.
   6:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
   7:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * These functions are generally called in the order (ip_input() ->)
   8:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * tcp_input() -> * tcp_process() -> tcp_receive() (-> application).
   9:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * 
  10:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  */
  11:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  12:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /*
  13:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  14:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * All rights reserved.
  15:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
  16:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Redistribution and use in source and binary forms, with or without modification,
  17:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * are permitted provided that the following conditions are met:
  18:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
  19:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  20:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *    this list of conditions and the following disclaimer.
  21:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *    this list of conditions and the following disclaimer in the documentation
  23:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *    and/or other materials provided with the distribution.
  24:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * 3. The name of the author may not be used to endorse or promote products
  25:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *    derived from this software without specific prior written permission.
  26:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
  27:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  28:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  29:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  30:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  31:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  32:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  33:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  34:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  35:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  36:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * OF SUCH DAMAGE.
  37:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
  38:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * This file is part of the lwIP TCP/IP stack.
  39:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
  40:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Author: Adam Dunkels <adam@sics.se>
  41:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
  42:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  */
  43:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  44:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/opt.h"
  45:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  46:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if LWIP_TCP /* don't build if not configured for use in lwipopts.h */
  47:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  48:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/tcp.h"
  49:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/def.h"
  50:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/ip_addr.h"
  51:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/netif.h"
  52:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/mem.h"
  53:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/memp.h"
  54:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/inet.h"
  55:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/inet_chksum.h"
  56:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/stats.h"
  57:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "lwip/snmp.h"
  58:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #include "arch/perf.h"
  59:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  60:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /* These variables are global to all functions involved in the input
  61:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****    processing of TCP segments. They are set by the tcp_input()
  62:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****    function. */
  63:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static struct tcp_seg inseg;
  64:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static struct tcp_hdr *tcphdr;
  65:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static struct ip_hdr *iphdr;
  66:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static u32_t seqno, ackno;
  67:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static u8_t flags;
  68:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static u16_t tcplen;
  69:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  70:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static u8_t recv_flags;
  71:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static struct pbuf *recv_data;
  72:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  73:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** struct tcp_pcb *tcp_input_pcb;
  74:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  75:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /* Forward declarations. */
  76:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static err_t tcp_process(struct tcp_pcb *pcb);
  77:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static void tcp_receive(struct tcp_pcb *pcb);
  78:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static void tcp_parseopt(struct tcp_pcb *pcb);
  79:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  80:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static err_t tcp_listen_input(struct tcp_pcb_listen *pcb);
  81:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static err_t tcp_timewait_input(struct tcp_pcb *pcb);
  82:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
  83:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /**
  84:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * The initial input processing of TCP. It verifies the TCP header, demultiplexes
  85:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * the segment between the PCBs and passes it on to tcp_process(), which implements
  86:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * the TCP finite state machine. This function is called by the IP layer (in
  87:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * ip_input()).
  88:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
  89:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @param p received TCP segment to process (p->payload pointing to the IP header)
  90:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @param inp network interface on which this segment was received
  91:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  */
  92:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** void
  93:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** tcp_input(struct pbuf *p, struct netif *inp)
  94:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** {
  95:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   struct tcp_pcb *pcb, *prev;
  96:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   struct tcp_pcb_listen *lpcb;
  97:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   u8_t hdrlen;
  98:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   err_t err;
  99:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 100:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   PERF_START;
 101:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 102:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   TCP_STATS_INC(tcp.recv);
 103:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   snmp_inc_tcpinsegs();
 104:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 105:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   iphdr = p->payload;
 106:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 107:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 108:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_INPUT_DEBUG
 109:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   tcp_debug_print(tcphdr);
 110:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif
 111:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 112:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* remove header from payload */
 113:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 114:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* drop short packets */
 115:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_le
 116:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.lenerr);
 117:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.drop);
 118:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     snmp_inc_tcpinerrs();
 119:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     pbuf_free(p);
 120:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     return;
 121:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 122:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 123:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Don't even process incoming broadcasts/multicasts. */
 124:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (ip_addr_isbroadcast(&(iphdr->dest), inp) ||
 125:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       ip_addr_ismulticast(&(iphdr->dest))) {
 126:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.proterr);
 127:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.drop);
 128:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     snmp_inc_tcpinerrs();
 129:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     pbuf_free(p);
 130:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     return;
 131:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 132:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 133:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if CHECKSUM_CHECK_TCP
 134:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Verify TCP checksum. */
 135:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (inet_chksum_pseudo(p, (struct ip_addr *)&(iphdr->src),
 136:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       (struct ip_addr *)&(iphdr->dest),
 137:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       IP_PROTO_TCP, p->tot_len) != 0) {
 138:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_
 139:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         inet_chksum_pseudo(p, (struct ip_addr *)&(iphdr->src), (struct ip_addr *)&(iphdr->dest),
 140:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       IP_PROTO_TCP, p->tot_len)));
 141:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_DEBUG
 142:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_debug_print(tcphdr);
 143:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_DEBUG */
 144:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.chkerr);
 145:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.drop);
 146:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     snmp_inc_tcpinerrs();
 147:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     pbuf_free(p);
 148:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     return;
 149:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 150:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif
 151:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 152:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Move the payload pointer in the pbuf so that it points to the
 153:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      TCP data instead of the TCP header. */
 154:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   hdrlen = TCPH_HDRLEN(tcphdr);
 155:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if(pbuf_header(p, -(hdrlen * 4))){
 156:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* drop short packets */
 157:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
 158:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.lenerr);
 159:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.drop);
 160:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     snmp_inc_tcpinerrs();
 161:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     pbuf_free(p);
 162:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     return;
 163:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 164:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 165:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Convert fields in TCP header to host byte order. */
 166:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   tcphdr->src = ntohs(tcphdr->src);
 167:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   tcphdr->dest = ntohs(tcphdr->dest);
 168:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 169:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 170:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   tcphdr->wnd = ntohs(tcphdr->wnd);
 171:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 172:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   flags = TCPH_FLAGS(tcphdr);
 173:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 174:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 175:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Demultiplex an incoming segment. First, we check if it is destined
 176:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      for an active connection. */
 177:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   prev = NULL;
 178:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 179:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   
 180:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 181:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 182:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 183:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 184:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (pcb->remote_port == tcphdr->src &&
 185:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        pcb->local_port == tcphdr->dest &&
 186:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        ip_addr_cmp(&(pcb->remote_ip), &(iphdr->src)) &&
 187:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        ip_addr_cmp(&(pcb->local_ip), &(iphdr->dest))) {
 188:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 189:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Move this PCB to the front of the list so that subsequent
 190:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          lookups will be faster (we exploit locality in TCP segment
 191:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          arrivals). */
 192:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 193:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (prev != NULL) {
 194:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         prev->next = pcb->next;
 195:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->next = tcp_active_pcbs;
 196:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_active_pcbs = pcb;
 197:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 198:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 199:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       break;
 200:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 201:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     prev = pcb;
 202:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 203:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 204:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (pcb == NULL) {
 205:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* If it did not go to an active connection, we check the connections
 206:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        in the TIME-WAIT state. */
 207:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 208:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 209:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (pcb->remote_port == tcphdr->src &&
 210:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          pcb->local_port == tcphdr->dest &&
 211:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          ip_addr_cmp(&(pcb->remote_ip), &(iphdr->src)) &&
 212:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          ip_addr_cmp(&(pcb->local_ip), &(iphdr->dest))) {
 213:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* We don't really care enough to move this PCB to the front
 214:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            of the list since we are not very likely to receive that
 215:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            many segments for connections in TIME-WAIT. */
 216:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
 217:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_timewait_input(pcb);
 218:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pbuf_free(p);
 219:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         return;
 220:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 221:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 222:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 223:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Finally, if we still did not get a match, we check all PCBs that
 224:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      are LISTENing for incoming connections. */
 225:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     prev = NULL;
 226:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 227:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if ((ip_addr_isany(&(lpcb->local_ip)) ||
 228:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         ip_addr_cmp(&(lpcb->local_ip), &(iphdr->dest))) &&
 229:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         lpcb->local_port == tcphdr->dest) {
 230:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Move this PCB to the front of the list so that subsequent
 231:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            lookups will be faster (we exploit locality in TCP segment
 232:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            arrivals). */
 233:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (prev != NULL) {
 234:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 235:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 /* our successor is the remainder of the listening list */
 236:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           lpcb->next = tcp_listen_pcbs.listen_pcbs;
 237:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 /* put this listening pcb at the head of the listening list */
 238:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           tcp_listen_pcbs.listen_pcbs = lpcb;
 239:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 240:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       
 241:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
 242:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_listen_input(lpcb);
 243:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pbuf_free(p);
 244:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         return;
 245:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 246:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       prev = (struct tcp_pcb *)lpcb;
 247:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 248:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 249:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 250:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_INPUT_DEBUG
 251:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
 252:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 253:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
 254:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_INPUT_DEBUG */
 255:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 256:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 257:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (pcb != NULL) {
 258:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* The incoming segment belongs to a connection. */
 259:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_INPUT_DEBUG
 260:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_DEBUG
 261:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_debug_print_state(pcb->state);
 262:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_DEBUG */
 263:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_INPUT_DEBUG */
 264:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 265:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Set up a tcp_seg structure. */
 266:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     inseg.next = NULL;
 267:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     inseg.len = p->tot_len;
 268:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     inseg.dataptr = p->payload;
 269:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     inseg.p = p;
 270:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     inseg.tcphdr = tcphdr;
 271:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 272:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     recv_data = NULL;
 273:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     recv_flags = 0;
 274:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 275:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* If there is data which was previously "refused" by upper layer */
 276:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (pcb->refused_data != NULL) {
 277:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Notify again application with data previously received. */
 278:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
 279:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
 280:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (err == ERR_OK) {
 281:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->refused_data = NULL;
 282:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       } else {
 283:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* drop incoming packets, because pcb is "full" */
 284:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"
 285:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         TCP_STATS_INC(tcp.drop);
 286:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         snmp_inc_tcpinerrs();
 287:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pbuf_free(p);
 288:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         return;
 289:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 290:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 291:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_input_pcb = pcb;
 292:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     err = tcp_process(pcb);
 293:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* A return value of ERR_ABRT means that tcp_abort() was called
 294:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        and that the pcb has been freed. If so, we don't do anything. */
 295:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (err != ERR_ABRT) {
 296:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (recv_flags & TF_RESET) {
 297:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* TF_RESET means that the connection was reset by the other
 298:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            end. We then call the error callback to inform the
 299:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            application that the connection is dead before we
 300:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            deallocate the PCB. */
 301:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 302:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_pcb_remove(&tcp_active_pcbs, pcb);
 303:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         memp_free(MEMP_TCP_PCB, pcb);
 304:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       } else if (recv_flags & TF_CLOSED) {
 305:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* The connection has been closed and we will deallocate the
 306:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            PCB. */
 307:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_pcb_remove(&tcp_active_pcbs, pcb);
 308:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         memp_free(MEMP_TCP_PCB, pcb);
 309:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       } else {
 310:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         err = ERR_OK;
 311:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* If the application has registered a "sent" function to be
 312:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            called when new send buffer space is available, we call it
 313:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            now. */
 314:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (pcb->acked > 0) {
 315:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           TCP_EVENT_SENT(pcb, pcb->acked, err);
 316:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 317:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       
 318:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (recv_data != NULL) {
 319:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if(flags & TCP_PSH) {
 320:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             recv_data->flags |= PBUF_FLAG_PUSH;
 321:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
 322:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 323:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* Notify application that data has been received. */
 324:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 325:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 326:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* If the upper layer can't receive this data, store it */
 327:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if (err != ERR_OK) {
 328:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             pcb->refused_data = recv_data;
 329:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: keep incoming packet, because pcb is \"full\"
 330:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
 331:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 332:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 333:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* If a FIN segment was received, we call the callback
 334:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            function with a NULL buffer to indicate EOF. */
 335:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (recv_flags & TF_GOT_FIN) {
 336:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           TCP_EVENT_RECV(pcb, NULL, ERR_OK, err);
 337:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 338:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 339:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_input_pcb = NULL;
 340:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Try to send something out. */
 341:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_output(pcb);
 342:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_INPUT_DEBUG
 343:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_DEBUG
 344:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_debug_print_state(pcb->state);
 345:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_DEBUG */
 346:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_INPUT_DEBUG */
 347:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 348:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 349:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_input_pcb = NULL;
 350:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 351:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 352:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* give up our reference to inseg.p */
 353:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (inseg.p != NULL)
 354:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     {
 355:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pbuf_free(inseg.p);
 356:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       inseg.p = NULL;
 357:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 358:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   } else {
 359:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 360:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* If no matching PCB was found, send a TCP RST (reset) to the
 361:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        sender. */
 362:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
 363:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 364:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_STATS_INC(tcp.proterr);
 365:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_STATS_INC(tcp.drop);
 366:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_rst(ackno, seqno + tcplen,
 367:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         &(iphdr->dest), &(iphdr->src),
 368:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 369:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 370:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     pbuf_free(p);
 371:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 372:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 373:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 374:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   PERF_STOP("tcp_input");
 375:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** }
 376:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 377:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /**
 378:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Called by tcp_input() when a segment arrives for a listening
 379:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * connection (from tcp_input()).
 380:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
 381:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @param pcb the tcp_pcb_listen for which a segment arrived
 382:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @return ERR_OK if the segment was processed
 383:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *         another err_t on error
 384:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
 385:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @note the return value is not (yet?) used in tcp_input()
 386:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @note the segment which arrived is saved in global variables, therefore only the pcb
 387:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *       involved is passed as a parameter to this function
 388:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  */
 389:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static err_t
 390:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** tcp_listen_input(struct tcp_pcb_listen *pcb)
 391:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** {
 392:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   struct tcp_pcb *npcb;
 393:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   err_t rc;
 394:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 395:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* In the LISTEN state, we check for incoming SYN segments,
 396:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      creates a new PCB, and responds with a SYN|ACK. */
 397:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (flags & TCP_ACK) {
 398:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* For incoming segments with the ACK flag set, respond with a
 399:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        RST. */
 400:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
 401:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_rst(ackno + 1, seqno + tcplen,
 402:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       &(iphdr->dest), &(iphdr->src),
 403:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcphdr->dest, tcphdr->src);
 404:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   } else if (flags & TCP_SYN) {
 405:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->
 406:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_LISTEN_BACKLOG
 407:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (pcb->accepts_pending >= pcb->backlog) {
 408:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcph
 409:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       return ERR_ABRT;
 410:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 411:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_LISTEN_BACKLOG */
 412:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb = tcp_alloc(pcb->prio);
 413:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* If a new PCB could not be created (probably due to lack of memory),
 414:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        we don't do anything, but rely on the sender will retransmit the
 415:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        SYN at a time when we have more memory available. */
 416:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (npcb == NULL) {
 417:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
 418:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_STATS_INC(tcp.memerr);
 419:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       return ERR_MEM;
 420:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 421:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_LISTEN_BACKLOG
 422:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     pcb->accepts_pending++;
 423:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_LISTEN_BACKLOG */
 424:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Set up the new PCB. */
 425:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     ip_addr_set(&(npcb->local_ip), &(iphdr->dest));
 426:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->local_port = pcb->local_port;
 427:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     ip_addr_set(&(npcb->remote_ip), &(iphdr->src));
 428:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->remote_port = tcphdr->src;
 429:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->state = SYN_RCVD;
 430:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->rcv_nxt = seqno + 1;
 431:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 432:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->snd_wnd = tcphdr->wnd;
 433:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->ssthresh = npcb->snd_wnd;
 434:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 435:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->callback_arg = pcb->callback_arg;
 436:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if LWIP_CALLBACK_API
 437:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->accept = pcb->accept;
 438:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* LWIP_CALLBACK_API */
 439:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* inherit socket options */
 440:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->so_options = pcb->so_options & (SOF_DEBUG|SOF_DONTROUTE|SOF_KEEPALIVE|SOF_OOBINLINE|SOF_L
 441:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Register the new PCB so that we can begin receiving segments
 442:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        for it. */
 443:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     TCP_REG(&tcp_active_pcbs, npcb);
 444:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 445:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Parse any options in the SYN. */
 446:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_parseopt(npcb);
 447:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_CALCULATE_EFF_SEND_MSS
 448:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
 449:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_CALCULATE_EFF_SEND_MSS */
 450:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 451:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     snmp_inc_tcppassiveopens();
 452:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 453:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Send a SYN|ACK together with the MSS option. */
 454:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     rc = tcp_enqueue(npcb, NULL, 0, TCP_SYN | TCP_ACK, 0, TF_SEG_OPTS_MSS
 455:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if LWIP_TCP_TIMESTAMPS
 456:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* and maybe include the TIMESTAMP option */
 457:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      | (npcb->flags & TF_TIMESTAMP ? TF_SEG_OPTS_TS : 0)
 458:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif
 459:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       );
 460:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (rc != ERR_OK) {
 461:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_abandon(npcb, 0);
 462:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       return rc;
 463:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 464:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     return tcp_output(npcb);
 465:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 466:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   return ERR_OK;
 467:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** }
 468:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 469:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /**
 470:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Called by tcp_input() when a segment arrives for a connection in
 471:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * TIME_WAIT.
 472:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
 473:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @param pcb the tcp_pcb for which a segment arrived
 474:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
 475:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @note the segment which arrived is saved in global variables, therefore only the pcb
 476:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *       involved is passed as a parameter to this function
 477:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  */
 478:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static err_t
 479:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** tcp_timewait_input(struct tcp_pcb *pcb)
 480:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** {
 481:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
 482:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* RFC 793 3.9 Event Processing - Segment Arrives:
 483:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****    * - first check sequence number - we skip that one in TIME_WAIT (always
 484:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****    *   acceptable since we only send ACKs)
 485:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****    * - second check the RST bit (... return) */
 486:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (flags & TCP_RST)  {
 487:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     return ERR_OK;
 488:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 489:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* - fourth, check the SYN bit, */
 490:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (flags & TCP_SYN) {
 491:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* If an incoming segment is not acceptable, an acknowledgment
 492:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        should be sent in reply */
 493:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
 494:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* If the SYN is in the window it is an error, send a reset */
 495:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_rst(ackno, seqno + tcplen, &(iphdr->dest), &(iphdr->src),
 496:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 497:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       return ERR_OK;
 498:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 499:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   } else if (flags & TCP_FIN) {
 500:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
 501:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          Restart the 2 MSL time-wait timeout.*/
 502:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     pcb->tmr = tcp_ticks;
 503:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 504:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 505:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if ((tcplen > 0))  {
 506:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Acknowledge data, FIN or out-of-window SYN */
 507:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     pcb->flags |= TF_ACK_NOW;
 508:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     return tcp_output(pcb);
 509:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 510:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   return ERR_OK;
 511:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** }
 512:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 513:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /**
 514:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Implements the TCP state machine. Called by tcp_input. In some
 515:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * states tcp_receive() is called to receive data. The tcp_seg
 516:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * argument will be freed by the caller (tcp_input()) unless the
 517:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * recv_data pointer in the pcb is set.
 518:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
 519:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @param pcb the tcp_pcb for which a segment arrived
 520:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
 521:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @note the segment which arrived is saved in global variables, therefore only the pcb
 522:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *       involved is passed as a parameter to this function
 523:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  */
 524:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static err_t
 525:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** tcp_process(struct tcp_pcb *pcb)
 526:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** {
 527:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   struct tcp_seg *rseg;
 528:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   u8_t acceptable = 0;
 529:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   err_t err;
 530:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 531:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   err = ERR_OK;
 532:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 533:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Process incoming RST segments. */
 534:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (flags & TCP_RST) {
 535:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* First, determine if the reset is acceptable. */
 536:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (pcb->state == SYN_SENT) {
 537:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (ackno == pcb->snd_nxt) {
 538:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         acceptable = 1;
 539:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 540:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     } else {
 541:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 542:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                           pcb->rcv_nxt+pcb->rcv_wnd)) {
 543:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         acceptable = 1;
 544:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 545:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 546:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 547:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (acceptable) {
 548:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
 549:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 550:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       recv_flags |= TF_RESET;
 551:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->flags &= ~TF_ACK_DELAY;
 552:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       return ERR_RST;
 553:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     } else {
 554:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F
 555:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        seqno, pcb->rcv_nxt));
 556:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 557:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        seqno, pcb->rcv_nxt));
 558:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       return ERR_OK;
 559:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 560:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 561:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 562:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
 563:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Cope with new connection attempt after remote end crashed */
 564:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_ack_now(pcb);
 565:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     return ERR_OK;
 566:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 567:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   
 568:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Update the PCB (in)activity timer. */
 569:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   pcb->tmr = tcp_ticks;
 570:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   pcb->keep_cnt_sent = 0;
 571:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 572:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   tcp_parseopt(pcb);
 573:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 574:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Do different things depending on the TCP state. */
 575:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   switch (pcb->state) {
 576:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   case SYN_SENT:
 577:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\
 578:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
 579:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* received SYN ACK with expected sequence number? */
 580:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if ((flags & TCP_ACK) && (flags & TCP_SYN)
 581:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 582:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->snd_buf++;
 583:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->rcv_nxt = seqno + 1;
 584:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 585:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->lastack = ackno;
 586:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->snd_wnd = tcphdr->wnd;
 587:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 588:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->state = ESTABLISHED;
 589:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 590:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_CALCULATE_EFF_SEND_MSS
 591:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 592:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_CALCULATE_EFF_SEND_MSS */
 593:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 594:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
 595:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        * but for the default value of pcb->mss) */
 596:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->ssthresh = pcb->mss * 10;
 597:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 598:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 599:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 600:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       --pcb->snd_queuelen;
 601:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_q
 602:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       rseg = pcb->unacked;
 603:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->unacked = rseg->next;
 604:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 605:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* If there's nothing left to acknowledge, stop the retransmit
 606:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          timer, otherwise reset it to start again */
 607:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if(pcb->unacked == NULL)
 608:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->rtime = -1;
 609:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       else {
 610:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->rtime = 0;
 611:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->nrtx = 0;
 612:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 613:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 614:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_seg_free(rseg);
 615:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 616:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Call the user specified function to call when sucessfully
 617:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        * connected. */
 618:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 619:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_ack_now(pcb);
 620:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 621:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* received ACK? possibly a half-open connection */
 622:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     else if (flags & TCP_ACK) {
 623:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* send a RST to bring the other side in a non-synchronized state. */
 624:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_rst(ackno, seqno + tcplen, &(iphdr->dest), &(iphdr->src),
 625:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 626:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 627:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     break;
 628:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   case SYN_RCVD:
 629:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (flags & TCP_ACK) {
 630:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* expected ACK number? */
 631:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 632:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         u16_t old_cwnd;
 633:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->state = ESTABLISHED;
 634:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr-
 635:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if LWIP_CALLBACK_API
 636:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
 637:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif
 638:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Call the accept function. */
 639:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 640:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (err != ERR_OK) {
 641:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* If the accept function returns with an error, we abort
 642:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            * the connection. */
 643:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           tcp_abort(pcb);
 644:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           return ERR_ABRT;
 645:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 646:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         old_cwnd = pcb->cwnd;
 647:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* If there was any data contained within this ACK,
 648:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          * we'd better pass it on to the application as well. */
 649:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_receive(pcb);
 650:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 651:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Prevent ACK for SYN to generate a sent event */
 652:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (pcb->acked != 0) {
 653:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->acked--;
 654:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 655:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 656:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 657:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 658:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (recv_flags & TF_GOT_FIN) {
 659:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           tcp_ack_now(pcb);
 660:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->state = CLOSE_WAIT;
 661:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 662:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 663:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* incorrect ACK number */
 664:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       else {
 665:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* send RST */
 666:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_rst(ackno, seqno + tcplen, &(iphdr->dest), &(iphdr->src),
 667:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 tcphdr->dest, tcphdr->src);
 668:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 669:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 670:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Looks like another copy of the SYN - retransmit our SYN-ACK */
 671:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_rexmit(pcb);
 672:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 673:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     break;
 674:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   case CLOSE_WAIT:
 675:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* FALLTHROUGH */
 676:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   case ESTABLISHED:
 677:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_receive(pcb);
 678:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (recv_flags & TF_GOT_FIN) { /* passive close */
 679:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_ack_now(pcb);
 680:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->state = CLOSE_WAIT;
 681:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 682:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     break;
 683:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   case FIN_WAIT_1:
 684:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_receive(pcb);
 685:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (recv_flags & TF_GOT_FIN) {
 686:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 687:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_DEBUG,
 688:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tc
 689:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_ack_now(pcb);
 690:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_pcb_purge(pcb);
 691:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         TCP_RMV(&tcp_active_pcbs, pcb);
 692:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->state = TIME_WAIT;
 693:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         TCP_REG(&tcp_tw_pcbs, pcb);
 694:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       } else {
 695:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_ack_now(pcb);
 696:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->state = CLOSING;
 697:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 698:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 699:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->state = FIN_WAIT_2;
 700:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 701:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     break;
 702:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   case FIN_WAIT_2:
 703:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_receive(pcb);
 704:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (recv_flags & TF_GOT_FIN) {
 705:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tc
 706:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_ack_now(pcb);
 707:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_pcb_purge(pcb);
 708:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_RMV(&tcp_active_pcbs, pcb);
 709:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->state = TIME_WAIT;
 710:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_REG(&tcp_tw_pcbs, pcb);
 711:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 712:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     break;
 713:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   case CLOSING:
 714:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_receive(pcb);
 715:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 716:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphd
 717:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_pcb_purge(pcb);
 718:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_RMV(&tcp_active_pcbs, pcb);
 719:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->state = TIME_WAIT;
 720:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_REG(&tcp_tw_pcbs, pcb);
 721:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 722:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     break;
 723:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   case LAST_ACK:
 724:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_receive(pcb);
 725:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 726:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcph
 727:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
 728:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       recv_flags |= TF_CLOSED;
 729:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 730:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     break;
 731:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   default:
 732:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     break;
 733:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 734:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   return ERR_OK;
 735:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** }
 736:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 737:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
 738:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /**
 739:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Insert segment into the list (segments covered with new one will be deleted)
 740:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
 741:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Called from tcp_receive()
 742:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  */
 743:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static void
 744:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
 745:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** {
 746:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   struct tcp_seg *old_seg;
 747:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 748:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 749:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* received segment overlaps all following segments */
 750:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     tcp_segs_free(next);
 751:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     next = NULL;
 752:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 753:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   else {
 754:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* delete some following segments
 755:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        oos queue may have segments with FIN flag */
 756:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     while (next &&
 757:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            TCP_SEQ_GEQ((seqno + cseg->len),
 758:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                       (next->tcphdr->seqno + next->len))) {
 759:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* cseg with FIN already processed */
 760:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 761:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         TCPH_FLAGS_SET(cseg->tcphdr, TCPH_FLAGS(cseg->tcphdr) | TCP_FIN);
 762:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 763:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       old_seg = next;
 764:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       next = next->next;
 765:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_seg_free(old_seg);
 766:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 767:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (next &&
 768:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 769:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* We need to trim the incoming segment. */
 770:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 771:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pbuf_realloc(cseg->p, cseg->len);
 772:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 773:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
 774:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   cseg->next = next;
 775:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** }
 776:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif
 777:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 778:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /**
 779:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Called by tcp_process. Checks if the given segment is an ACK for outstanding
 780:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * data, and if so frees the memory of the buffered data. Next, is places the
 781:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * segment on any of the receive queues (pcb->recved or pcb->ooseq). If the segment
 782:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * is buffered, the pbuf is referenced by pbuf_ref so that it will not be freed until
 783:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * i it has been removed from the buffer.
 784:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
 785:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * If the incoming segment constitutes an ACK for a segment that was used for RTT
 786:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * estimation, the RTT is estimated here as well.
 787:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
 788:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Called from tcp_process().
 789:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  */
 790:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static void
 791:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** tcp_receive(struct tcp_pcb *pcb)
 792:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** {
 793:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   struct tcp_seg *next;
 794:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
 795:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   struct tcp_seg *prev, *cseg;
 796:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif
 797:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   struct pbuf *p;
 798:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   s32_t off;
 799:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   s16_t m;
 800:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   u32_t right_wnd_edge;
 801:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   u16_t new_tot_len;
 802:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   int found_dupack = 0;
 803:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 804:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (flags & TCP_ACK) {
 805:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 806:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 807:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Update window. */
 808:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 809:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 810:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 811:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->snd_wnd = tcphdr->wnd;
 812:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->snd_wl1 = seqno;
 813:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->snd_wl2 = ackno;
 814:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (pcb->snd_wnd > 0 && pcb->persist_backoff > 0) {
 815:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->persist_backoff = 0;
 816:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 817:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_WND_DEBUG, ("tcp_receive: window update %"U16_F"\n", pcb->snd_wnd));
 818:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_WND_DEBUG
 819:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     } else {
 820:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (pcb->snd_wnd != tcphdr->wnd) {
 821:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_WND_DEBUG, 
 822:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     ("tcp_receive: no window update lastack %"U32_F" ackno %"
 823:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                      U32_F" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",
 824:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                      pcb->lastack, ackno, pcb->snd_wl1, seqno, pcb->snd_wl2));
 825:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 826:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_WND_DEBUG */
 827:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 828:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 829:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* (From Stevens TCP/IP Illustrated Vol II, p970.) Its only a
 830:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * duplicate ack if:
 831:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * 1) It doesn't ACK new data 
 832:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * 2) length of received packet is zero (i.e. no payload) 
 833:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * 3) the advertised window hasn't changed 
 834:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * 4) There is outstanding unacknowledged data (retransmission timer running)
 835:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * 5) The ACK is == biggest ACK sequence number so far seen (snd_una)
 836:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * 
 837:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * If it passes all five, should process as a dupack: 
 838:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * a) dupacks < 3: do nothing 
 839:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * b) dupacks == 3: fast retransmit 
 840:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * c) dupacks > 3: increase cwnd 
 841:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * 
 842:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * If it only passes 1-3, should reset dupack counter (and add to
 843:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * stats, which we don't do in lwIP)
 844:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      *
 845:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      * If it only passes 1, should reset dupack counter
 846:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      *
 847:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      */
 848:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 849:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Clause 1 */
 850:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 851:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->acked = 0;
 852:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Clause 2 */
 853:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (tcplen == 0) {
 854:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Clause 3 */
 855:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 856:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* Clause 4 */
 857:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if (pcb->rtime >= 0) {
 858:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             /* Clause 5 */
 859:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             if (pcb->lastack == ackno) {
 860:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               found_dupack = 1;
 861:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               if (pcb->dupacks + 1 > pcb->dupacks)
 862:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 ++pcb->dupacks;
 863:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               if (pcb->dupacks > 3) {
 864:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 /* Inflate the congestion window, but not if it means that
 865:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                    the value overflows. */
 866:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 867:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   pcb->cwnd += pcb->mss;
 868:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 }
 869:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               } else if (pcb->dupacks == 3) {
 870:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 /* Do fast retransmit */
 871:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 tcp_rexmit_fast(pcb);
 872:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               }
 873:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             }
 874:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
 875:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 876:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 877:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* If Clause (1) or more is true, but not a duplicate ack, reset
 878:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        * count of consecutive duplicate acks */
 879:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (!found_dupack) {
 880:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->dupacks = 0;
 881:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 882:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
 883:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* We come here when the ACK acknowledges new data. */
 884:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 885:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Reset the "IN Fast Retransmit" flag, since we are no longer
 886:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          in fast retransmit. Also reset the congestion window to the
 887:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          slow start threshold. */
 888:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (pcb->flags & TF_INFR) {
 889:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->flags &= ~TF_INFR;
 890:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->cwnd = pcb->ssthresh;
 891:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 892:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 893:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Reset the number of retransmissions. */
 894:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->nrtx = 0;
 895:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 896:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Reset the retransmission time-out. */
 897:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->rto = (pcb->sa >> 3) + pcb->sv;
 898:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 899:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Update the send buffer space. Diff between the two can never exceed 64K? */
 900:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->acked = (u16_t)(ackno - pcb->lastack);
 901:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 902:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->snd_buf += pcb->acked;
 903:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 904:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Reset the fast retransmit variables. */
 905:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->dupacks = 0;
 906:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->lastack = ackno;
 907:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 908:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Update the congestion control variables (cwnd and
 909:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          ssthresh). */
 910:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (pcb->state >= ESTABLISHED) {
 911:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (pcb->cwnd < pcb->ssthresh) {
 912:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 913:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             pcb->cwnd += pcb->mss;
 914:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
 915:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
 916:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         } else {
 917:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 918:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if (new_cwnd > pcb->cwnd) {
 919:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             pcb->cwnd = new_cwnd;
 920:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
 921:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: congestion avoidance cwnd %"U16_F"\n", pcb->cw
 922:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 923:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 924:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: ACK for %"U32_F", unacked->seqno %"U32_F":%"U32_F
 925:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                     ackno,
 926:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                     pcb->unacked != NULL?
 927:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                     ntohl(pcb->unacked->tcphdr->seqno): 0,
 928:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                     pcb->unacked != NULL?
 929:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                     ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 
 930:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 931:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Remove segment from the unacknowledged list if the incoming
 932:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          ACK acknowlegdes them. */
 933:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       while (pcb->unacked != NULL &&
 934:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 935:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                          TCP_TCPLEN(pcb->unacked), ackno)) {
 936:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n"
 937:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                       ntohl(pcb->unacked->tcphdr->seqno),
 938:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                       ntohl(pcb->unacked->tcphdr->seqno) +
 939:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                       TCP_TCPLEN(pcb->unacked)));
 940:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 941:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         next = pcb->unacked;
 942:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->unacked = pcb->unacked->next;
 943:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 944:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuele
 945:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next
 946:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Prevent ACK for FIN to generate a sent event */
 947:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 948:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->acked--;
 949:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 950:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 951:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->snd_queuelen -= pbuf_clen(next->p);
 952:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_seg_free(next);
 953:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 954:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen
 955:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (pcb->snd_queuelen != 0) {
 956:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 957:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                       pcb->unsent != NULL);
 958:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
 959:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 960:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 961:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* If there's nothing left to acknowledge, stop the retransmit
 962:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          timer, otherwise reset it to start again */
 963:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if(pcb->unacked == NULL)
 964:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->rtime = -1;
 965:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       else
 966:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->rtime = 0;
 967:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 968:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->polltmr = 0;
 969:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     } else {
 970:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
 971:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->acked = 0;
 972:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
 973:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 974:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* We go through the ->unsent list to see if any of the segments
 975:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        on the list are acknowledged by the ACK. This may seem
 976:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        strange since an "unsent" segment shouldn't be acked. The
 977:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        rationale is that lwIP puts all outstanding segments on the
 978:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        ->unsent list after a retransmission, so these segments may
 979:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        in fact have been sent once. */
 980:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     while (pcb->unsent != NULL &&
 981:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 982:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                            TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
 983:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
 984:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                     ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->s
 985:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                     TCP_TCPLEN(pcb->unsent)));
 986:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
 987:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       next = pcb->unsent;
 988:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->unsent = pcb->unsent->next;
 989:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen)
 990:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->
 991:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Prevent ACK for FIN to generate a sent event */
 992:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 993:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->acked--;
 994:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
 995:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->snd_queuelen -= pbuf_clen(next->p);
 996:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_seg_free(next);
 997:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unsent)\n", (u16_t)pcb->snd_queuelen));
 998:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (pcb->snd_queuelen != 0) {
 999:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_ASSERT("tcp_receive: valid queue length",
1000:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->unacked != NULL || pcb->unsent != NULL);
1001:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
1002:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
1003:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* End of ACK for new data processing. */
1004:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1005:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: pcb->rttest %"U32_F" rtseq %"U32_F" ackno %"U32_F"\n"
1006:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                 pcb->rttest, pcb->rtseq, ackno));
1007:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1008:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* RTT estimation calculations. This is done by checking if the
1009:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        incoming segment acknowledges the segment we use to take a
1010:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        round-trip time measurement. */
1011:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
1012:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* diff between this shouldn't exceed 32K since this are tcp timer ticks
1013:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          and a round-trip shouldn't be that long... */
1014:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       m = (s16_t)(tcp_ticks - pcb->rttest);
1015:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1016:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
1017:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                   m, m * TCP_SLOW_INTERVAL));
1018:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1019:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* This is taken directly from VJs original code in his paper */
1020:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       m = m - (pcb->sa >> 3);
1021:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->sa += m;
1022:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (m < 0) {
1023:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         m = -m;
1024:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
1025:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       m = m - (pcb->sv >> 2);
1026:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->sv += m;
1027:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->rto = (pcb->sa >> 3) + pcb->sv;
1028:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1029:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
1030:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                   pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));
1031:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1032:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       pcb->rttest = 0;
1033:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
1034:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
1035:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1036:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* If the incoming segment contains data, we must process it
1037:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****      further. */
1038:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if (tcplen > 0) {
1039:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* This code basically does three things:
1040:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1041:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     +) If the incoming segment contains data that is the next
1042:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     in-sequence data, this data is passed to the application. This
1043:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     might involve trimming the first edge of the data. The rcv_nxt
1044:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     variable and the advertised window are adjusted.
1045:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1046:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     +) If the incoming segment has data that is above the next
1047:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     sequence number expected (->rcv_nxt), the segment is placed on
1048:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     the ->ooseq queue. This is done by finding the appropriate
1049:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     place in the ->ooseq queue (which is ordered by sequence
1050:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     number) and trim the segment in both ends if needed. An
1051:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     immediate ACK is sent to indicate that we received an
1052:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     out-of-sequence segment.
1053:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1054:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     +) Finally, we check if the first segment on the ->ooseq queue
1055:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     now is in sequence (i.e., if rcv_nxt >= ooseq->seqno). If
1056:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     rcv_nxt > ooseq->seqno, we must trim the first edge of the
1057:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     segment on ->ooseq before we adjust rcv_nxt. The data in the
1058:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     segments that are now on sequence are chained onto the
1059:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     incoming segment so that we only need to call the application
1060:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     once.
1061:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     */
1062:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1063:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* First, we check if we must trim the first edge. We have to do
1064:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        this if the sequence number of the incoming segment is less
1065:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        than rcv_nxt, and the sequence number plus the length of the
1066:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        segment is larger than rcv_nxt. */
1067:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
1068:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
1069:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
1070:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* Trimming the first edge is done by pushing the payload
1071:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          pointer in the pbuf downwards. This is somewhat tricky since
1072:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          we do not want to discard the full contents of the pbuf up to
1073:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          the new starting point of the data since we have to keep the
1074:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          TCP header which is present in the first pbuf in the chain.
1075:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1076:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          What is done is really quite a nasty hack: the first pbuf in
1077:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          the pbuf chain is pointed to by inseg.p. Since we need to be
1078:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          able to deallocate the whole pbuf, we cannot change this
1079:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          inseg.p pointer to point to any of the later pbufs in the
1080:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          chain. Instead, we point the ->payload pointer in the first
1081:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          pbuf to data in one of the later pbufs. We also set the
1082:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          inseg.data pointer to point to the right place. This way, the
1083:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          ->p pointer will still point to the first pbuf, but the
1084:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          ->p->payload pointer will point to data in another pbuf.
1085:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1086:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          After we are done with adjusting the pbuf pointers we must
1087:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          adjust the ->data pointer in the seg and the segment
1088:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          length.*/
1089:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1090:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       off = pcb->rcv_nxt - seqno;
1091:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       p = inseg.p;
1092:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_ASSERT("inseg.p != NULL", inseg.p);
1093:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       LWIP_ASSERT("insane offset!", (off < 0x7fff));
1094:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (inseg.p->len < off) {
1095:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
1096:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         new_tot_len = (u16_t)(inseg.p->tot_len - off);
1097:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         while (p->len < off) {
1098:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           off -= p->len;
1099:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* KJM following line changed (with addition of new_tot_len var)
1100:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              to fix bug #9076
1101:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              inseg.p->tot_len -= p->len; */
1102:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           p->tot_len = new_tot_len;
1103:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           p->len = 0;
1104:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           p = p->next;
1105:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1106:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if(pbuf_header(p, (s16_t)-off)) {
1107:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* Do we need to cope with this failing?  Assert for now */
1108:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_ASSERT("pbuf_header failed", 0);
1109:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1110:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       } else {
1111:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if(pbuf_header(inseg.p, (s16_t)-off)) {
1112:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* Do we need to cope with this failing?  Assert for now */
1113:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_ASSERT("pbuf_header failed", 0);
1114:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1115:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
1116:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* KJM following line changed to use p->payload rather than inseg->p->payload
1117:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****          to fix bug #9076 */
1118:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       inseg.dataptr = p->payload;
1119:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
1120:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
1121:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
1122:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     else {
1123:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
1124:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* the whole segment is < rcv_nxt */
1125:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* must be a duplicate of a packet that has already been correctly handled */
1126:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1127:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
1128:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_ack_now(pcb);
1129:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
1130:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
1131:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1132:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* The sequence number must be within the window (above rcv_nxt
1133:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        and below rcv_nxt + rcv_wnd) in order to be further
1134:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        processed. */
1135:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
1136:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                         pcb->rcv_nxt + pcb->rcv_wnd - 1)){
1137:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       if (pcb->rcv_nxt == seqno) {
1138:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* The incoming segment is the next in sequence. We check if
1139:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            we have to trim the end of the segment and update rcv_nxt
1140:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            and pass the data to the application. */
1141:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcplen = TCP_TCPLEN(&inseg);
1142:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1143:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (tcplen > pcb->rcv_wnd) {
1144:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, 
1145:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                       ("tcp_receive: other end overran receive window"
1146:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                        "seqno %"U32_F" len %"U32_F" right edge %"U32_F"\n",
1147:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                        seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
1148:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
1149:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             /* Must remove the FIN from the header as we're trimming 
1150:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * that byte of sequence-space from the packet */
1151:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
1152:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
1153:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* Adjust length of segment to fit in the window. */
1154:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           inseg.len = pcb->rcv_wnd;
1155:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
1156:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             inseg.len -= 1;
1157:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
1158:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pbuf_realloc(inseg.p, inseg.len);
1159:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           tcplen = TCP_TCPLEN(&inseg);
1160:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
1161:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                       (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
1162:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1163:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
1164:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (pcb->ooseq != NULL) {
1165:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
1166:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             LWIP_DEBUGF(TCP_INPUT_DEBUG, 
1167:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                         ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
1168:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             /* Received in-order FIN means anything that was received
1169:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * out of order must now have been received in-order, so
1170:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * bin the ooseq queue
1171:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * rcv_nxt
1172:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * .    |--ooseq--|
1173:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * .==seg============|FIN
1174:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              */
1175:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             while (pcb->ooseq != NULL) {
1176:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               struct tcp_seg *old_ooseq = pcb->ooseq;
1177:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               pcb->ooseq = pcb->ooseq->next;
1178:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               tcp_seg_free(old_ooseq);
1179:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             }               
1180:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           } 
1181:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           else {
1182:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             struct tcp_seg* next = pcb->ooseq;
1183:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             struct tcp_seg *old_seg;
1184:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             /* rcv_nxt
1185:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * .    |--ooseq--|
1186:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * .==seg============|
1187:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              */
1188:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             while (next &&
1189:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                    TCP_SEQ_GEQ(seqno + tcplen,
1190:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                next->tcphdr->seqno + next->len)) {
1191:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               /* inseg doesn't have FIN (already processed) */
1192:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
1193:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
1194:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 TCPH_FLAGS_SET(inseg.tcphdr, 
1195:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                                TCPH_FLAGS(inseg.tcphdr) | TCP_FIN);
1196:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 tcplen = TCP_TCPLEN(&inseg);
1197:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               }
1198:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               old_seg = next;
1199:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               next = next->next;
1200:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               tcp_seg_free(old_seg);
1201:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             }
1202:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             /* rcv_nxt
1203:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * .             |--ooseq--|
1204:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              * .==seg============|
1205:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              */
1206:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             if (next &&
1207:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 TCP_SEQ_GT(seqno + tcplen,
1208:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                            next->tcphdr->seqno)) {
1209:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               /* FIN in inseg already handled by dropping whole ooseq queue */
1210:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               inseg.len = (u16_t)(pcb->ooseq->tcphdr->seqno - seqno);
1211:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
1212:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 inseg.len -= 1;
1213:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               }
1214:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               pbuf_realloc(inseg.p, inseg.len);
1215:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               tcplen = TCP_TCPLEN(&inseg);
1216:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
1217:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                           (seqno + tcplen) == pcb->ooseq->tcphdr->seqno);
1218:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             }
1219:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             pcb->ooseq = next;
1220:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
1221:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1222:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_QUEUE_OOSEQ */
1223:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1224:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->rcv_nxt = seqno + tcplen;
1225:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1226:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Update the receiver's (our) window. */
1227:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
1228:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->rcv_wnd -= tcplen;
1229:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1230:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_update_rcv_ann_wnd(pcb);
1231:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1232:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* If there is data in the segment, we make preparations to
1233:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            pass this up to the application. The ->recv_data variable
1234:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            is used for holding the pbuf that goes to the
1235:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            application. The code for reassembling out-of-sequence data
1236:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            chains its data on this pbuf as well.
1237:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1238:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            If the segment was a FIN, we set the TF_GOT_FIN flag that will
1239:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            be used to indicate to the application that the remote side has
1240:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            closed its end of the connection. */
1241:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (inseg.p->tot_len > 0) {
1242:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           recv_data = inseg.p;
1243:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* Since this pbuf now is the responsibility of the
1244:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              application, we delete our reference to it so that we won't
1245:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              (mistakingly) deallocate it. */
1246:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           inseg.p = NULL;
1247:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1248:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
1249:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
1250:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           recv_flags |= TF_GOT_FIN;
1251:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1252:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1253:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
1254:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* We now check if we have segments on the ->ooseq queue that
1255:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            is now in sequence. */
1256:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         while (pcb->ooseq != NULL &&
1257:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
1258:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1259:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           cseg = pcb->ooseq;
1260:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           seqno = pcb->ooseq->tcphdr->seqno;
1261:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1262:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->rcv_nxt += TCP_TCPLEN(cseg);
1263:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
1264:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                       pcb->rcv_wnd >= TCP_TCPLEN(cseg));
1265:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->rcv_wnd -= TCP_TCPLEN(cseg);
1266:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1267:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           tcp_update_rcv_ann_wnd(pcb);
1268:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1269:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if (cseg->p->tot_len > 0) {
1270:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             /* Chain this pbuf onto the pbuf that we will pass to
1271:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                the application. */
1272:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             if (recv_data) {
1273:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               pbuf_cat(recv_data, cseg->p);
1274:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             } else {
1275:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               recv_data = cseg->p;
1276:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             }
1277:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             cseg->p = NULL;
1278:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
1279:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
1280:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
1281:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             recv_flags |= TF_GOT_FIN;
1282:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close 
1283:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               pcb->state = CLOSE_WAIT;
1284:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             } 
1285:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
1286:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1287:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->ooseq = cseg->next;
1288:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           tcp_seg_free(cseg);
1289:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1290:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_QUEUE_OOSEQ */
1291:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1292:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1293:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Acknowledge the segment(s). */
1294:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_ack(pcb);
1295:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1296:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       } else {
1297:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* We get here if the incoming segment is out-of-sequence. */
1298:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tcp_send_empty_ack(pcb);
1299:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
1300:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* We queue the segment on the ->ooseq queue. */
1301:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (pcb->ooseq == NULL) {
1302:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->ooseq = tcp_seg_copy(&inseg);
1303:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         } else {
1304:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* If the queue is not empty, we walk through the queue and
1305:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              try to find a place where the sequence number of the
1306:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              incoming segment is between the sequence numbers of the
1307:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              previous and the next segment on the ->ooseq queue. That is
1308:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              the place where we put the incoming segment. If needed, we
1309:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              trim the second edges of the previous and the incoming
1310:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              segment so that it will fit into the sequence.
1311:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1312:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              If the incoming segment has the same sequence number as a
1313:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              segment on the ->ooseq queue, we discard the segment that
1314:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              contains less data. */
1315:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1316:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           prev = NULL;
1317:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           for(next = pcb->ooseq; next != NULL; next = next->next) {
1318:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             if (seqno == next->tcphdr->seqno) {
1319:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               /* The sequence number of the incoming segment is the
1320:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                  same as the sequence number of the segment on
1321:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                  ->ooseq. We check the lengths to see which one to
1322:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                  discard. */
1323:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               if (inseg.len > next->len) {
1324:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 /* The incoming segment is larger than the old
1325:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                    segment. We replace some segments with the new
1326:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                    one. */
1327:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 cseg = tcp_seg_copy(&inseg);
1328:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 if (cseg != NULL) {
1329:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   if (prev != NULL) {
1330:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     prev->next = cseg;
1331:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   } else {
1332:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     pcb->ooseq = cseg;
1333:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   }
1334:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   tcp_oos_insert_segment(cseg, next);
1335:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 }
1336:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 break;
1337:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               } else {
1338:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 /* Either the lenghts are the same or the incoming
1339:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                    segment was smaller than the old one; in either
1340:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                    case, we ditch the incoming segment. */
1341:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 break;
1342:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               }
1343:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             } else {
1344:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               if (prev == NULL) {
1345:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
1346:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   /* The sequence number of the incoming segment is lower
1347:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                      than the sequence number of the first segment on the
1348:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                      queue. We put the incoming segment first on the
1349:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                      queue. */
1350:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   cseg = tcp_seg_copy(&inseg);
1351:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   if (cseg != NULL) {
1352:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     pcb->ooseq = cseg;
1353:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     tcp_oos_insert_segment(cseg, next);
1354:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   }
1355:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   break;
1356:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 }
1357:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               } else {
1358:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
1359:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
1360:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
1361:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   /* The sequence number of the incoming segment is in
1362:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                      between the sequence numbers of the previous and
1363:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                      the next segment on ->ooseq. We trim trim the previous
1364:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                      segment, delete next segments that included in received segment
1365:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                      and trim received, if needed. */
1366:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   cseg = tcp_seg_copy(&inseg);
1367:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   if (cseg != NULL) {
1368:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
1369:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                       /* We need to trim the prev segment. */
1370:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                       prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
1371:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                       pbuf_realloc(prev->p, prev->len);
1372:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     }
1373:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     prev->next = cseg;
1374:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     tcp_oos_insert_segment(cseg, next);
1375:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   }
1376:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   break;
1377:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 }
1378:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               }
1379:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               /* If the "next" segment is the last segment on the
1380:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                  ooseq queue, we add the incoming segment to the end
1381:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                  of the list. */
1382:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               if (next->next == NULL &&
1383:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
1384:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
1385:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   /* segment "next" already contains all data */
1386:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   break;
1387:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 }
1388:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 next->next = tcp_seg_copy(&inseg);
1389:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 if (next->next != NULL) {
1390:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
1391:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     /* We need to trim the last segment. */
1392:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     next->len = (u16_t)(seqno - next->tcphdr->seqno);
1393:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                     pbuf_realloc(next->p, next->len);
1394:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                   }
1395:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 }
1396:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****                 break;
1397:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****               }
1398:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             }
1399:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****             prev = next;
1400:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           }
1401:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1402:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif /* TCP_QUEUE_OOSEQ */
1403:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1404:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
1405:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     } else {
1406:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       /* The incoming segment is not withing the window. */
1407:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_send_empty_ack(pcb);
1408:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
1409:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   } else {
1410:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /* Segments with length 0 is taken care of here. Segments that
1411:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****        fall out of the window are ACKed. */
1412:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
1413:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
1414:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
1415:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       tcp_ack_now(pcb);
1416:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
1417:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
1418:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** }
1419:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1420:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** /**
1421:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Parses the options contained in the incoming segment. 
1422:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
1423:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Called from tcp_listen_input() and tcp_process().
1424:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * Currently, only the MSS option is supported!
1425:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  *
1426:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  * @param pcb the tcp_pcb for which a segment arrived
1427:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****  */
1428:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** static void
1429:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** tcp_parseopt(struct tcp_pcb *pcb)
1430:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** {
  18              		.loc 1 1430 0
  19 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  20              	.LCFI0:
  21              	.LVL0:
  22 0002 071C     		mov	r7, r0
1431:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   u16_t c, max_c;
1432:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   u16_t mss;
1433:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   u8_t *opts, opt;
1434:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if LWIP_TCP_TIMESTAMPS
1435:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   u32_t tsval;
1436:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif
1437:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1438:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   opts = (u8_t *)tcphdr + TCP_HLEN;
  23              		.loc 1 1438 0
  24 0004 274B     		ldr	r3, .L13
  25 0006 1B68     		ldr	r3, [r3]
  26 0008 1C1C     		mov	r4, r3
  27              	.LVL1:
  28 000a 1434     		add	r4, r4, #20
1439:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** 
1440:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   /* Parse the TCP MSS option, if present. */
1441:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   if(TCPH_HDRLEN(tcphdr) > 0x5) {
  29              		.loc 1 1441 0
  30 000c 9889     		ldrh	r0, [r3, #12]
  31              	.LVL2:
  32 000e FFF7FEFF 		bl	ntohs
  33 0012 0001     		lsl	r0, r0, #4
  34 0014 000C     		lsr	r0, r0, #16
  35 0016 0528     		cmp	r0, #5
  36 0018 41D9     		bls	.L9
1442:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
  37              		.loc 1 1442 0
  38 001a 224B     		ldr	r3, .L13
  39 001c 1B68     		ldr	r3, [r3]
  40 001e 9889     		ldrh	r0, [r3, #12]
  41 0020 FFF7FEFF 		bl	ntohs
  42 0024 000B     		lsr	r0, r0, #12
  43 0026 0538     		sub	r0, r0, #5
  44 0028 8004     		lsl	r0, r0, #18
  45 002a 050C     		lsr	r5, r0, #16
  46              	.LVL3:
1443:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     for (c = 0; c < max_c; ) {
  47              		.loc 1 1443 0
  48 002c 002D     		cmp	r5, #0
  49 002e 36D0     		beq	.L9
  50 0030 0021     		mov	r1, #0
  51              	.LVL4:
1444:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       opt = opts[c];
1445:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       switch (opt) {
1446:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       case 0x00:
1447:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* End of options. */
1448:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
1449:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         return;
1450:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       case 0x01:
1451:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* NOP option. */
1452:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         ++c;
1453:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
1454:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         break;
1455:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       case 0x02:
1456:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
1457:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
1458:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* Bad length */
1459:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
1460:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           return;
1461:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1462:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* An MSS option with the right option length. */
1463:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         mss = (opts[c + 2] << 8) | opts[c + 3];
1464:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Limit the mss to the configured TCP_MSS and prevent division by zero */
1465:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  52              		.loc 1 1465 0
  53 0032 1D48     		ldr	r0, .L13+4
  54 0034 8446     		mov	ip, r0
  55 0036 8026     		mov	r6, #128
  56              	.LVL5:
  57 0038 B600     		lsl	r6, r6, #2
  58              	.LVL6:
  59              	.L8:
  60              		.loc 1 1445 0
  61 003a 625C     		ldrb	r2, [r4, r1]
  62 003c 1306     		lsl	r3, r2, #24
  63 003e 1B0E     		lsr	r3, r3, #24
  64 0040 012B     		cmp	r3, #1
  65 0042 06D0     		beq	.L4
  66 0044 1306     		lsl	r3, r2, #24
  67 0046 002B     		cmp	r3, #0
  68 0048 29D0     		beq	.L9
  69 004a 1B0E     		lsr	r3, r3, #24
  70 004c 022B     		cmp	r3, #2
  71 004e 1DD1     		bne	.L11
  72 0050 03E0     		b	.L12
  73              	.L4:
  74              		.loc 1 1452 0
  75 0052 4B1C     		add	r3, r1, #1
  76 0054 1B04     		lsl	r3, r3, #16
  77 0056 190C     		lsr	r1, r3, #16
  78              	.LVL7:
  79 0058 1FE0     		b	.L6
  80              	.L12:
  81              		.loc 1 1457 0
  82 005a 6318     		add	r3, r4, r1
  83              	.LVL8:
  84 005c 5B78     		ldrb	r3, [r3, #1]
  85 005e 042B     		cmp	r3, #4
  86 0060 1DD1     		bne	.L9
  87 0062 0B1D     		add	r3, r1, #4
  88              	.LVL9:
  89 0064 AB42     		cmp	r3, r5
  90 0066 1ADC     		bgt	.L9
  91              		.loc 1 1463 0
  92 0068 6318     		add	r3, r4, r1
  93              	.LVL10:
  94 006a 9A78     		ldrb	r2, [r3, #2]
  95 006c DB78     		ldrb	r3, [r3, #3]
  96 006e 1202     		lsl	r2, r2, #8
  97 0070 1343     		orr	r3, r3, r2
  98 0072 1B04     		lsl	r3, r3, #16
  99              		.loc 1 1465 0
 100 0074 1A0C     		lsr	r2, r3, #16
 101              	.LVL11:
 102 0076 0D48     		ldr	r0, .L13+8
 103 0078 1B18     		add	r3, r3, r0
 104 007a 1B0C     		lsr	r3, r3, #16
 105 007c 6345     		cmp	r3, ip
 106 007e 00D9     		bls	.L7
 107 0080 321C     		mov	r2, r6
 108              	.L7:
 109 0082 BA87     		strh	r2, [r7, #60]
1466:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Advance to next option */
1467:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         c += 0x04;
 110              		.loc 1 1467 0
 111 0084 0B1D     		add	r3, r1, #4
 112              	.LVL12:
 113 0086 1B04     		lsl	r3, r3, #16
 114 0088 190C     		lsr	r1, r3, #16
 115              	.LVL13:
 116 008a 06E0     		b	.L6
 117              	.LVL14:
 118              	.L11:
1468:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         break;
1469:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #if LWIP_TCP_TIMESTAMPS
1470:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       case 0x08:
1471:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: TS\n"));
1472:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (opts[c + 1] != 0x0A || c + 0x0A > max_c) {
1473:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* Bad length */
1474:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
1475:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           return;
1476:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1477:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* TCP timestamp option with valid length */
1478:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         tsval = (opts[c+2]) | (opts[c+3] << 8) | 
1479:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           (opts[c+4] << 16) | (opts[c+5] << 24);
1480:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (flags & TCP_SYN) {
1481:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->ts_recent = ntohl(tsval);
1482:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->flags |= TF_TIMESTAMP;
1483:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         } else if (TCP_SEQ_BETWEEN(pcb->ts_lastacksent, seqno, seqno+tcplen)) {
1484:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           pcb->ts_recent = ntohl(tsval);
1485:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1486:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* Advance to next option */
1487:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         c += 0x0A;
1488:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         break;
1489:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** #endif
1490:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       default:
1491:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
1492:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         if (opts[c + 1] == 0) {
 119              		.loc 1 1492 0
 120 008c 6318     		add	r3, r4, r1
 121              	.LVL15:
 122 008e 5B78     		ldrb	r3, [r3, #1]
 123 0090 002B     		cmp	r3, #0
 124 0092 04D0     		beq	.L9
1493:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
1494:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           /* If the length field is zero, the options are malformed
1495:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****              and we don't process them further. */
1496:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****           return;
1497:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         }
1498:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         /* All other options have a length field, so that we easily
1499:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****            can skip past them. */
1500:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****         c += opts[c + 1];
 125              		.loc 1 1500 0
 126 0094 CB18     		add	r3, r1, r3
 127              	.LVL16:
 128 0096 1B04     		lsl	r3, r3, #16
 129 0098 190C     		lsr	r1, r3, #16
 130              	.LVL17:
 131              	.L6:
 132              		.loc 1 1443 0
 133 009a 8D42     		cmp	r5, r1
 134 009c CDD8     		bhi	.L8
 135              	.L9:
1501:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****       }
1502:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****     }
1503:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c ****   }
1504:rtos/common/ethernet/lwIP_132/src/core/tcp_in.c **** }
 136              		.loc 1 1504 0
 137              		@ sp needed for prologue
 138              	.LVL18:
 139              	.LVL19:
 140              	.LVL20:
 141              	.LVL21:
 142 009e F0BC     		pop	{r4, r5, r6, r7}
 143 00a0 01BC     		pop	{r0}
 144 00a2 0047     		bx	r0
 145              	.L14:
 146              		.align	2
 147              	.L13:
 148 00a4 14000000 		.word	tcphdr
 149 00a8 FF010000 		.word	511
 150 00ac 0000FFFF 		.word	-65536
 151              	.LFE296:
 153              		.align	2
 154              		.code	16
 155              		.thumb_func
 157              	tcp_oos_insert_segment:
 158              	.LFB294:
 159              		.loc 1 745 0
 160 00b0 F0B5     		push	{r4, r5, r6, r7, lr}
 161              	.LCFI1:
 162 00b2 5F46     		mov	r7, fp
 163 00b4 5646     		mov	r6, sl
 164 00b6 4D46     		mov	r5, r9
 165 00b8 4446     		mov	r4, r8
 166 00ba F0B4     		push	{r4, r5, r6, r7}
 167              	.LCFI2:
 168              	.LVL22:
 169 00bc 061C     		mov	r6, r0
 170 00be 0C1C     		mov	r4, r1
 171              		.loc 1 748 0
 172 00c0 0369     		ldr	r3, [r0, #16]
 173 00c2 9889     		ldrh	r0, [r3, #12]
 174              	.LVL23:
 175 00c4 FFF7FEFF 		bl	ntohs
 176              	.LVL24:
 177 00c8 C307     		lsl	r3, r0, #31
 178 00ca 0CD4     		bmi	.L16
 179              		.loc 1 756 0
 180 00cc 002C     		cmp	r4, #0
 181 00ce 53D0     		beq	.L17
 182 00d0 2169     		ldr	r1, [r4, #16]
 183 00d2 B289     		ldrh	r2, [r6, #12]
 184 00d4 4B68     		ldr	r3, [r1, #4]
 185 00d6 D21A     		sub	r2, r2, r3
 186 00d8 2C4B     		ldr	r3, .L24
 187 00da 1B68     		ldr	r3, [r3]
 188 00dc D218     		add	r2, r2, r3
 189 00de A389     		ldrh	r3, [r4, #12]
 190 00e0 9A42     		cmp	r2, r3
 191 00e2 05D5     		bpl	.L18
 192 00e4 38E0     		b	.L19
 193              	.L16:
 194              		.loc 1 750 0
 195 00e6 201C     		mov	r0, r4
 196 00e8 FFF7FEFF 		bl	tcp_segs_free
 197 00ec 0024     		mov	r4, #0
 198 00ee 43E0     		b	.L17
 199              	.L18:
 200              		.loc 1 760 0
 201 00f0 0120     		mov	r0, #1
 202 00f2 8146     		mov	r9, r0
 203              		.loc 1 761 0
 204 00f4 0123     		mov	r3, #1
 205 00f6 9B46     		mov	fp, r3
 206              		.loc 1 756 0
 207 00f8 2448     		ldr	r0, .L24
 208 00fa 8246     		mov	sl, r0
 209              	.LVL25:
 210              	.L22:
 211              		.loc 1 750 0
 212 00fc 271C     		mov	r7, r4
 213              		.loc 1 760 0
 214 00fe 8889     		ldrh	r0, [r1, #12]
 215 0100 FFF7FEFF 		bl	ntohs
 216 0104 4B46     		mov	r3, r9
 217 0106 1842     		tst	r0, r3
 218 0108 16D0     		beq	.L20
 219              	.LVL26:
 220              		.loc 1 761 0
 221 010a 3369     		ldr	r3, [r6, #16]
 222 010c 9B89     		ldrh	r3, [r3, #12]
 223 010e 9846     		mov	r8, r3
 224 0110 1F48     		ldr	r0, .L24+4
 225 0112 FFF7FEFF 		bl	htons
 226 0116 041C     		mov	r4, r0
 227 0118 3569     		ldr	r5, [r6, #16]
 228 011a A889     		ldrh	r0, [r5, #12]
 229 011c FFF7FEFF 		bl	ntohs
 230 0120 3E23     		mov	r3, #62
 231 0122 1840     		and	r0, r0, r3
 232 0124 5B46     		mov	r3, fp
 233 0126 1843     		orr	r0, r0, r3
 234 0128 0004     		lsl	r0, r0, #16
 235 012a 000C     		lsr	r0, r0, #16
 236 012c FFF7FEFF 		bl	htons
 237 0130 4346     		mov	r3, r8
 238 0132 1C40     		and	r4, r4, r3
 239 0134 2043     		orr	r0, r0, r4
 240 0136 A881     		strh	r0, [r5, #12]
 241              	.LVL27:
 242              	.L20:
 243              		.loc 1 764 0
 244 0138 3C68     		ldr	r4, [r7]
 245              	.LVL28:
 246              		.loc 1 765 0
 247 013a 381C     		mov	r0, r7
 248 013c FFF7FEFF 		bl	tcp_seg_free
 249              		.loc 1 756 0
 250 0140 002C     		cmp	r4, #0
 251 0142 19D0     		beq	.L17
 252 0144 2169     		ldr	r1, [r4, #16]
 253 0146 B389     		ldrh	r3, [r6, #12]
 254 0148 4A68     		ldr	r2, [r1, #4]
 255 014a 9B1A     		sub	r3, r3, r2
 256 014c 5046     		mov	r0, sl
 257 014e 0268     		ldr	r2, [r0]
 258 0150 9B18     		add	r3, r3, r2
 259 0152 A289     		ldrh	r2, [r4, #12]
 260 0154 9342     		cmp	r3, r2
 261 0156 D1D5     		bpl	.L22
 262              	.L19:
 263              		.loc 1 767 0
 264 0158 0C4B     		ldr	r3, .L24
 265 015a 1A68     		ldr	r2, [r3]
 266 015c 2369     		ldr	r3, [r4, #16]
 267 015e 5968     		ldr	r1, [r3, #4]
 268 0160 B389     		ldrh	r3, [r6, #12]
 269 0162 5B1A     		sub	r3, r3, r1
 270 0164 9B18     		add	r3, r3, r2
 271 0166 002B     		cmp	r3, #0
 272 0168 06DD     		ble	.L17
 273              		.loc 1 770 0
 274 016a 891A     		sub	r1, r1, r2
 275 016c 0904     		lsl	r1, r1, #16
 276 016e 090C     		lsr	r1, r1, #16
 277 0170 B181     		strh	r1, [r6, #12]
 278              		.loc 1 771 0
 279 0172 7068     		ldr	r0, [r6, #4]
 280 0174 FFF7FEFF 		bl	pbuf_realloc
 281              	.L17:
 282              		.loc 1 774 0
 283 0178 3460     		str	r4, [r6]
 284              		.loc 1 775 0
 285              		@ sp needed for prologue
 286              	.LVL29:
 287              	.LVL30:
 288              	.LVL31:
 289 017a 3CBC     		pop	{r2, r3, r4, r5}
 290 017c 9046     		mov	r8, r2
 291 017e 9946     		mov	r9, r3
 292 0180 A246     		mov	sl, r4
 293 0182 AB46     		mov	fp, r5
 294 0184 F0BC     		pop	{r4, r5, r6, r7}
 295 0186 01BC     		pop	{r0}
 296 0188 0047     		bx	r0
 297              	.L25:
 298 018a C046     		.align	2
 299              	.L24:
 300 018c 1C000000 		.word	seqno
 301 0190 C0FF0000 		.word	65472
 302              	.LFE294:
 304              		.global	__divsi3
 305              		.align	2
 306              		.code	16
 307              		.thumb_func
 309              	tcp_receive:
 310              	.LFB295:
 311              		.loc 1 792 0
 312 0194 F0B5     		push	{r4, r5, r6, r7, lr}
 313              	.LCFI3:
 314 0196 5F46     		mov	r7, fp
 315 0198 5646     		mov	r6, sl
 316 019a 4D46     		mov	r5, r9
 317 019c 4446     		mov	r4, r8
 318 019e F0B4     		push	{r4, r5, r6, r7}
 319              	.LCFI4:
 320              	.LVL32:
 321 01a0 82B0     		sub	sp, sp, #8
 322              	.LCFI5:
 323 01a2 071C     		mov	r7, r0
 324              		.loc 1 804 0
 325 01a4 9A4B     		ldr	r3, .L102
 326 01a6 1B78     		ldrb	r3, [r3]
 327 01a8 D906     		lsl	r1, r3, #27
 328 01aa 00D4     		bmi	.LCB304
 329 01ac 85E1     		b	.L27	@long jump
 330              	.LCB304:
 331              	.LVL33:
 332              		.loc 1 805 0
 333 01ae 6023     		mov	r3, #96
 334 01b0 C45A     		ldrh	r4, [r0, r3]
 335 01b2 806E     		ldr	r0, [r0, #104]
 336              		.loc 1 808 0
 337 01b4 7A6E     		ldr	r2, [r7, #100]
 338 01b6 974B     		ldr	r3, .L102+4
 339 01b8 1B68     		ldr	r3, [r3]
 340 01ba 9A42     		cmp	r2, r3
 341 01bc 0ED4     		bmi	.L28
 342 01be 9A42     		cmp	r2, r3
 343 01c0 03D1     		bne	.L29
 344 01c2 954B     		ldr	r3, .L102+8
 345 01c4 1B68     		ldr	r3, [r3]
 346 01c6 9842     		cmp	r0, r3
 347 01c8 08D4     		bmi	.L28
 348              	.L29:
 349 01ca 934B     		ldr	r3, .L102+8
 350 01cc 1B68     		ldr	r3, [r3]
 351 01ce 9842     		cmp	r0, r3
 352 01d0 19D1     		bne	.L30
 353 01d2 924B     		ldr	r3, .L102+12
 354 01d4 1B68     		ldr	r3, [r3]
 355 01d6 DB89     		ldrh	r3, [r3, #14]
 356 01d8 A342     		cmp	r3, r4
 357 01da 14D9     		bls	.L30
 358              	.L28:
 359              		.loc 1 811 0
 360 01dc 8F4B     		ldr	r3, .L102+12
 361 01de 1B68     		ldr	r3, [r3]
 362 01e0 6022     		mov	r2, #96
 363 01e2 DB89     		ldrh	r3, [r3, #14]
 364 01e4 BB52     		strh	r3, [r7, r2]
 365              		.loc 1 812 0
 366 01e6 8B4B     		ldr	r3, .L102+4
 367 01e8 1B68     		ldr	r3, [r3]
 368 01ea 7B66     		str	r3, [r7, #100]
 369              		.loc 1 813 0
 370 01ec 8A4B     		ldr	r3, .L102+8
 371 01ee 1B68     		ldr	r3, [r3]
 372 01f0 BB66     		str	r3, [r7, #104]
 373              		.loc 1 814 0
 374 01f2 BB5A     		ldrh	r3, [r7, r2]
 375 01f4 002B     		cmp	r3, #0
 376 01f6 06D0     		beq	.L30
 377 01f8 A423     		mov	r3, #164
 378 01fa FB5C     		ldrb	r3, [r7, r3]
 379 01fc 002B     		cmp	r3, #0
 380 01fe 02D0     		beq	.L30
 381              		.loc 1 815 0
 382 0200 0022     		mov	r2, #0
 383 0202 A423     		mov	r3, #164
 384 0204 FA54     		strb	r2, [r7, r3]
 385              	.L30:
 386              		.loc 1 850 0
 387 0206 844B     		ldr	r3, .L102+8
 388 0208 1A68     		ldr	r2, [r3]
 389 020a 396D     		ldr	r1, [r7, #80]
 390 020c 531A     		sub	r3, r2, r1
 391 020e 002B     		cmp	r3, #0
 392 0210 3ADC     		bgt	.L31
 393              		.loc 1 851 0
 394 0212 0022     		mov	r2, #0
 395 0214 7023     		mov	r3, #112
 396 0216 FA52     		strh	r2, [r7, r3]
 397              		.loc 1 853 0
 398 0218 814B     		ldr	r3, .L102+16
 399 021a 1B88     		ldrh	r3, [r3]
 400 021c 002B     		cmp	r3, #0
 401 021e 2BD1     		bne	.L32
 402              		.loc 1 855 0
 403 0220 6023     		mov	r3, #96
 404 0222 FB5A     		ldrh	r3, [r7, r3]
 405 0224 BA6E     		ldr	r2, [r7, #104]
 406 0226 9B18     		add	r3, r3, r2
 407 0228 2218     		add	r2, r4, r0
 408 022a 9342     		cmp	r3, r2
 409 022c 24D1     		bne	.L32
 410              		.loc 1 857 0
 411 022e 3A22     		mov	r2, #58
 412 0230 BB5E     		ldrsh	r3, [r7, r2]
 413 0232 002B     		cmp	r3, #0
 414 0234 20DB     		blt	.L32
 415              		.loc 1 859 0
 416 0236 784B     		ldr	r3, .L102+8
 417 0238 1B68     		ldr	r3, [r3]
 418 023a 9942     		cmp	r1, r3
 419 023c 1CD1     		bne	.L32
 420              		.loc 1 861 0
 421 023e 5423     		mov	r3, #84
 422 0240 FA5C     		ldrb	r2, [r7, r3]
 423 0242 531C     		add	r3, r2, #1
 424 0244 9A42     		cmp	r2, r3
 425 0246 02DA     		bge	.L33
 426              		.loc 1 862 0
 427 0248 1A1C     		mov	r2, r3
 428 024a 5423     		mov	r3, #84
 429 024c FA54     		strb	r2, [r7, r3]
 430              	.L33:
 431              		.loc 1 863 0
 432 024e 5423     		mov	r3, #84
 433 0250 FB5C     		ldrb	r3, [r7, r3]
 434 0252 032B     		cmp	r3, #3
 435 0254 0AD9     		bls	.L34
 436              		.loc 1 866 0
 437 0256 5623     		mov	r3, #86
 438 0258 FA5A     		ldrh	r2, [r7, r3]
 439 025a BB8F     		ldrh	r3, [r7, #60]
 440 025c D318     		add	r3, r2, r3
 441 025e 1B04     		lsl	r3, r3, #16
 442 0260 190C     		lsr	r1, r3, #16
 443 0262 8A42     		cmp	r2, r1
 444 0264 0BD2     		bcs	.L35
 445              		.loc 1 867 0
 446 0266 5623     		mov	r3, #86
 447 0268 F952     		strh	r1, [r7, r3]
 448 026a 08E0     		b	.L35
 449              	.L34:
 450              		.loc 1 869 0
 451 026c 032B     		cmp	r3, #3
 452 026e 06D1     		bne	.L35
 453              		.loc 1 871 0
 454 0270 381C     		mov	r0, r7
 455 0272 FFF7FEFF 		bl	tcp_rexmit_fast
 456 0276 02E0     		b	.L35
 457              	.L32:
 458              		.loc 1 880 0
 459 0278 0022     		mov	r2, #0
 460 027a 5423     		mov	r3, #84
 461 027c FA54     		strb	r2, [r7, r3]
 462              	.LVL34:
 463              	.L35:
 464              		.loc 1 980 0
 465 027e BB6F     		ldr	r3, [r7, #120]
 466 0280 002B     		cmp	r3, #0
 467 0282 00D0     		beq	.LCB429
 468 0284 CEE0     		b	.L98	@long jump
 469              	.LCB429:
 470 0286 EFE0     		b	.L36
 471              	.LVL35:
 472              	.L31:
 473              		.loc 1 882 0
 474 0288 CB43     		mvn	r3, r1
 475 028a D342     		cmn	r3, r2
 476 028c 00D5     		bpl	.LCB439
 477 028e 99E0     		b	.L38	@long jump
 478              	.LCB439:
 479 0290 FB6D     		ldr	r3, [r7, #92]
 480 0292 D31A     		sub	r3, r2, r3
 481 0294 002B     		cmp	r3, #0
 482 0296 00DD     		ble	.LCB443
 483 0298 94E0     		b	.L38	@long jump
 484              	.LCB443:
 485              		.loc 1 888 0
 486 029a 2623     		mov	r3, #38
 487 029c FA5C     		ldrb	r2, [r7, r3]
 488 029e 5307     		lsl	r3, r2, #29
 489 02a0 07D5     		bpl	.L39
 490              		.loc 1 889 0
 491 02a2 0423     		mov	r3, #4
 492 02a4 9A43     		bic	r2, r2, r3
 493 02a6 2623     		mov	r3, #38
 494 02a8 FA54     		strb	r2, [r7, r3]
 495              		.loc 1 890 0
 496 02aa 5823     		mov	r3, #88
 497 02ac FA5A     		ldrh	r2, [r7, r3]
 498 02ae 5623     		mov	r3, #86
 499 02b0 FA52     		strh	r2, [r7, r3]
 500              	.L39:
 501              		.loc 1 894 0
 502 02b2 0024     		mov	r4, #0
 503 02b4 4E23     		mov	r3, #78
 504 02b6 FC54     		strb	r4, [r7, r3]
 505              		.loc 1 897 0
 506 02b8 4823     		mov	r3, #72
 507 02ba FB5E     		ldrsh	r3, [r7, r3]
 508 02bc DB08     		lsr	r3, r3, #3
 509 02be 4A22     		mov	r2, #74
 510 02c0 BA5A     		ldrh	r2, [r7, r2]
 511 02c2 9B18     		add	r3, r3, r2
 512 02c4 4C22     		mov	r2, #76
 513 02c6 BB52     		strh	r3, [r7, r2]
 514              		.loc 1 900 0
 515 02c8 5348     		ldr	r0, .L102+8
 516 02ca 0388     		ldrh	r3, [r0]
 517 02cc 3A6D     		ldr	r2, [r7, #80]
 518 02ce 9B1A     		sub	r3, r3, r2
 519 02d0 1B04     		lsl	r3, r3, #16
 520 02d2 1B0C     		lsr	r3, r3, #16
 521 02d4 7022     		mov	r2, #112
 522 02d6 BB52     		strh	r3, [r7, r2]
 523              		.loc 1 902 0
 524 02d8 7221     		mov	r1, #114
 525 02da 7A5A     		ldrh	r2, [r7, r1]
 526 02dc 9B18     		add	r3, r3, r2
 527 02de 7B52     		strh	r3, [r7, r1]
 528              		.loc 1 905 0
 529 02e0 5423     		mov	r3, #84
 530 02e2 FC54     		strb	r4, [r7, r3]
 531              		.loc 1 906 0
 532 02e4 0368     		ldr	r3, [r0]
 533 02e6 3B65     		str	r3, [r7, #80]
 534              		.loc 1 910 0
 535 02e8 3B69     		ldr	r3, [r7, #16]
 536 02ea 032B     		cmp	r3, #3
 537 02ec 1BD9     		bls	.L40
 538              		.loc 1 911 0
 539 02ee 5623     		mov	r3, #86
 540 02f0 FC5A     		ldrh	r4, [r7, r3]
 541 02f2 5823     		mov	r3, #88
 542 02f4 FB5A     		ldrh	r3, [r7, r3]
 543 02f6 A342     		cmp	r3, r4
 544 02f8 08D9     		bls	.L41
 545              		.loc 1 912 0
 546 02fa BB8F     		ldrh	r3, [r7, #60]
 547 02fc E318     		add	r3, r4, r3
 548 02fe 1B04     		lsl	r3, r3, #16
 549 0300 1A0C     		lsr	r2, r3, #16
 550 0302 9442     		cmp	r4, r2
 551 0304 0FD2     		bcs	.L40
 552              		.loc 1 913 0
 553 0306 5623     		mov	r3, #86
 554 0308 FA52     		strh	r2, [r7, r3]
 555 030a 0CE0     		b	.L40
 556              	.L41:
 557              	.LBB2:
 558              		.loc 1 917 0
 559 030c BB8F     		ldrh	r3, [r7, #60]
 560 030e 181C     		mov	r0, r3
 561 0310 5843     		mul	r0, r3
 562 0312 211C     		mov	r1, r4
 563 0314 FFF7FEFF 		bl	__divsi3
 564 0318 2018     		add	r0, r4, r0
 565 031a 0004     		lsl	r0, r0, #16
 566 031c 000C     		lsr	r0, r0, #16
 567              	.LVL36:
 568              		.loc 1 918 0
 569 031e 8442     		cmp	r4, r0
 570 0320 01D2     		bcs	.L40
 571              		.loc 1 919 0
 572 0322 5623     		mov	r3, #86
 573 0324 F852     		strh	r0, [r7, r3]
 574              	.L40:
 575              	.LBE2:
 576              		.loc 1 933 0
 577 0326 FB6F     		ldr	r3, [r7, #124]
 578 0328 002B     		cmp	r3, #0
 579 032a 1FD1     		bne	.L99
 580 032c 40E0     		b	.L42
 581              	.LVL37:
 582              	.L45:
 583              		.loc 1 941 0
 584 032e FD6F     		ldr	r5, [r7, #124]
 585              	.LVL38:
 586              		.loc 1 942 0
 587 0330 2B68     		ldr	r3, [r5]
 588 0332 FB67     		str	r3, [r7, #124]
 589              		.loc 1 947 0
 590 0334 BB5B     		ldrh	r3, [r7, r6]
 591 0336 002B     		cmp	r3, #0
 592 0338 09D0     		beq	.L44
 593 033a 2B69     		ldr	r3, [r5, #16]
 594 033c 9889     		ldrh	r0, [r3, #12]
 595 033e FFF7FEFF 		bl	ntohs
 596 0342 5A46     		mov	r2, fp
 597 0344 1042     		tst	r0, r2
 598 0346 02D0     		beq	.L44
 599              		.loc 1 948 0
 600 0348 BB5B     		ldrh	r3, [r7, r6]
 601 034a 013B     		sub	r3, r3, #1
 602 034c BB53     		strh	r3, [r7, r6]
 603              	.L44:
 604              		.loc 1 951 0
 605 034e 5346     		mov	r3, sl
 606 0350 FC5A     		ldrh	r4, [r7, r3]
 607 0352 6868     		ldr	r0, [r5, #4]
 608 0354 FFF7FEFF 		bl	pbuf_clen
 609 0358 241A     		sub	r4, r4, r0
 610 035a 5146     		mov	r1, sl
 611 035c 7C52     		strh	r4, [r7, r1]
 612              		.loc 1 952 0
 613 035e 281C     		mov	r0, r5
 614 0360 FFF7FEFF 		bl	tcp_seg_free
 615              		.loc 1 933 0
 616 0364 FB6F     		ldr	r3, [r7, #124]
 617 0366 002B     		cmp	r3, #0
 618 0368 09D1     		bne	.L100
 619 036a 21E0     		b	.L42
 620              	.LVL39:
 621              	.L99:
 622 036c 2A4A     		ldr	r2, .L102+8
 623 036e 9046     		mov	r8, r2
 624 0370 0321     		mov	r1, #3
 625 0372 8946     		mov	r9, r1
 626              		.loc 1 947 0
 627 0374 7026     		mov	r6, #112
 628 0376 0122     		mov	r2, #1
 629 0378 9346     		mov	fp, r2
 630              		.loc 1 951 0
 631 037a 7421     		mov	r1, #116
 632 037c 8A46     		mov	sl, r1
 633              	.LVL40:
 634              	.L100:
 635              		.loc 1 933 0
 636 037e 1B69     		ldr	r3, [r3, #16]
 637 0380 5868     		ldr	r0, [r3, #4]
 638              	.LVL41:
 639 0382 FFF7FEFF 		bl	ntohl
 640 0386 041C     		mov	r4, r0
 641 0388 FB6F     		ldr	r3, [r7, #124]
 642 038a 9D89     		ldrh	r5, [r3, #12]
 643              	.LVL42:
 644 038c 1B69     		ldr	r3, [r3, #16]
 645 038e 9889     		ldrh	r0, [r3, #12]
 646 0390 FFF7FEFF 		bl	ntohs
 647 0394 4246     		mov	r2, r8
 648 0396 1368     		ldr	r3, [r2]
 649 0398 E41A     		sub	r4, r4, r3
 650 039a 4B46     		mov	r3, r9
 651 039c 1840     		and	r0, r0, r3
 652 039e 431E     		sub	r3, r0, #1
 653 03a0 9841     		sbc	r0, r0, r3
 654 03a2 4019     		add	r0, r0, r5
 655 03a4 2418     		add	r4, r4, r0
 656 03a6 002C     		cmp	r4, #0
 657 03a8 C1DD     		ble	.L45
 658              		.loc 1 963 0
 659 03aa FB6F     		ldr	r3, [r7, #124]
 660 03ac 002B     		cmp	r3, #0
 661 03ae 03D1     		bne	.L46
 662              	.LVL43:
 663              	.L42:
 664              		.loc 1 964 0
 665 03b0 0123     		mov	r3, #1
 666 03b2 5B42     		neg	r3, r3
 667 03b4 7B87     		strh	r3, [r7, #58]
 668 03b6 01E0     		b	.L47
 669              	.LVL44:
 670              	.L46:
 671              		.loc 1 966 0
 672 03b8 0023     		mov	r3, #0
 673 03ba 7B87     		strh	r3, [r7, #58]
 674              	.LVL45:
 675              	.L47:
 676              		.loc 1 968 0
 677 03bc 0022     		mov	r2, #0
 678 03be 3823     		mov	r3, #56
 679 03c0 FA54     		strb	r2, [r7, r3]
 680 03c2 5CE7     		b	.L35
 681              	.LVL46:
 682              	.L38:
 683              		.loc 1 971 0
 684 03c4 0022     		mov	r2, #0
 685 03c6 7023     		mov	r3, #112
 686 03c8 FA52     		strh	r2, [r7, r3]
 687 03ca 58E7     		b	.L35
 688              	.L49:
 689              		.loc 1 987 0
 690 03cc BD6F     		ldr	r5, [r7, #120]
 691              	.LVL47:
 692              		.loc 1 988 0
 693 03ce 2B68     		ldr	r3, [r5]
 694 03d0 BB67     		str	r3, [r7, #120]
 695              		.loc 1 992 0
 696 03d2 4146     		mov	r1, r8
 697 03d4 7B5A     		ldrh	r3, [r7, r1]
 698 03d6 002B     		cmp	r3, #0
 699 03d8 0BD0     		beq	.L48
 700 03da 2B69     		ldr	r3, [r5, #16]
 701 03dc 9889     		ldrh	r0, [r3, #12]
 702 03de FFF7FEFF 		bl	ntohs
 703 03e2 0122     		mov	r2, #1
 704 03e4 1042     		tst	r0, r2
 705 03e6 04D0     		beq	.L48
 706              		.loc 1 993 0
 707 03e8 4146     		mov	r1, r8
 708 03ea 7B5A     		ldrh	r3, [r7, r1]
 709 03ec 013B     		sub	r3, r3, #1
 710 03ee 4246     		mov	r2, r8
 711 03f0 BB52     		strh	r3, [r7, r2]
 712              	.L48:
 713              		.loc 1 995 0
 714 03f2 5B46     		mov	r3, fp
 715 03f4 FC5A     		ldrh	r4, [r7, r3]
 716 03f6 6868     		ldr	r0, [r5, #4]
 717 03f8 FFF7FEFF 		bl	pbuf_clen
 718 03fc 241A     		sub	r4, r4, r0
 719 03fe 5946     		mov	r1, fp
 720 0400 7C52     		strh	r4, [r7, r1]
 721              		.loc 1 996 0
 722 0402 281C     		mov	r0, r5
 723 0404 FFF7FEFF 		bl	tcp_seg_free
 724              		.loc 1 980 0
 725 0408 BB6F     		ldr	r3, [r7, #120]
 726 040a 002B     		cmp	r3, #0
 727 040c 11D1     		bne	.L101
 728 040e 2BE0     		b	.L36
 729              	.L103:
 730              		.align	2
 731              	.L102:
 732 0410 24000000 		.word	flags
 733 0414 1C000000 		.word	seqno
 734 0418 20000000 		.word	ackno
 735 041c 14000000 		.word	tcphdr
 736 0420 26000000 		.word	tcplen
 737              	.LVL48:
 738              	.L98:
 739 0424 824A     		ldr	r2, .L104
 740 0426 9146     		mov	r9, r2
 741 0428 9246     		mov	sl, r2
 742              		.loc 1 992 0
 743 042a 7021     		mov	r1, #112
 744 042c 8846     		mov	r8, r1
 745              		.loc 1 995 0
 746 042e 7422     		mov	r2, #116
 747 0430 9346     		mov	fp, r2
 748              	.L101:
 749              		.loc 1 980 0
 750 0432 4946     		mov	r1, r9
 751 0434 0C68     		ldr	r4, [r1]
 752 0436 1B69     		ldr	r3, [r3, #16]
 753 0438 5868     		ldr	r0, [r3, #4]
 754              	.LVL49:
 755 043a FFF7FEFF 		bl	ntohl
 756 043e 051C     		mov	r5, r0
 757              	.LVL50:
 758 0440 BB6F     		ldr	r3, [r7, #120]
 759 0442 9E89     		ldrh	r6, [r3, #12]
 760 0444 1B69     		ldr	r3, [r3, #16]
 761 0446 9889     		ldrh	r0, [r3, #12]
 762 0448 FFF7FEFF 		bl	ntohs
 763 044c 641B     		sub	r4, r4, r5
 764 044e 0322     		mov	r2, #3
 765 0450 1040     		and	r0, r0, r2
 766 0452 431E     		sub	r3, r0, #1
 767 0454 9841     		sbc	r0, r0, r3
 768 0456 8019     		add	r0, r0, r6
 769 0458 8442     		cmp	r4, r0
 770 045a 05D4     		bmi	.L36
 771 045c 5146     		mov	r1, sl
 772 045e 0B68     		ldr	r3, [r1]
 773 0460 FA6D     		ldr	r2, [r7, #92]
 774 0462 9B1A     		sub	r3, r3, r2
 775 0464 002B     		cmp	r3, #0
 776 0466 B1DD     		ble	.L49
 777              	.LVL51:
 778              	.L36:
 779              		.loc 1 1011 0
 780 0468 3C6C     		ldr	r4, [r7, #64]
 781 046a 002C     		cmp	r4, #0
 782 046c 25D0     		beq	.L27
 783 046e 704B     		ldr	r3, .L104
 784 0470 7A6C     		ldr	r2, [r7, #68]
 785 0472 1B68     		ldr	r3, [r3]
 786 0474 9A42     		cmp	r2, r3
 787 0476 20D5     		bpl	.L27
 788              		.loc 1 1020 0
 789 0478 4820     		mov	r0, #72
 790              	.LVL52:
 791 047a 395A     		ldrh	r1, [r7, r0]
 792 047c 6D4B     		ldr	r3, .L104+4
 793 047e 1B88     		ldrh	r3, [r3]
 794 0480 0A04     		lsl	r2, r1, #16
 795 0482 1B1B     		sub	r3, r3, r4
 796 0484 D214     		asr	r2, r2, #19
 797 0486 9B1A     		sub	r3, r3, r2
 798 0488 1B04     		lsl	r3, r3, #16
 799 048a 1B0C     		lsr	r3, r3, #16
 800              		.loc 1 1021 0
 801 048c 5918     		add	r1, r3, r1
 802 048e 3952     		strh	r1, [r7, r0]
 803              		.loc 1 1025 0
 804 0490 4A24     		mov	r4, #74
 805 0492 3A5B     		ldrh	r2, [r7, r4]
 806              		.loc 1 1026 0
 807 0494 1104     		lsl	r1, r2, #16
 808 0496 8914     		asr	r1, r1, #18
 809 0498 1B04     		lsl	r3, r3, #16
 810 049a 1B14     		asr	r3, r3, #16
 811 049c 521A     		sub	r2, r2, r1
 812 049e D917     		asr	r1, r3, #31
 813 04a0 5B18     		add	r3, r3, r1
 814 04a2 4B40     		eor	r3, r3, r1
 815 04a4 D218     		add	r2, r2, r3
 816 04a6 1204     		lsl	r2, r2, #16
 817 04a8 120C     		lsr	r2, r2, #16
 818 04aa 3A53     		strh	r2, [r7, r4]
 819              		.loc 1 1027 0
 820 04ac 3B5E     		ldrsh	r3, [r7, r0]
 821 04ae DB08     		lsr	r3, r3, #3
 822 04b0 D218     		add	r2, r2, r3
 823 04b2 4C23     		mov	r3, #76
 824 04b4 FA52     		strh	r2, [r7, r3]
 825              		.loc 1 1032 0
 826 04b6 0023     		mov	r3, #0
 827 04b8 3B64     		str	r3, [r7, #64]
 828              	.LVL53:
 829              	.L27:
 830              		.loc 1 1038 0
 831 04ba 5F4B     		ldr	r3, .L104+8
 832 04bc 1888     		ldrh	r0, [r3]
 833              	.LVL54:
 834 04be 0028     		cmp	r0, #0
 835 04c0 00D1     		bne	.LCB801
 836 04c2 74E2     		b	.L50	@long jump
 837              	.LCB801:
 838              		.loc 1 1069 0
 839 04c4 BA6A     		ldr	r2, [r7, #40]
 840 04c6 5D4B     		ldr	r3, .L104+12
 841 04c8 1968     		ldr	r1, [r3]
 842 04ca CB43     		mvn	r3, r1
 843 04cc D342     		cmn	r3, r2
 844 04ce 32D4     		bmi	.L51
 845 04d0 531C     		add	r3, r2, #1
 846 04d2 5B1A     		sub	r3, r3, r1
 847 04d4 1B1A     		sub	r3, r3, r0
 848 04d6 002B     		cmp	r3, #0
 849 04d8 2DDC     		bgt	.L51
 850              		.loc 1 1090 0
 851 04da 511A     		sub	r1, r2, r1
 852              	.LVL55:
 853              		.loc 1 1091 0
 854 04dc 584B     		ldr	r3, .L104+16
 855 04de 5C68     		ldr	r4, [r3, #4]
 856              	.LVL56:
 857              		.loc 1 1094 0
 858 04e0 6289     		ldrh	r2, [r4, #10]
 859 04e2 9142     		cmp	r1, r2
 860 04e4 12DD     		ble	.L52
 861              		.loc 1 1096 0
 862 04e6 2389     		ldrh	r3, [r4, #8]
 863 04e8 5B1A     		sub	r3, r3, r1
 864 04ea 1B04     		lsl	r3, r3, #16
 865 04ec 1B0C     		lsr	r3, r3, #16
 866              	.LVL57:
 867              		.loc 1 1103 0
 868 04ee 0020     		mov	r0, #0
 869              	.L53:
 870              		.loc 1 1098 0
 871 04f0 891A     		sub	r1, r1, r2
 872              		.loc 1 1102 0
 873 04f2 2381     		strh	r3, [r4, #8]
 874              		.loc 1 1103 0
 875 04f4 6081     		strh	r0, [r4, #10]
 876              		.loc 1 1104 0
 877 04f6 2468     		ldr	r4, [r4]
 878              		.loc 1 1097 0
 879 04f8 6289     		ldrh	r2, [r4, #10]
 880 04fa 8A42     		cmp	r2, r1
 881 04fc F8DB     		blt	.L53
 882              		.loc 1 1106 0
 883 04fe 4942     		neg	r1, r1
 884              	.LVL58:
 885 0500 0904     		lsl	r1, r1, #16
 886 0502 0914     		asr	r1, r1, #16
 887 0504 201C     		mov	r0, r4
 888 0506 FFF7FEFF 		bl	pbuf_header
 889              	.LVL59:
 890 050a 05E0     		b	.L54
 891              	.LVL60:
 892              	.L52:
 893              		.loc 1 1111 0
 894 050c 4942     		neg	r1, r1
 895              	.LVL61:
 896 050e 0904     		lsl	r1, r1, #16
 897 0510 0914     		asr	r1, r1, #16
 898 0512 201C     		mov	r0, r4
 899 0514 FFF7FEFF 		bl	pbuf_header
 900              	.L54:
 901              		.loc 1 1118 0
 902 0518 494A     		ldr	r2, .L104+16
 903 051a 6368     		ldr	r3, [r4, #4]
 904 051c 9360     		str	r3, [r2, #8]
 905              		.loc 1 1119 0
 906 051e 474C     		ldr	r4, .L104+12
 907              	.LVL62:
 908 0520 2388     		ldrh	r3, [r4]
 909 0522 9189     		ldrh	r1, [r2, #12]
 910 0524 388D     		ldrh	r0, [r7, #40]
 911 0526 5B18     		add	r3, r3, r1
 912 0528 1B1A     		sub	r3, r3, r0
 913 052a 9381     		strh	r3, [r2, #12]
 914              		.loc 1 1120 0
 915 052c 1269     		ldr	r2, [r2, #16]
 916 052e BB6A     		ldr	r3, [r7, #40]
 917 0530 2360     		str	r3, [r4]
 918 0532 5360     		str	r3, [r2, #4]
 919 0534 09E0     		b	.L55
 920              	.L51:
 921              		.loc 1 1123 0
 922 0536 9142     		cmp	r1, r2
 923 0538 0DD5     		bpl	.L56
 924              		.loc 1 1128 0
 925 053a 2623     		mov	r3, #38
 926 053c FA5C     		ldrb	r2, [r7, r3]
 927 053e 0221     		mov	r1, #2
 928 0540 0A43     		orr	r2, r2, r1
 929 0542 FA54     		strb	r2, [r7, r3]
 930 0544 381C     		mov	r0, r7
 931 0546 FFF7FEFF 		bl	tcp_output
 932              	.L55:
 933              		.loc 1 1135 0
 934 054a 3C4B     		ldr	r3, .L104+12
 935 054c 1968     		ldr	r1, [r3]
 936 054e BA6A     		ldr	r2, [r7, #40]
 937 0550 9142     		cmp	r1, r2
 938 0552 00D5     		bpl	.LCB902
 939 0554 27E2     		b	.L57	@long jump
 940              	.LCB902:
 941              	.L56:
 942 0556 BB8D     		ldrh	r3, [r7, #44]
 943 0558 CB1A     		sub	r3, r1, r3
 944 055a 0133     		add	r3, r3, #1
 945 055c 9B1A     		sub	r3, r3, r2
 946 055e 002B     		cmp	r3, #0
 947 0560 00DD     		ble	.LCB910
 948 0562 20E2     		b	.L57	@long jump
 949              	.LCB910:
 950              		.loc 1 1137 0
 951 0564 9142     		cmp	r1, r2
 952 0566 00D0     		beq	.LCB912
 953 0568 8EE1     		b	.L58	@long jump
 954              	.LCB912:
 955              		.loc 1 1141 0
 956 056a 354B     		ldr	r3, .L104+16
 957 056c 9C89     		ldrh	r4, [r3, #12]
 958 056e 1B69     		ldr	r3, [r3, #16]
 959 0570 9889     		ldrh	r0, [r3, #12]
 960 0572 FFF7FEFF 		bl	ntohs
 961 0576 0323     		mov	r3, #3
 962 0578 1840     		and	r0, r0, r3
 963 057a 431E     		sub	r3, r0, #1
 964 057c 9841     		sbc	r0, r0, r3
 965 057e 2418     		add	r4, r4, r0
 966 0580 2404     		lsl	r4, r4, #16
 967 0582 240C     		lsr	r4, r4, #16
 968 0584 2C4B     		ldr	r3, .L104+8
 969 0586 1C80     		strh	r4, [r3]
 970              		.loc 1 1143 0
 971 0588 BB8D     		ldrh	r3, [r7, #44]
 972 058a A342     		cmp	r3, r4
 973 058c 36D2     		bcs	.L59
 974              		.loc 1 1148 0
 975 058e 2C4B     		ldr	r3, .L104+16
 976 0590 1B69     		ldr	r3, [r3, #16]
 977 0592 9889     		ldrh	r0, [r3, #12]
 978 0594 FFF7FEFF 		bl	ntohs
 979 0598 C207     		lsl	r2, r0, #31
 980 059a 11D5     		bpl	.L60
 981              		.loc 1 1151 0
 982 059c 284D     		ldr	r5, .L104+16
 983              	.LVL63:
 984 059e 2B69     		ldr	r3, [r5, #16]
 985 05a0 9E89     		ldrh	r6, [r3, #12]
 986 05a2 2848     		ldr	r0, .L104+20
 987 05a4 FFF7FEFF 		bl	htons
 988 05a8 041C     		mov	r4, r0
 989 05aa 2D69     		ldr	r5, [r5, #16]
 990 05ac A889     		ldrh	r0, [r5, #12]
 991 05ae FFF7FEFF 		bl	ntohs
 992 05b2 3E23     		mov	r3, #62
 993 05b4 1840     		and	r0, r0, r3
 994 05b6 FFF7FEFF 		bl	htons
 995 05ba 3440     		and	r4, r4, r6
 996 05bc 2043     		orr	r0, r0, r4
 997 05be A881     		strh	r0, [r5, #12]
 998              	.LVL64:
 999              	.L60:
 1000              		.loc 1 1154 0
 1001 05c0 1F4A     		ldr	r2, .L104+16
 1002 05c2 BB8D     		ldrh	r3, [r7, #44]
 1003 05c4 9381     		strh	r3, [r2, #12]
 1004              		.loc 1 1155 0
 1005 05c6 1369     		ldr	r3, [r2, #16]
 1006 05c8 9889     		ldrh	r0, [r3, #12]
 1007 05ca FFF7FEFF 		bl	ntohs
 1008 05ce 8307     		lsl	r3, r0, #30
 1009 05d0 03D5     		bpl	.L61
 1010              		.loc 1 1156 0
 1011 05d2 1B4A     		ldr	r2, .L104+16
 1012 05d4 9389     		ldrh	r3, [r2, #12]
 1013 05d6 013B     		sub	r3, r3, #1
 1014 05d8 9381     		strh	r3, [r2, #12]
 1015              	.L61:
 1016              		.loc 1 1158 0
 1017 05da 194C     		ldr	r4, .L104+16
 1018 05dc 6068     		ldr	r0, [r4, #4]
 1019 05de A189     		ldrh	r1, [r4, #12]
 1020 05e0 FFF7FEFF 		bl	pbuf_realloc
 1021              		.loc 1 1159 0
 1022 05e4 A589     		ldrh	r5, [r4, #12]
 1023              	.LVL65:
 1024 05e6 2369     		ldr	r3, [r4, #16]
 1025 05e8 9889     		ldrh	r0, [r3, #12]
 1026 05ea FFF7FEFF 		bl	ntohs
 1027 05ee 124A     		ldr	r2, .L104+8
 1028 05f0 0323     		mov	r3, #3
 1029 05f2 1840     		and	r0, r0, r3
 1030 05f4 431E     		sub	r3, r0, #1
 1031 05f6 9841     		sbc	r0, r0, r3
 1032 05f8 2D18     		add	r5, r5, r0
 1033 05fa 1580     		strh	r5, [r2]
 1034              	.LVL66:
 1035              	.L59:
 1036              		.loc 1 1164 0
 1037 05fc 8023     		mov	r3, #128
 1038 05fe FB58     		ldr	r3, [r7, r3]
 1039 0600 002B     		cmp	r3, #0
 1040 0602 00D1     		bne	.LCB997
 1041 0604 AAE0     		b	.L62	@long jump
 1042              	.LCB997:
 1043              		.loc 1 1165 0
 1044 0606 0E4B     		ldr	r3, .L104+16
 1045 0608 1B69     		ldr	r3, [r3, #16]
 1046 060a 9889     		ldrh	r0, [r3, #12]
 1047 060c FFF7FEFF 		bl	ntohs
 1048 0610 C107     		lsl	r1, r0, #31
 1049 0612 19D5     		bpl	.L63
 1050              		.loc 1 1175 0
 1051 0614 8023     		mov	r3, #128
 1052 0616 F858     		ldr	r0, [r7, r3]
 1053 0618 0028     		cmp	r0, #0
 1054 061a 00D1     		bne	.LCB1009
 1055 061c 9EE0     		b	.L62	@long jump
 1056              	.LCB1009:
 1057              	.LBB3:
 1058              		.loc 1 1177 0
 1059 061e 8024     		mov	r4, #128
 1060              	.L92:
 1061 0620 0368     		ldr	r3, [r0]
 1062 0622 3B51     		str	r3, [r7, r4]
 1063              		.loc 1 1178 0
 1064 0624 FFF7FEFF 		bl	tcp_seg_free
 1065              	.LBE3:
 1066              		.loc 1 1175 0
 1067 0628 3859     		ldr	r0, [r7, r4]
 1068 062a 0028     		cmp	r0, #0
 1069 062c F8D1     		bne	.L92
 1070 062e 95E0     		b	.L62
 1071              	.L105:
 1072              		.align	2
 1073              	.L104:
 1074 0630 20000000 		.word	ackno
 1075 0634 00000000 		.word	tcp_ticks
 1076 0638 26000000 		.word	tcplen
 1077 063c 1C000000 		.word	seqno
 1078 0640 00000000 		.word	inseg
 1079 0644 C0FF0000 		.word	65472
 1080              	.L63:
 1081              	.LBB4:
 1082              		.loc 1 1182 0
 1083 0648 8023     		mov	r3, #128
 1084 064a FE58     		ldr	r6, [r7, r3]
 1085              	.LVL67:
 1086              		.loc 1 1188 0
 1087 064c 002E     		cmp	r6, #0
 1088 064e 00D1     		bne	.LCB1041
 1089 0650 82E0     		b	.L65	@long jump
 1090              	.LCB1041:
 1091 0652 3169     		ldr	r1, [r6, #16]
 1092 0654 BE4B     		ldr	r3, .L106
 1093 0656 1A88     		ldrh	r2, [r3]
 1094 0658 4B68     		ldr	r3, [r1, #4]
 1095 065a D21A     		sub	r2, r2, r3
 1096 065c BD4B     		ldr	r3, .L106+4
 1097 065e 1B68     		ldr	r3, [r3]
 1098 0660 D218     		add	r2, r2, r3
 1099 0662 B389     		ldrh	r3, [r6, #12]
 1100 0664 9A42     		cmp	r2, r3
 1101 0666 4BD4     		bmi	.L66
 1102              		.loc 1 1192 0
 1103 0668 0122     		mov	r2, #1
 1104 066a 9146     		mov	r9, r2
 1105 066c BA4B     		ldr	r3, .L106+8
 1106 066e 9B46     		mov	fp, r3
 1107              		.loc 1 1194 0
 1108 0670 9A46     		mov	sl, r3
 1109              		.loc 1 1196 0
 1110 0672 B74A     		ldr	r2, .L106
 1111 0674 0092     		str	r2, [sp]
 1112              	.LVL68:
 1113              	.L93:
 1114              		.loc 1 1188 0
 1115 0676 B046     		mov	r8, r6
 1116              		.loc 1 1192 0
 1117 0678 8889     		ldrh	r0, [r1, #12]
 1118 067a FFF7FEFF 		bl	ntohs
 1119 067e 4B46     		mov	r3, r9
 1120 0680 1842     		tst	r0, r3
 1121 0682 2BD0     		beq	.L67
 1122              	.LVL69:
 1123 0684 5946     		mov	r1, fp
 1124 0686 0B69     		ldr	r3, [r1, #16]
 1125 0688 9889     		ldrh	r0, [r3, #12]
 1126 068a FFF7FEFF 		bl	ntohs
 1127 068e 0222     		mov	r2, #2
 1128 0690 1042     		tst	r0, r2
 1129 0692 23D1     		bne	.L67
 1130              		.loc 1 1194 0
 1131 0694 5146     		mov	r1, sl
 1132 0696 0B69     		ldr	r3, [r1, #16]
 1133 0698 9E89     		ldrh	r6, [r3, #12]
 1134 069a B048     		ldr	r0, .L106+12
 1135 069c FFF7FEFF 		bl	htons
 1136 06a0 041C     		mov	r4, r0
 1137 06a2 5246     		mov	r2, sl
 1138 06a4 1569     		ldr	r5, [r2, #16]
 1139              	.LVL70:
 1140 06a6 A889     		ldrh	r0, [r5, #12]
 1141 06a8 FFF7FEFF 		bl	ntohs
 1142 06ac 3E23     		mov	r3, #62
 1143 06ae 1840     		and	r0, r0, r3
 1144 06b0 0121     		mov	r1, #1
 1145 06b2 0843     		orr	r0, r0, r1
 1146 06b4 0004     		lsl	r0, r0, #16
 1147 06b6 000C     		lsr	r0, r0, #16
 1148 06b8 FFF7FEFF 		bl	htons
 1149 06bc 3440     		and	r4, r4, r6
 1150 06be 2043     		orr	r0, r0, r4
 1151 06c0 A881     		strh	r0, [r5, #12]
 1152              		.loc 1 1196 0
 1153 06c2 5246     		mov	r2, sl
 1154 06c4 9489     		ldrh	r4, [r2, #12]
 1155 06c6 1369     		ldr	r3, [r2, #16]
 1156 06c8 9889     		ldrh	r0, [r3, #12]
 1157 06ca FFF7FEFF 		bl	ntohs
 1158 06ce 0323     		mov	r3, #3
 1159 06d0 1840     		and	r0, r0, r3
 1160 06d2 431E     		sub	r3, r0, #1
 1161 06d4 9841     		sbc	r0, r0, r3
 1162 06d6 2418     		add	r4, r4, r0
 1163 06d8 009B     		ldr	r3, [sp]
 1164 06da 1C80     		strh	r4, [r3]
 1165              	.LVL71:
 1166              	.L67:
 1167              		.loc 1 1199 0
 1168 06dc 4146     		mov	r1, r8
 1169 06de 0E68     		ldr	r6, [r1]
 1170              	.LVL72:
 1171              		.loc 1 1200 0
 1172 06e0 4046     		mov	r0, r8
 1173 06e2 FFF7FEFF 		bl	tcp_seg_free
 1174              		.loc 1 1188 0
 1175 06e6 002E     		cmp	r6, #0
 1176 06e8 36D0     		beq	.L65
 1177 06ea 3169     		ldr	r1, [r6, #16]
 1178 06ec 984B     		ldr	r3, .L106
 1179 06ee 1A88     		ldrh	r2, [r3]
 1180 06f0 4B68     		ldr	r3, [r1, #4]
 1181 06f2 D21A     		sub	r2, r2, r3
 1182 06f4 974B     		ldr	r3, .L106+4
 1183 06f6 1B68     		ldr	r3, [r3]
 1184 06f8 D218     		add	r2, r2, r3
 1185 06fa B389     		ldrh	r3, [r6, #12]
 1186 06fc 9A42     		cmp	r2, r3
 1187 06fe BAD5     		bpl	.L93
 1188              	.L66:
 1189              		.loc 1 1206 0
 1190 0700 944B     		ldr	r3, .L106+4
 1191 0702 1968     		ldr	r1, [r3]
 1192 0704 924B     		ldr	r3, .L106
 1193 0706 1B88     		ldrh	r3, [r3]
 1194 0708 3269     		ldr	r2, [r6, #16]
 1195 070a 5268     		ldr	r2, [r2, #4]
 1196 070c 9B1A     		sub	r3, r3, r2
 1197 070e 5B18     		add	r3, r3, r1
 1198 0710 002B     		cmp	r3, #0
 1199 0712 21DD     		ble	.L65
 1200              		.loc 1 1210 0
 1201 0714 904A     		ldr	r2, .L106+8
 1202 0716 8023     		mov	r3, #128
 1203 0718 FB58     		ldr	r3, [r7, r3]
 1204 071a 1B69     		ldr	r3, [r3, #16]
 1205 071c 9B88     		ldrh	r3, [r3, #4]
 1206 071e 5B1A     		sub	r3, r3, r1
 1207 0720 9381     		strh	r3, [r2, #12]
 1208              		.loc 1 1211 0
 1209 0722 1369     		ldr	r3, [r2, #16]
 1210 0724 9889     		ldrh	r0, [r3, #12]
 1211 0726 FFF7FEFF 		bl	ntohs
 1212 072a 8207     		lsl	r2, r0, #30
 1213 072c 03D5     		bpl	.L69
 1214              		.loc 1 1212 0
 1215 072e 8A4A     		ldr	r2, .L106+8
 1216 0730 9389     		ldrh	r3, [r2, #12]
 1217 0732 013B     		sub	r3, r3, #1
 1218 0734 9381     		strh	r3, [r2, #12]
 1219              	.L69:
 1220              		.loc 1 1214 0
 1221 0736 884C     		ldr	r4, .L106+8
 1222 0738 6068     		ldr	r0, [r4, #4]
 1223 073a A189     		ldrh	r1, [r4, #12]
 1224 073c FFF7FEFF 		bl	pbuf_realloc
 1225              		.loc 1 1215 0
 1226 0740 A589     		ldrh	r5, [r4, #12]
 1227              	.LVL73:
 1228 0742 2369     		ldr	r3, [r4, #16]
 1229 0744 9889     		ldrh	r0, [r3, #12]
 1230 0746 FFF7FEFF 		bl	ntohs
 1231 074a 814A     		ldr	r2, .L106
 1232 074c 0323     		mov	r3, #3
 1233 074e 1840     		and	r0, r0, r3
 1234 0750 431E     		sub	r3, r0, #1
 1235 0752 9841     		sbc	r0, r0, r3
 1236 0754 2D18     		add	r5, r5, r0
 1237 0756 1580     		strh	r5, [r2]
 1238              	.LVL74:
 1239              	.L65:
 1240              		.loc 1 1219 0
 1241 0758 8023     		mov	r3, #128
 1242 075a FE50     		str	r6, [r7, r3]
 1243              	.L62:
 1244              	.LBE4:
 1245              		.loc 1 1224 0
 1246 075c 7C49     		ldr	r1, .L106
 1247 075e 0B88     		ldrh	r3, [r1]
 1248 0760 7C4A     		ldr	r2, .L106+4
 1249 0762 1268     		ldr	r2, [r2]
 1250 0764 9B18     		add	r3, r3, r2
 1251 0766 BB62     		str	r3, [r7, #40]
 1252              		.loc 1 1228 0
 1253 0768 BB8D     		ldrh	r3, [r7, #44]
 1254 076a 0A88     		ldrh	r2, [r1]
 1255 076c 9B1A     		sub	r3, r3, r2
 1256 076e BB85     		strh	r3, [r7, #44]
 1257              		.loc 1 1230 0
 1258 0770 381C     		mov	r0, r7
 1259 0772 FFF7FEFF 		bl	tcp_update_rcv_ann_wnd
 1260              		.loc 1 1241 0
 1261 0776 784B     		ldr	r3, .L106+8
 1262 0778 5A68     		ldr	r2, [r3, #4]
 1263 077a 1389     		ldrh	r3, [r2, #8]
 1264 077c 002B     		cmp	r3, #0
 1265 077e 04D0     		beq	.L70
 1266              		.loc 1 1242 0
 1267 0780 774B     		ldr	r3, .L106+16
 1268 0782 1A60     		str	r2, [r3]
 1269              		.loc 1 1246 0
 1270 0784 744A     		ldr	r2, .L106+8
 1271 0786 0023     		mov	r3, #0
 1272 0788 5360     		str	r3, [r2, #4]
 1273              	.L70:
 1274              		.loc 1 1248 0
 1275 078a 734B     		ldr	r3, .L106+8
 1276 078c 1B69     		ldr	r3, [r3, #16]
 1277 078e 9889     		ldrh	r0, [r3, #12]
 1278 0790 FFF7FEFF 		bl	ntohs
 1279 0794 C307     		lsl	r3, r0, #31
 1280 0796 04D5     		bpl	.L71
 1281              		.loc 1 1250 0
 1282 0798 724B     		ldr	r3, .L106+20
 1283 079a 1A78     		ldrb	r2, [r3]
 1284 079c 2021     		mov	r1, #32
 1285 079e 0A43     		orr	r2, r2, r1
 1286 07a0 1A70     		strb	r2, [r3]
 1287              	.L71:
 1288              		.loc 1 1256 0
 1289 07a2 8023     		mov	r3, #128
 1290 07a4 FE58     		ldr	r6, [r7, r3]
 1291              	.LVL75:
 1292 07a6 002E     		cmp	r6, #0
 1293 07a8 5AD0     		beq	.L72
 1294 07aa 3369     		ldr	r3, [r6, #16]
 1295 07ac 5A68     		ldr	r2, [r3, #4]
 1296 07ae BB6A     		ldr	r3, [r7, #40]
 1297 07b0 9A42     		cmp	r2, r3
 1298 07b2 55D1     		bne	.L72
 1299              		.loc 1 1260 0
 1300 07b4 6749     		ldr	r1, .L106+4
 1301 07b6 8A46     		mov	sl, r1
 1302              		.loc 1 1262 0
 1303 07b8 0323     		mov	r3, #3
 1304 07ba 9946     		mov	r9, r3
 1305              		.loc 1 1272 0
 1306 07bc 6849     		ldr	r1, .L106+16
 1307 07be 8B46     		mov	fp, r1
 1308              		.loc 1 1275 0
 1309 07c0 0191     		str	r1, [sp, #4]
 1310              		.loc 1 1281 0
 1311 07c2 6849     		ldr	r1, .L106+20
 1312 07c4 8846     		mov	r8, r1
 1313              	.LVL76:
 1314              	.L91:
 1315              		.loc 1 1260 0
 1316 07c6 5346     		mov	r3, sl
 1317 07c8 1A60     		str	r2, [r3]
 1318              		.loc 1 1262 0
 1319 07ca BD6A     		ldr	r5, [r7, #40]
 1320              	.LVL77:
 1321 07cc B489     		ldrh	r4, [r6, #12]
 1322 07ce 3369     		ldr	r3, [r6, #16]
 1323 07d0 9889     		ldrh	r0, [r3, #12]
 1324 07d2 FFF7FEFF 		bl	ntohs
 1325 07d6 4946     		mov	r1, r9
 1326 07d8 0840     		and	r0, r0, r1
 1327 07da 431E     		sub	r3, r0, #1
 1328 07dc 9841     		sbc	r0, r0, r3
 1329 07de 0019     		add	r0, r0, r4
 1330 07e0 4019     		add	r0, r0, r5
 1331 07e2 B862     		str	r0, [r7, #40]
 1332              		.loc 1 1265 0
 1333 07e4 BC8D     		ldrh	r4, [r7, #44]
 1334 07e6 B589     		ldrh	r5, [r6, #12]
 1335 07e8 3369     		ldr	r3, [r6, #16]
 1336 07ea 9889     		ldrh	r0, [r3, #12]
 1337 07ec FFF7FEFF 		bl	ntohs
 1338 07f0 4A46     		mov	r2, r9
 1339 07f2 1040     		and	r0, r0, r2
 1340 07f4 431E     		sub	r3, r0, #1
 1341 07f6 9841     		sbc	r0, r0, r3
 1342 07f8 641B     		sub	r4, r4, r5
 1343 07fa 241A     		sub	r4, r4, r0
 1344 07fc BC85     		strh	r4, [r7, #44]
 1345              		.loc 1 1267 0
 1346 07fe 381C     		mov	r0, r7
 1347 0800 FFF7FEFF 		bl	tcp_update_rcv_ann_wnd
 1348              		.loc 1 1269 0
 1349 0804 7168     		ldr	r1, [r6, #4]
 1350 0806 0B89     		ldrh	r3, [r1, #8]
 1351 0808 002B     		cmp	r3, #0
 1352 080a 0AD0     		beq	.L73
 1353              		.loc 1 1272 0
 1354 080c 5B46     		mov	r3, fp
 1355 080e 1868     		ldr	r0, [r3]
 1356 0810 0028     		cmp	r0, #0
 1357 0812 02D0     		beq	.L74
 1358              		.loc 1 1273 0
 1359 0814 FFF7FEFF 		bl	pbuf_cat
 1360 0818 01E0     		b	.L75
 1361              	.L74:
 1362              		.loc 1 1275 0
 1363 081a 019A     		ldr	r2, [sp, #4]
 1364 081c 1160     		str	r1, [r2]
 1365              	.L75:
 1366              		.loc 1 1277 0
 1367 081e 0023     		mov	r3, #0
 1368 0820 7360     		str	r3, [r6, #4]
 1369              	.L73:
 1370              		.loc 1 1279 0
 1371 0822 3369     		ldr	r3, [r6, #16]
 1372 0824 9889     		ldrh	r0, [r3, #12]
 1373 0826 FFF7FEFF 		bl	ntohs
 1374 082a 0121     		mov	r1, #1
 1375 082c 0842     		tst	r0, r1
 1376 082e 09D0     		beq	.L76
 1377              		.loc 1 1281 0
 1378 0830 4246     		mov	r2, r8
 1379 0832 1378     		ldrb	r3, [r2]
 1380 0834 2021     		mov	r1, #32
 1381 0836 0B43     		orr	r3, r3, r1
 1382 0838 1370     		strb	r3, [r2]
 1383              		.loc 1 1282 0
 1384 083a 3B69     		ldr	r3, [r7, #16]
 1385 083c 042B     		cmp	r3, #4
 1386 083e 01D1     		bne	.L76
 1387              		.loc 1 1283 0
 1388 0840 0723     		mov	r3, #7
 1389 0842 3B61     		str	r3, [r7, #16]
 1390              	.L76:
 1391              		.loc 1 1287 0
 1392 0844 8024     		mov	r4, #128
 1393 0846 3368     		ldr	r3, [r6]
 1394 0848 3B51     		str	r3, [r7, r4]
 1395              		.loc 1 1288 0
 1396 084a 301C     		mov	r0, r6
 1397 084c FFF7FEFF 		bl	tcp_seg_free
 1398              		.loc 1 1256 0
 1399 0850 3E59     		ldr	r6, [r7, r4]
 1400 0852 002E     		cmp	r6, #0
 1401 0854 04D0     		beq	.L72
 1402 0856 3369     		ldr	r3, [r6, #16]
 1403 0858 5A68     		ldr	r2, [r3, #4]
 1404 085a BB6A     		ldr	r3, [r7, #40]
 1405 085c 9A42     		cmp	r2, r3
 1406 085e B2D0     		beq	.L91
 1407              	.LVL78:
 1408              	.L72:
 1409              		.loc 1 1294 0
 1410 0860 2623     		mov	r3, #38
 1411 0862 FA5C     		ldrb	r2, [r7, r3]
 1412 0864 D307     		lsl	r3, r2, #31
 1413 0866 0AD5     		bpl	.L78
 1414 0868 0123     		mov	r3, #1
 1415 086a 9A43     		bic	r2, r2, r3
 1416 086c 131C     		mov	r3, r2
 1417 086e 0222     		mov	r2, #2
 1418 0870 1343     		orr	r3, r3, r2
 1419 0872 2622     		mov	r2, #38
 1420 0874 BB54     		strb	r3, [r7, r2]
 1421 0876 381C     		mov	r0, r7
 1422 0878 FFF7FEFF 		bl	tcp_output
 1423 087c AAE0     		b	.L90
 1424              	.L78:
 1425 087e 0123     		mov	r3, #1
 1426 0880 1A43     		orr	r2, r2, r3
 1427 0882 2623     		mov	r3, #38
 1428 0884 FA54     		strb	r2, [r7, r3]
 1429 0886 A5E0     		b	.L90
 1430              	.LVL79:
 1431              	.L58:
 1432              		.loc 1 1298 0
 1433 0888 381C     		mov	r0, r7
 1434 088a FFF7FEFF 		bl	tcp_send_empty_ack
 1435              		.loc 1 1301 0
 1436 088e 8023     		mov	r3, #128
 1437 0890 FD58     		ldr	r5, [r7, r3]
 1438              	.LVL80:
 1439 0892 002D     		cmp	r5, #0
 1440 0894 05D1     		bne	.L80
 1441              		.loc 1 1302 0
 1442 0896 3048     		ldr	r0, .L106+8
 1443 0898 FFF7FEFF 		bl	tcp_seg_copy
 1444 089c 8023     		mov	r3, #128
 1445 089e F850     		str	r0, [r7, r3]
 1446 08a0 98E0     		b	.L90
 1447              	.L80:
 1448              		.loc 1 1318 0
 1449 08a2 2C4B     		ldr	r3, .L106+4
 1450 08a4 1968     		ldr	r1, [r3]
 1451              		.loc 1 1360 0
 1452 08a6 4E1C     		add	r6, r1, #1
 1453 08a8 0024     		mov	r4, #0
 1454              	.LVL81:
 1455              	.L88:
 1456              		.loc 1 1318 0
 1457 08aa 2869     		ldr	r0, [r5, #16]
 1458 08ac 4268     		ldr	r2, [r0, #4]
 1459 08ae 8A42     		cmp	r2, r1
 1460 08b0 15D1     		bne	.L81
 1461              		.loc 1 1323 0
 1462 08b2 294B     		ldr	r3, .L106+8
 1463 08b4 9A89     		ldrh	r2, [r3, #12]
 1464 08b6 AB89     		ldrh	r3, [r5, #12]
 1465 08b8 9A42     		cmp	r2, r3
 1466 08ba 00D8     		bhi	.LCB1413
 1467 08bc 8AE0     		b	.L90	@long jump
 1468              	.LCB1413:
 1469              		.loc 1 1327 0
 1470 08be 2648     		ldr	r0, .L106+8
 1471 08c0 FFF7FEFF 		bl	tcp_seg_copy
 1472              		.loc 1 1328 0
 1473 08c4 0028     		cmp	r0, #0
 1474 08c6 00D1     		bne	.LCB1417
 1475 08c8 84E0     		b	.L90	@long jump
 1476              	.LCB1417:
 1477              	.LVL82:
 1478              		.loc 1 1329 0
 1479 08ca 002C     		cmp	r4, #0
 1480 08cc 01D0     		beq	.L82
 1481              		.loc 1 1330 0
 1482 08ce 2060     		str	r0, [r4]
 1483 08d0 01E0     		b	.L83
 1484              	.L82:
 1485              		.loc 1 1332 0
 1486 08d2 8023     		mov	r3, #128
 1487 08d4 F850     		str	r0, [r7, r3]
 1488              	.L83:
 1489              		.loc 1 1334 0
 1490 08d6 291C     		mov	r1, r5
 1491 08d8 FFF7EAFB 		bl	tcp_oos_insert_segment
 1492              	.LVL83:
 1493 08dc 7AE0     		b	.L90
 1494              	.LVL84:
 1495              	.L81:
 1496              		.loc 1 1344 0
 1497 08de 002C     		cmp	r4, #0
 1498 08e0 0CD1     		bne	.L84
 1499              		.loc 1 1345 0
 1500 08e2 9142     		cmp	r1, r2
 1501 08e4 2ED5     		bpl	.L85
 1502              		.loc 1 1350 0
 1503 08e6 1C48     		ldr	r0, .L106+8
 1504 08e8 FFF7FEFF 		bl	tcp_seg_copy
 1505              		.loc 1 1351 0
 1506 08ec 0028     		cmp	r0, #0
 1507 08ee 71D0     		beq	.L90
 1508              	.LVL85:
 1509              		.loc 1 1352 0
 1510 08f0 8023     		mov	r3, #128
 1511 08f2 F850     		str	r0, [r7, r3]
 1512              		.loc 1 1353 0
 1513 08f4 291C     		mov	r1, r5
 1514 08f6 FFF7DBFB 		bl	tcp_oos_insert_segment
 1515              	.LVL86:
 1516 08fa 6BE0     		b	.L90
 1517              	.LVL87:
 1518              	.L84:
 1519              		.loc 1 1360 0
 1520 08fc 2369     		ldr	r3, [r4, #16]
 1521 08fe 5B68     		ldr	r3, [r3, #4]
 1522 0900 DB43     		mvn	r3, r3
 1523 0902 CB42     		cmn	r3, r1
 1524 0904 1ED4     		bmi	.L85
 1525 0906 B31A     		sub	r3, r6, r2
 1526 0908 002B     		cmp	r3, #0
 1527 090a 1BDC     		bgt	.L85
 1528              		.loc 1 1366 0
 1529 090c 1248     		ldr	r0, .L106+8
 1530 090e FFF7FEFF 		bl	tcp_seg_copy
 1531 0912 061C     		mov	r6, r0
 1532              	.LVL88:
 1533              		.loc 1 1367 0
 1534 0914 0028     		cmp	r0, #0
 1535 0916 5DD0     		beq	.L90
 1536              	.LVL89:
 1537              		.loc 1 1368 0
 1538 0918 2369     		ldr	r3, [r4, #16]
 1539 091a 5A68     		ldr	r2, [r3, #4]
 1540 091c 0D4B     		ldr	r3, .L106+4
 1541 091e 1968     		ldr	r1, [r3]
 1542 0920 A389     		ldrh	r3, [r4, #12]
 1543 0922 5B1A     		sub	r3, r3, r1
 1544 0924 9B18     		add	r3, r3, r2
 1545 0926 002B     		cmp	r3, #0
 1546 0928 06DD     		ble	.L86
 1547              		.loc 1 1370 0
 1548 092a 891A     		sub	r1, r1, r2
 1549 092c 0904     		lsl	r1, r1, #16
 1550 092e 090C     		lsr	r1, r1, #16
 1551 0930 A181     		strh	r1, [r4, #12]
 1552              		.loc 1 1371 0
 1553 0932 6068     		ldr	r0, [r4, #4]
 1554              	.LVL90:
 1555 0934 FFF7FEFF 		bl	pbuf_realloc
 1556              	.LVL91:
 1557              	.L86:
 1558              		.loc 1 1373 0
 1559 0938 2660     		str	r6, [r4]
 1560              		.loc 1 1374 0
 1561 093a 301C     		mov	r0, r6
 1562 093c 291C     		mov	r1, r5
 1563 093e FFF7B7FB 		bl	tcp_oos_insert_segment
 1564 0942 47E0     		b	.L90
 1565              	.LVL92:
 1566              	.L85:
 1567              		.loc 1 1382 0
 1568 0944 2B68     		ldr	r3, [r5]
 1569              	.LVL93:
 1570 0946 002B     		cmp	r3, #0
 1571 0948 0ED0     		beq	.L87
 1572 094a 2C1C     		mov	r4, r5
 1573 094c 1D1C     		mov	r5, r3
 1574 094e ACE7     		b	.L88
 1575              	.L107:
 1576              		.align	2
 1577              	.L106:
 1578 0950 26000000 		.word	tcplen
 1579 0954 1C000000 		.word	seqno
 1580 0958 00000000 		.word	inseg
 1581 095c C0FF0000 		.word	65472
 1582 0960 2C000000 		.word	recv_data
 1583 0964 28000000 		.word	recv_flags
 1584              	.LVL94:
 1585              	.L87:
 1586 0968 8B1A     		sub	r3, r1, r2
 1587              	.LVL95:
 1588 096a 002B     		cmp	r3, #0
 1589 096c 32DD     		ble	.L90
 1590              		.loc 1 1384 0
 1591 096e 8089     		ldrh	r0, [r0, #12]
 1592 0970 FFF7FEFF 		bl	ntohs
 1593 0974 C107     		lsl	r1, r0, #31
 1594 0976 2DD4     		bmi	.L90
 1595              		.loc 1 1388 0
 1596 0978 1B48     		ldr	r0, .L108
 1597 097a FFF7FEFF 		bl	tcp_seg_copy
 1598 097e 2860     		str	r0, [r5]
 1599              	.LVL96:
 1600              		.loc 1 1389 0
 1601 0980 0028     		cmp	r0, #0
 1602 0982 27D0     		beq	.L90
 1603              		.loc 1 1390 0
 1604 0984 2B69     		ldr	r3, [r5, #16]
 1605 0986 5A68     		ldr	r2, [r3, #4]
 1606 0988 184B     		ldr	r3, .L108+4
 1607 098a 1968     		ldr	r1, [r3]
 1608 098c AB89     		ldrh	r3, [r5, #12]
 1609 098e 5B1A     		sub	r3, r3, r1
 1610 0990 9B18     		add	r3, r3, r2
 1611 0992 002B     		cmp	r3, #0
 1612 0994 1EDD     		ble	.L90
 1613              		.loc 1 1392 0
 1614 0996 891A     		sub	r1, r1, r2
 1615 0998 0904     		lsl	r1, r1, #16
 1616 099a 090C     		lsr	r1, r1, #16
 1617 099c A981     		strh	r1, [r5, #12]
 1618              		.loc 1 1393 0
 1619 099e 6868     		ldr	r0, [r5, #4]
 1620 09a0 FFF7FEFF 		bl	pbuf_realloc
 1621 09a4 16E0     		b	.L90
 1622              	.LVL97:
 1623              	.L57:
 1624              		.loc 1 1407 0
 1625 09a6 381C     		mov	r0, r7
 1626 09a8 FFF7FEFF 		bl	tcp_send_empty_ack
 1627 09ac 12E0     		b	.L90
 1628              	.L50:
 1629              		.loc 1 1414 0
 1630 09ae 0F4B     		ldr	r3, .L108+4
 1631 09b0 1B68     		ldr	r3, [r3]
 1632 09b2 BA6A     		ldr	r2, [r7, #40]
 1633 09b4 9342     		cmp	r3, r2
 1634 09b6 05D4     		bmi	.L89
 1635 09b8 0133     		add	r3, r3, #1
 1636 09ba 9B1A     		sub	r3, r3, r2
 1637 09bc BA8D     		ldrh	r2, [r7, #44]
 1638 09be 9B1A     		sub	r3, r3, r2
 1639 09c0 002B     		cmp	r3, #0
 1640 09c2 07DD     		ble	.L90
 1641              	.L89:
 1642              		.loc 1 1415 0
 1643 09c4 2623     		mov	r3, #38
 1644 09c6 FA5C     		ldrb	r2, [r7, r3]
 1645 09c8 0221     		mov	r1, #2
 1646 09ca 0A43     		orr	r2, r2, r1
 1647 09cc FA54     		strb	r2, [r7, r3]
 1648 09ce 381C     		mov	r0, r7
 1649 09d0 FFF7FEFF 		bl	tcp_output
 1650              	.LVL98:
 1651              	.L90:
 1652              		.loc 1 1418 0
 1653 09d4 02B0     		add	sp, sp, #8
 1654              		@ sp needed for prologue
 1655              	.LVL99:
 1656              	.LVL100:
 1657              	.LVL101:
 1658              	.LVL102:
 1659              	.LVL103:
 1660 09d6 3CBC     		pop	{r2, r3, r4, r5}
 1661 09d8 9046     		mov	r8, r2
 1662 09da 9946     		mov	r9, r3
 1663 09dc A246     		mov	sl, r4
 1664 09de AB46     		mov	fp, r5
 1665 09e0 F0BC     		pop	{r4, r5, r6, r7}
 1666 09e2 01BC     		pop	{r0}
 1667 09e4 0047     		bx	r0
 1668              	.L109:
 1669 09e6 C046     		.align	2
 1670              	.L108:
 1671 09e8 00000000 		.word	inseg
 1672 09ec 1C000000 		.word	seqno
 1673              	.LFE295:
 1675              		.align	2
 1676              		.global	tcp_input
 1677              		.code	16
 1678              		.thumb_func
 1680              	tcp_input:
 1681              	.LFB290:
 1682              		.loc 1 94 0
 1683 09f0 F0B5     		push	{r4, r5, r6, r7, lr}
 1684              	.LCFI6:
 1685 09f2 4746     		mov	r7, r8
 1686 09f4 80B4     		push	{r7}
 1687              	.LCFI7:
 1688              	.LVL104:
 1689 09f6 82B0     		sub	sp, sp, #8
 1690              	.LCFI8:
 1691 09f8 071C     		mov	r7, r0
 1692 09fa 8846     		mov	r8, r1
 1693              		.loc 1 102 0
 1694 09fc CA49     		ldr	r1, .L209
 1695              	.LVL105:
 1696 09fe 9222     		mov	r2, #146
 1697 0a00 8B5A     		ldrh	r3, [r1, r2]
 1698 0a02 0133     		add	r3, r3, #1
 1699 0a04 8B52     		strh	r3, [r1, r2]
 1700              		.loc 1 105 0
 1701 0a06 4368     		ldr	r3, [r0, #4]
 1702 0a08 C84E     		ldr	r6, .L209+4
 1703 0a0a 3360     		str	r3, [r6]
 1704              		.loc 1 106 0
 1705 0a0c 4468     		ldr	r4, [r0, #4]
 1706 0a0e 1888     		ldrh	r0, [r3]
 1707              	.LVL106:
 1708 0a10 FFF7FEFF 		bl	ntohs
 1709 0a14 C64B     		ldr	r3, .L209+8
 1710 0a16 000A     		lsr	r0, r0, #8
 1711 0a18 0F25     		mov	r5, #15
 1712 0a1a 2840     		and	r0, r0, r5
 1713 0a1c 8000     		lsl	r0, r0, #2
 1714 0a1e 2418     		add	r4, r4, r0
 1715 0a20 1C60     		str	r4, [r3]
 1716              		.loc 1 113 0
 1717 0a22 3368     		ldr	r3, [r6]
 1718 0a24 1888     		ldrh	r0, [r3]
 1719 0a26 FFF7FEFF 		bl	ntohs
 1720 0a2a 010A     		lsr	r1, r0, #8
 1721 0a2c 2940     		and	r1, r1, r5
 1722 0a2e 8904     		lsl	r1, r1, #18
 1723 0a30 4942     		neg	r1, r1
 1724 0a32 0914     		asr	r1, r1, #16
 1725 0a34 381C     		mov	r0, r7
 1726 0a36 FFF7FEFF 		bl	pbuf_header
 1727 0a3a 0028     		cmp	r0, #0
 1728 0a3c 02D1     		bne	.L111
 1729 0a3e 3B89     		ldrh	r3, [r7, #8]
 1730 0a40 132B     		cmp	r3, #19
 1731 0a42 0DD8     		bhi	.L112
 1732              	.L111:
 1733              		.loc 1 116 0
 1734 0a44 B84A     		ldr	r2, .L209
 1735 0a46 9A21     		mov	r1, #154
 1736 0a48 535A     		ldrh	r3, [r2, r1]
 1737 0a4a 0133     		add	r3, r3, #1
 1738 0a4c 5352     		strh	r3, [r2, r1]
 1739              		.loc 1 117 0
 1740 0a4e 9621     		mov	r1, #150
 1741 0a50 535A     		ldrh	r3, [r2, r1]
 1742 0a52 0133     		add	r3, r3, #1
 1743 0a54 5352     		strh	r3, [r2, r1]
 1744              		.loc 1 119 0
 1745 0a56 381C     		mov	r0, r7
 1746 0a58 FFF7FEFF 		bl	pbuf_free
 1747 0a5c 00F0F7FC 		bl	.L205	@ far jump
 1748              	.L112:
 1749              		.loc 1 124 0
 1750 0a60 B24B     		ldr	r3, .L209+4
 1751 0a62 1868     		ldr	r0, [r3]
 1752 0a64 1030     		add	r0, r0, #16
 1753 0a66 4146     		mov	r1, r8
 1754 0a68 FFF7FEFF 		bl	ip_addr_isbroadcast
 1755 0a6c 0028     		cmp	r0, #0
 1756 0a6e 0ED1     		bne	.L114
 1757 0a70 AE4B     		ldr	r3, .L209+4
 1758 0a72 1B68     		ldr	r3, [r3]
 1759 0a74 1D69     		ldr	r5, [r3, #16]
 1760 0a76 F020     		mov	r0, #240
 1761 0a78 0006     		lsl	r0, r0, #24
 1762 0a7a FFF7FEFF 		bl	ntohl
 1763 0a7e 041C     		mov	r4, r0
 1764 0a80 E020     		mov	r0, #224
 1765 0a82 0006     		lsl	r0, r0, #24
 1766 0a84 FFF7FEFF 		bl	ntohl
 1767 0a88 2C40     		and	r4, r4, r5
 1768 0a8a 8442     		cmp	r4, r0
 1769 0a8c 0DD1     		bne	.L115
 1770              	.L114:
 1771              		.loc 1 126 0
 1772 0a8e A64A     		ldr	r2, .L209
 1773 0a90 A021     		mov	r1, #160
 1774 0a92 535A     		ldrh	r3, [r2, r1]
 1775 0a94 0133     		add	r3, r3, #1
 1776 0a96 5352     		strh	r3, [r2, r1]
 1777              		.loc 1 127 0
 1778 0a98 9621     		mov	r1, #150
 1779 0a9a 535A     		ldrh	r3, [r2, r1]
 1780 0a9c 0133     		add	r3, r3, #1
 1781 0a9e 5352     		strh	r3, [r2, r1]
 1782              		.loc 1 129 0
 1783 0aa0 381C     		mov	r0, r7
 1784 0aa2 FFF7FEFF 		bl	pbuf_free
 1785 0aa6 00F0D2FC 		bl	.L205	@ far jump
 1786              	.L115:
 1787              		.loc 1 135 0
 1788 0aaa A04B     		ldr	r3, .L209+4
 1789 0aac 1A68     		ldr	r2, [r3]
 1790 0aae 111C     		mov	r1, r2
 1791 0ab0 0C31     		add	r1, r1, #12
 1792 0ab2 1032     		add	r2, r2, #16
 1793 0ab4 3B89     		ldrh	r3, [r7, #8]
 1794 0ab6 0093     		str	r3, [sp]
 1795 0ab8 381C     		mov	r0, r7
 1796 0aba 0623     		mov	r3, #6
 1797 0abc FFF7FEFF 		bl	inet_chksum_pseudo
 1798 0ac0 0028     		cmp	r0, #0
 1799 0ac2 0DD0     		beq	.L116
 1800              		.loc 1 144 0
 1801 0ac4 984A     		ldr	r2, .L209
 1802 0ac6 9821     		mov	r1, #152
 1803 0ac8 535A     		ldrh	r3, [r2, r1]
 1804 0aca 0133     		add	r3, r3, #1
 1805 0acc 5352     		strh	r3, [r2, r1]
 1806              		.loc 1 145 0
 1807 0ace 9621     		mov	r1, #150
 1808 0ad0 535A     		ldrh	r3, [r2, r1]
 1809 0ad2 0133     		add	r3, r3, #1
 1810 0ad4 5352     		strh	r3, [r2, r1]
 1811              		.loc 1 147 0
 1812 0ad6 381C     		mov	r0, r7
 1813 0ad8 FFF7FEFF 		bl	pbuf_free
 1814 0adc 00F0B7FC 		bl	.L205	@ far jump
 1815              	.L116:
 1816              		.loc 1 154 0
 1817 0ae0 934B     		ldr	r3, .L209+8
 1818 0ae2 1B68     		ldr	r3, [r3]
 1819 0ae4 9889     		ldrh	r0, [r3, #12]
 1820 0ae6 FFF7FEFF 		bl	ntohs
 1821              		.loc 1 155 0
 1822 0aea 0103     		lsl	r1, r0, #12
 1823 0aec 090E     		lsr	r1, r1, #24
 1824 0aee 8904     		lsl	r1, r1, #18
 1825 0af0 4942     		neg	r1, r1
 1826 0af2 0914     		asr	r1, r1, #16
 1827 0af4 381C     		mov	r0, r7
 1828 0af6 FFF7FEFF 		bl	pbuf_header
 1829 0afa 0028     		cmp	r0, #0
 1830 0afc 0DD0     		beq	.L117
 1831              		.loc 1 158 0
 1832 0afe 8A4A     		ldr	r2, .L209
 1833 0b00 9A21     		mov	r1, #154
 1834 0b02 535A     		ldrh	r3, [r2, r1]
 1835 0b04 0133     		add	r3, r3, #1
 1836 0b06 5352     		strh	r3, [r2, r1]
 1837              		.loc 1 159 0
 1838 0b08 9621     		mov	r1, #150
 1839 0b0a 535A     		ldrh	r3, [r2, r1]
 1840 0b0c 0133     		add	r3, r3, #1
 1841 0b0e 5352     		strh	r3, [r2, r1]
 1842              		.loc 1 161 0
 1843 0b10 381C     		mov	r0, r7
 1844 0b12 FFF7FEFF 		bl	pbuf_free
 1845 0b16 00F09AFC 		bl	.L205	@ far jump
 1846              	.L117:
 1847              		.loc 1 166 0
 1848 0b1a 854D     		ldr	r5, .L209+8
 1849 0b1c 2C68     		ldr	r4, [r5]
 1850 0b1e 2088     		ldrh	r0, [r4]
 1851 0b20 FFF7FEFF 		bl	ntohs
 1852 0b24 2080     		strh	r0, [r4]
 1853              		.loc 1 167 0
 1854 0b26 2C68     		ldr	r4, [r5]
 1855 0b28 6088     		ldrh	r0, [r4, #2]
 1856 0b2a FFF7FEFF 		bl	ntohs
 1857 0b2e 6080     		strh	r0, [r4, #2]
 1858              		.loc 1 168 0
 1859 0b30 2C68     		ldr	r4, [r5]
 1860 0b32 6068     		ldr	r0, [r4, #4]
 1861 0b34 FFF7FEFF 		bl	ntohl
 1862 0b38 6060     		str	r0, [r4, #4]
 1863 0b3a 7E4B     		ldr	r3, .L209+12
 1864 0b3c 1860     		str	r0, [r3]
 1865              		.loc 1 169 0
 1866 0b3e 2C68     		ldr	r4, [r5]
 1867 0b40 A068     		ldr	r0, [r4, #8]
 1868 0b42 FFF7FEFF 		bl	ntohl
 1869 0b46 A060     		str	r0, [r4, #8]
 1870 0b48 7B4B     		ldr	r3, .L209+16
 1871 0b4a 1860     		str	r0, [r3]
 1872              		.loc 1 170 0
 1873 0b4c 2C68     		ldr	r4, [r5]
 1874 0b4e E089     		ldrh	r0, [r4, #14]
 1875 0b50 FFF7FEFF 		bl	ntohs
 1876 0b54 E081     		strh	r0, [r4, #14]
 1877              		.loc 1 172 0
 1878 0b56 2B68     		ldr	r3, [r5]
 1879 0b58 9889     		ldrh	r0, [r3, #12]
 1880 0b5a FFF7FEFF 		bl	ntohs
 1881 0b5e 3F23     		mov	r3, #63
 1882 0b60 1840     		and	r0, r0, r3
 1883 0b62 764B     		ldr	r3, .L209+20
 1884 0b64 1870     		strb	r0, [r3]
 1885              		.loc 1 173 0
 1886 0b66 0323     		mov	r3, #3
 1887 0b68 1840     		and	r0, r0, r3
 1888 0b6a 431E     		sub	r3, r0, #1
 1889 0b6c 9841     		sbc	r0, r0, r3
 1890 0b6e 3B89     		ldrh	r3, [r7, #8]
 1891 0b70 C018     		add	r0, r0, r3
 1892 0b72 0004     		lsl	r0, r0, #16
 1893 0b74 000C     		lsr	r0, r0, #16
 1894 0b76 8046     		mov	r8, r0
 1895              	.LVL107:
 1896 0b78 714B     		ldr	r3, .L209+24
 1897 0b7a 1880     		strh	r0, [r3]
 1898              		.loc 1 180 0
 1899 0b7c 714B     		ldr	r3, .L209+28
 1900 0b7e 1E68     		ldr	r6, [r3]
 1901              	.LVL108:
 1902 0b80 002E     		cmp	r6, #0
 1903 0b82 01D1     		bne	.LCB1844
 1904 0b84 00F044FC 		bl	.L118	@far jump
 1905              	.LCB1844:
 1906              		.loc 1 184 0
 1907 0b88 694B     		ldr	r3, .L209+8
 1908 0b8a 1D68     		ldr	r5, [r3]
 1909 0b8c 2C88     		ldrh	r4, [r5]
 1910 0b8e 674B     		ldr	r3, .L209+4
 1911 0b90 1968     		ldr	r1, [r3]
 1912 0b92 0020     		mov	r0, #0
 1913              	.LVL109:
 1914              	.L121:
 1915 0b94 B38C     		ldrh	r3, [r6, #36]
 1916 0b96 A342     		cmp	r3, r4
 1917 0b98 14D1     		bne	.L119
 1918 0b9a B28B     		ldrh	r2, [r6, #28]
 1919 0b9c 6B88     		ldrh	r3, [r5, #2]
 1920 0b9e 9A42     		cmp	r2, r3
 1921 0ba0 10D1     		bne	.L119
 1922 0ba2 7268     		ldr	r2, [r6, #4]
 1923 0ba4 CB68     		ldr	r3, [r1, #12]
 1924 0ba6 9A42     		cmp	r2, r3
 1925 0ba8 0CD1     		bne	.L119
 1926 0baa 3268     		ldr	r2, [r6]
 1927 0bac 0B69     		ldr	r3, [r1, #16]
 1928 0bae 9A42     		cmp	r2, r3
 1929 0bb0 08D1     		bne	.L119
 1930              		.loc 1 193 0
 1931 0bb2 0028     		cmp	r0, #0
 1932 0bb4 0ED0     		beq	.L120
 1933              		.loc 1 194 0
 1934 0bb6 F368     		ldr	r3, [r6, #12]
 1935 0bb8 C360     		str	r3, [r0, #12]
 1936              		.loc 1 195 0
 1937 0bba 624A     		ldr	r2, .L209+28
 1938 0bbc 1368     		ldr	r3, [r2]
 1939 0bbe F360     		str	r3, [r6, #12]
 1940              		.loc 1 196 0
 1941 0bc0 1660     		str	r6, [r2]
 1942 0bc2 07E0     		b	.L120
 1943              	.L119:
 1944              		.loc 1 180 0
 1945 0bc4 F368     		ldr	r3, [r6, #12]
 1946              	.LVL110:
 1947 0bc6 002B     		cmp	r3, #0
 1948 0bc8 01D1     		bne	.LCB1885
 1949 0bca 00F021FC 		bl	.L118	@far jump
 1950              	.LCB1885:
 1951 0bce 301C     		mov	r0, r6
 1952 0bd0 1E1C     		mov	r6, r3
 1953 0bd2 DFE7     		b	.L121
 1954              	.LVL111:
 1955              	.L120:
 1956              		.loc 1 266 0
 1957 0bd4 5C4A     		ldr	r2, .L209+32
 1958 0bd6 0021     		mov	r1, #0
 1959 0bd8 1160     		str	r1, [r2]
 1960              		.loc 1 267 0
 1961 0bda 3B89     		ldrh	r3, [r7, #8]
 1962 0bdc 9381     		strh	r3, [r2, #12]
 1963              		.loc 1 268 0
 1964 0bde 7B68     		ldr	r3, [r7, #4]
 1965 0be0 9360     		str	r3, [r2, #8]
 1966              		.loc 1 269 0
 1967 0be2 5760     		str	r7, [r2, #4]
 1968              		.loc 1 270 0
 1969 0be4 524B     		ldr	r3, .L209+8
 1970 0be6 1B68     		ldr	r3, [r3]
 1971 0be8 1361     		str	r3, [r2, #16]
 1972              		.loc 1 272 0
 1973 0bea 584B     		ldr	r3, .L209+36
 1974 0bec 1960     		str	r1, [r3]
 1975              		.loc 1 273 0
 1976 0bee 584B     		ldr	r3, .L209+40
 1977 0bf0 1970     		strb	r1, [r3]
 1978              		.loc 1 276 0
 1979 0bf2 8423     		mov	r3, #132
 1980 0bf4 F258     		ldr	r2, [r6, r3]
 1981 0bf6 002A     		cmp	r2, #0
 1982 0bf8 00D0     		beq	.LCB1911
 1983 0bfa 06E1     		b	.L122	@long jump
 1984              	.LCB1911:
 1985 0bfc 27E1     		b	.L123
 1986              	.LVL112:
 1987              	.L128:
 1988              		.loc 1 209 0
 1989 0bfe 838C     		ldrh	r3, [r0, #36]
 1990 0c00 AB42     		cmp	r3, r5
 1991 0c02 3DD1     		bne	.L124
 1992 0c04 828B     		ldrh	r2, [r0, #28]
 1993 0c06 9446     		mov	ip, r2
 1994 0c08 6388     		ldrh	r3, [r4, #2]
 1995 0c0a 6345     		cmp	r3, ip
 1996 0c0c 38D1     		bne	.L124
 1997 0c0e 4268     		ldr	r2, [r0, #4]
 1998 0c10 F368     		ldr	r3, [r6, #12]
 1999 0c12 9A42     		cmp	r2, r3
 2000 0c14 34D1     		bne	.L124
 2001 0c16 0268     		ldr	r2, [r0]
 2002 0c18 3369     		ldr	r3, [r6, #16]
 2003 0c1a 9A42     		cmp	r2, r3
 2004 0c1c 30D1     		bne	.L124
 2005              	.LBB12:
 2006              	.LBB13:
 2007              		.loc 1 486 0
 2008 0c1e 474B     		ldr	r3, .L209+20
 2009 0c20 1B78     		ldrb	r3, [r3]
 2010 0c22 5C07     		lsl	r4, r3, #29
 2011 0c24 27D4     		bmi	.L125
 2012              		.loc 1 490 0
 2013 0c26 9907     		lsl	r1, r3, #30
 2014 0c28 15D5     		bpl	.L126
 2015              		.loc 1 493 0
 2016 0c2a 424B     		ldr	r3, .L209+12
 2017 0c2c 1968     		ldr	r1, [r3]
 2018 0c2e 836A     		ldr	r3, [r0, #40]
 2019 0c30 CA1A     		sub	r2, r1, r3
 2020 0c32 15D4     		bmi	.L127
 2021 0c34 838D     		ldrh	r3, [r0, #44]
 2022 0c36 D31A     		sub	r3, r2, r3
 2023 0c38 002B     		cmp	r3, #0
 2024 0c3a 11DC     		bgt	.L127
 2025              		.loc 1 495 0
 2026 0c3c 3E4B     		ldr	r3, .L209+16
 2027 0c3e 1868     		ldr	r0, [r3]
 2028              	.LVL113:
 2029 0c40 4144     		add	r1, r1, r8
 2030 0c42 321C     		mov	r2, r6
 2031 0c44 1032     		add	r2, r2, #16
 2032 0c46 331C     		mov	r3, r6
 2033 0c48 0C33     		add	r3, r3, #12
 2034 0c4a 6446     		mov	r4, ip
 2035 0c4c 0094     		str	r4, [sp]
 2036 0c4e 0195     		str	r5, [sp, #4]
 2037 0c50 FFF7FEFF 		bl	tcp_rst
 2038 0c54 0FE0     		b	.L125
 2039              	.LVL114:
 2040              	.L126:
 2041              	.LBE13:
 2042              		.loc 1 499 0
 2043 0c56 D907     		lsl	r1, r3, #31
 2044 0c58 02D5     		bpl	.L127
 2045              	.LBB14:
 2046              		.loc 1 502 0
 2047 0c5a 3E4B     		ldr	r3, .L209+44
 2048 0c5c 1B68     		ldr	r3, [r3]
 2049 0c5e 4363     		str	r3, [r0, #52]
 2050              	.L127:
 2051              		.loc 1 505 0
 2052 0c60 374B     		ldr	r3, .L209+24
 2053 0c62 1B88     		ldrh	r3, [r3]
 2054 0c64 002B     		cmp	r3, #0
 2055 0c66 06D0     		beq	.L125
 2056              		.loc 1 507 0
 2057 0c68 2623     		mov	r3, #38
 2058 0c6a C25C     		ldrb	r2, [r0, r3]
 2059 0c6c 0221     		mov	r1, #2
 2060 0c6e 0A43     		orr	r2, r2, r1
 2061 0c70 C254     		strb	r2, [r0, r3]
 2062              		.loc 1 508 0
 2063 0c72 FFF7FEFF 		bl	tcp_output
 2064              	.LVL115:
 2065              	.L125:
 2066              	.LBE14:
 2067              	.LBE12:
 2068              		.loc 1 218 0
 2069 0c76 381C     		mov	r0, r7
 2070              	.LVL116:
 2071 0c78 FFF7FEFF 		bl	pbuf_free
 2072 0c7c 00F0E7FB 		bl	.L205	@ far jump
 2073              	.LVL117:
 2074              	.L124:
 2075              		.loc 1 207 0
 2076 0c80 C068     		ldr	r0, [r0, #12]
 2077 0c82 0028     		cmp	r0, #0
 2078 0c84 BBD1     		bne	.L128
 2079              	.L202:
 2080              		.loc 1 226 0
 2081 0c86 344B     		ldr	r3, .L209+48
 2082 0c88 1C68     		ldr	r4, [r3]
 2083              	.LVL118:
 2084 0c8a 002C     		cmp	r4, #0
 2085 0c8c 00D1     		bne	.LCB2017
 2086 0c8e CBE3     		b	.L129	@long jump
 2087              	.LCB2017:
 2088              		.loc 1 227 0
 2089 0c90 264B     		ldr	r3, .L209+4
 2090 0c92 1D68     		ldr	r5, [r3]
 2091 0c94 264B     		ldr	r3, .L209+8
 2092 0c96 1868     		ldr	r0, [r3]
 2093              	.LVL119:
 2094 0c98 0021     		mov	r1, #0
 2095              	.LVL120:
 2096              	.L141:
 2097 0c9a 002C     		cmp	r4, #0
 2098 0c9c 06D0     		beq	.L130
 2099 0c9e 2268     		ldr	r2, [r4]
 2100 0ca0 002A     		cmp	r2, #0
 2101 0ca2 03D0     		beq	.L130
 2102 0ca4 2B69     		ldr	r3, [r5, #16]
 2103 0ca6 9A42     		cmp	r2, r3
 2104 0ca8 00D0     		beq	.LCB2035
 2105 0caa A7E0     		b	.L131	@long jump
 2106              	.LCB2035:
 2107              	.LVL121:
 2108              	.L130:
 2109 0cac A28B     		ldrh	r2, [r4, #28]
 2110 0cae 4388     		ldrh	r3, [r0, #2]
 2111 0cb0 9A42     		cmp	r2, r3
 2112 0cb2 00D0     		beq	.LCB2041
 2113 0cb4 A2E0     		b	.L131	@long jump
 2114              	.LCB2041:
 2115              		.loc 1 233 0
 2116 0cb6 0029     		cmp	r1, #0
 2117 0cb8 05D0     		beq	.L132
 2118              		.loc 1 234 0
 2119 0cba E368     		ldr	r3, [r4, #12]
 2120 0cbc CB60     		str	r3, [r1, #12]
 2121              		.loc 1 236 0
 2122 0cbe 264A     		ldr	r2, .L209+48
 2123 0cc0 1368     		ldr	r3, [r2]
 2124 0cc2 E360     		str	r3, [r4, #12]
 2125              		.loc 1 238 0
 2126 0cc4 1460     		str	r4, [r2]
 2127              	.L132:
 2128              	.LBB15:
 2129              	.LBB16:
 2130              		.loc 1 397 0
 2131 0cc6 1D4B     		ldr	r3, .L209+20
 2132 0cc8 1B78     		ldrb	r3, [r3]
 2133 0cca DA06     		lsl	r2, r3, #27
 2134 0ccc 15D5     		bpl	.L133
 2135              		.loc 1 401 0
 2136 0cce 174B     		ldr	r3, .L209+4
 2137 0cd0 1B68     		ldr	r3, [r3]
 2138 0cd2 174A     		ldr	r2, .L209+8
 2139 0cd4 1568     		ldr	r5, [r2]
 2140 0cd6 184A     		ldr	r2, .L209+16
 2141 0cd8 1068     		ldr	r0, [r2]
 2142 0cda 0130     		add	r0, r0, #1
 2143 0cdc 184A     		ldr	r2, .L209+24
 2144 0cde 1188     		ldrh	r1, [r2]
 2145              	.LVL122:
 2146 0ce0 144A     		ldr	r2, .L209+12
 2147 0ce2 1268     		ldr	r2, [r2]
 2148 0ce4 8918     		add	r1, r1, r2
 2149 0ce6 1A1C     		mov	r2, r3
 2150 0ce8 1032     		add	r2, r2, #16
 2151 0cea 0C33     		add	r3, r3, #12
 2152 0cec 6C88     		ldrh	r4, [r5, #2]
 2153              	.LVL123:
 2154 0cee 0094     		str	r4, [sp]
 2155 0cf0 2C88     		ldrh	r4, [r5]
 2156 0cf2 0194     		str	r4, [sp, #4]
 2157 0cf4 FFF7FEFF 		bl	tcp_rst
 2158 0cf8 7CE0     		b	.L134
 2159              	.LVL124:
 2160              	.L133:
 2161              		.loc 1 404 0
 2162 0cfa 9907     		lsl	r1, r3, #30
 2163 0cfc 00D4     		bmi	.LCB2091
 2164 0cfe 79E0     		b	.L134	@long jump
 2165              	.LCB2091:
 2166              	.LVL125:
 2167              	.LBE16:
 2168              		.loc 1 412 0
 2169 0d00 207D     		ldrb	r0, [r4, #20]
 2170 0d02 FFF7FEFF 		bl	tcp_alloc
 2171 0d06 051C     		mov	r5, r0
 2172              	.LVL126:
 2173              	.LBB17:
 2174              		.loc 1 416 0
 2175 0d08 0028     		cmp	r0, #0
 2176 0d0a 05D1     		bne	.L135
 2177              	.LVL127:
 2178              		.loc 1 418 0
 2179 0d0c 0649     		ldr	r1, .L209
 2180 0d0e 9C22     		mov	r2, #156
 2181 0d10 8B5A     		ldrh	r3, [r1, r2]
 2182 0d12 0133     		add	r3, r3, #1
 2183 0d14 8B52     		strh	r3, [r1, r2]
 2184 0d16 6DE0     		b	.L134
 2185              	.L135:
 2186              		.loc 1 425 0
 2187 0d18 044B     		ldr	r3, .L209+4
 2188 0d1a 1B68     		ldr	r3, [r3]
 2189 0d1c 1A1C     		mov	r2, r3
 2190 0d1e 1032     		add	r2, r2, #16
 2191 0d20 1CD1     		bne	.L136
 2192 0d22 0023     		mov	r3, #0
 2193 0d24 1BE0     		b	.L137
 2194              	.L210:
 2195 0d26 C046     		.align	2
 2196              	.L209:
 2197 0d28 00000000 		.word	lwip_stats
 2198 0d2c 18000000 		.word	iphdr
 2199 0d30 14000000 		.word	tcphdr
 2200 0d34 1C000000 		.word	seqno
 2201 0d38 20000000 		.word	ackno
 2202 0d3c 24000000 		.word	flags
 2203 0d40 26000000 		.word	tcplen
 2204 0d44 00000000 		.word	tcp_active_pcbs
 2205 0d48 00000000 		.word	inseg
 2206 0d4c 2C000000 		.word	recv_data
 2207 0d50 28000000 		.word	recv_flags
 2208 0d54 00000000 		.word	tcp_ticks
 2209 0d58 00000000 		.word	tcp_listen_pcbs
 2210              	.L136:
 2211 0d5c 1B69     		ldr	r3, [r3, #16]
 2212              	.L137:
 2213 0d5e 2B60     		str	r3, [r5]
 2214              		.loc 1 426 0
 2215 0d60 A38B     		ldrh	r3, [r4, #28]
 2216 0d62 AB83     		strh	r3, [r5, #28]
 2217              		.loc 1 427 0
 2218 0d64 C84B     		ldr	r3, .L211
 2219 0d66 1B68     		ldr	r3, [r3]
 2220 0d68 191C     		mov	r1, r3
 2221 0d6a 0C31     		add	r1, r1, #12
 2222 0d6c 01D1     		bne	.L138
 2223              	.LVL128:
 2224 0d6e 0023     		mov	r3, #0
 2225 0d70 00E0     		b	.L139
 2226              	.L138:
 2227 0d72 DB68     		ldr	r3, [r3, #12]
 2228              	.L139:
 2229 0d74 6B60     		str	r3, [r5, #4]
 2230              		.loc 1 428 0
 2231 0d76 C54A     		ldr	r2, .L211+4
 2232 0d78 1368     		ldr	r3, [r2]
 2233 0d7a 1B88     		ldrh	r3, [r3]
 2234 0d7c AB84     		strh	r3, [r5, #36]
 2235              		.loc 1 429 0
 2236 0d7e 0323     		mov	r3, #3
 2237 0d80 2B61     		str	r3, [r5, #16]
 2238              		.loc 1 430 0
 2239 0d82 C349     		ldr	r1, .L211+8
 2240 0d84 0B68     		ldr	r3, [r1]
 2241 0d86 0133     		add	r3, r3, #1
 2242 0d88 AB62     		str	r3, [r5, #40]
 2243              		.loc 1 431 0
 2244 0d8a 2B63     		str	r3, [r5, #48]
 2245              		.loc 1 432 0
 2246 0d8c 1368     		ldr	r3, [r2]
 2247 0d8e DA89     		ldrh	r2, [r3, #14]
 2248 0d90 6023     		mov	r3, #96
 2249 0d92 EA52     		strh	r2, [r5, r3]
 2250              		.loc 1 433 0
 2251 0d94 5823     		mov	r3, #88
 2252 0d96 EA52     		strh	r2, [r5, r3]
 2253              		.loc 1 434 0
 2254 0d98 0B68     		ldr	r3, [r1]
 2255 0d9a 013B     		sub	r3, r3, #1
 2256 0d9c 6B66     		str	r3, [r5, #100]
 2257              		.loc 1 435 0
 2258 0d9e A369     		ldr	r3, [r4, #24]
 2259 0da0 AB61     		str	r3, [r5, #24]
 2260              		.loc 1 437 0
 2261 0da2 236A     		ldr	r3, [r4, #32]
 2262 0da4 2B62     		str	r3, [r5, #32]
 2263              		.loc 1 440 0
 2264 0da6 2389     		ldrh	r3, [r4, #8]
 2265 0da8 BA4A     		ldr	r2, .L211+12
 2266 0daa 1340     		and	r3, r3, r2
 2267 0dac 2B81     		strh	r3, [r5, #8]
 2268              		.loc 1 443 0
 2269 0dae BA4A     		ldr	r2, .L211+16
 2270 0db0 1368     		ldr	r3, [r2]
 2271 0db2 EB60     		str	r3, [r5, #12]
 2272 0db4 1560     		str	r5, [r2]
 2273 0db6 FFF7FEFF 		bl	tcp_timer_needed
 2274              		.loc 1 446 0
 2275 0dba 281C     		mov	r0, r5
 2276 0dbc FFF720F9 		bl	tcp_parseopt
 2277              	.LBE17:
 2278              		.loc 1 448 0
 2279 0dc0 A88F     		ldrh	r0, [r5, #60]
 2280 0dc2 291D     		add	r1, r5, #4
 2281 0dc4 FFF7FEFF 		bl	tcp_eff_send_mss
 2282              	.LBB18:
 2283 0dc8 A887     		strh	r0, [r5, #60]
 2284              	.LBE18:
 2285              		.loc 1 454 0
 2286 0dca 0023     		mov	r3, #0
 2287 0dcc 0093     		str	r3, [sp]
 2288 0dce 0123     		mov	r3, #1
 2289 0dd0 0193     		str	r3, [sp, #4]
 2290 0dd2 281C     		mov	r0, r5
 2291 0dd4 0021     		mov	r1, #0
 2292 0dd6 0022     		mov	r2, #0
 2293 0dd8 1223     		mov	r3, #18
 2294 0dda FFF7FEFF 		bl	tcp_enqueue
 2295 0dde 0006     		lsl	r0, r0, #24
 2296              	.LBB19:
 2297              		.loc 1 460 0
 2298 0de0 0028     		cmp	r0, #0
 2299 0de2 04D0     		beq	.L140
 2300              		.loc 1 461 0
 2301 0de4 281C     		mov	r0, r5
 2302 0de6 0021     		mov	r1, #0
 2303 0de8 FFF7FEFF 		bl	tcp_abandon
 2304 0dec 02E0     		b	.L134
 2305              	.L140:
 2306              		.loc 1 464 0
 2307 0dee 281C     		mov	r0, r5
 2308 0df0 FFF7FEFF 		bl	tcp_output
 2309              	.LVL129:
 2310              	.L134:
 2311              	.LBE19:
 2312              	.LBE15:
 2313              		.loc 1 243 0
 2314 0df4 381C     		mov	r0, r7
 2315 0df6 FFF7FEFF 		bl	pbuf_free
 2316 0dfa 28E3     		b	.L205
 2317              	.LVL130:
 2318              	.L131:
 2319              		.loc 1 226 0
 2320 0dfc E368     		ldr	r3, [r4, #12]
 2321              	.LVL131:
 2322 0dfe 002B     		cmp	r3, #0
 2323 0e00 00D1     		bne	.LCB2248
 2324 0e02 11E3     		b	.L129	@long jump
 2325              	.LCB2248:
 2326              		.loc 1 246 0
 2327 0e04 211C     		mov	r1, r4
 2328 0e06 1C1C     		mov	r4, r3
 2329 0e08 47E7     		b	.L141
 2330              	.LVL132:
 2331              	.L122:
 2332              		.loc 1 279 0
 2333 0e0a 8C23     		mov	r3, #140
 2334 0e0c F458     		ldr	r4, [r6, r3]
 2335 0e0e 002C     		cmp	r4, #0
 2336 0e10 07D0     		beq	.L142
 2337 0e12 B069     		ldr	r0, [r6, #24]
 2338              	.LVL133:
 2339 0e14 311C     		mov	r1, r6
 2340 0e16 0023     		mov	r3, #0
 2341 0e18 00F029FB 		bl	.L217
 2342 0e1c 0006     		lsl	r0, r0, #24
 2343 0e1e 000E     		lsr	r0, r0, #24
 2344              	.LVL134:
 2345 0e20 06E0     		b	.L143
 2346              	.LVL135:
 2347              	.L142:
 2348 0e22 0020     		mov	r0, #0
 2349              	.LVL136:
 2350 0e24 311C     		mov	r1, r6
 2351 0e26 0023     		mov	r3, #0
 2352 0e28 FFF7FEFF 		bl	tcp_recv_null
 2353 0e2c 0006     		lsl	r0, r0, #24
 2354 0e2e 000E     		lsr	r0, r0, #24
 2355              	.LVL137:
 2356              	.L143:
 2357              		.loc 1 280 0
 2358 0e30 0028     		cmp	r0, #0
 2359 0e32 03D1     		bne	.L144
 2360              		.loc 1 281 0
 2361 0e34 0022     		mov	r2, #0
 2362 0e36 8423     		mov	r3, #132
 2363 0e38 F250     		str	r2, [r6, r3]
 2364 0e3a 08E0     		b	.L123
 2365              	.L144:
 2366              		.loc 1 285 0
 2367 0e3c 9749     		ldr	r1, .L211+20
 2368 0e3e 9622     		mov	r2, #150
 2369 0e40 8B5A     		ldrh	r3, [r1, r2]
 2370 0e42 0133     		add	r3, r3, #1
 2371 0e44 8B52     		strh	r3, [r1, r2]
 2372              		.loc 1 287 0
 2373 0e46 381C     		mov	r0, r7
 2374              	.LVL138:
 2375 0e48 FFF7FEFF 		bl	pbuf_free
 2376 0e4c FFE2     		b	.L205
 2377              	.LVL139:
 2378              	.L123:
 2379              		.loc 1 291 0
 2380 0e4e 944B     		ldr	r3, .L211+24
 2381 0e50 1E60     		str	r6, [r3]
 2382              	.LBB20:
 2383              	.LBB24:
 2384              		.loc 1 534 0
 2385 0e52 944B     		ldr	r3, .L211+28
 2386 0e54 1B78     		ldrb	r3, [r3]
 2387 0e56 5A07     		lsl	r2, r3, #29
 2388 0e58 15D5     		bpl	.L145
 2389              		.loc 1 536 0
 2390 0e5a 3369     		ldr	r3, [r6, #16]
 2391 0e5c 022B     		cmp	r3, #2
 2392 0e5e 06D1     		bne	.L146
 2393              		.loc 1 537 0
 2394 0e60 914B     		ldr	r3, .L211+32
 2395 0e62 F26D     		ldr	r2, [r6, #92]
 2396 0e64 1B68     		ldr	r3, [r3]
 2397 0e66 9A42     		cmp	r2, r3
 2398 0e68 00D0     		beq	.LCB2329
 2399 0e6a 16E2     		b	.L148	@long jump
 2400              	.LCB2329:
 2401 0e6c E4E2     		b	.L147
 2402              	.L146:
 2403              		.loc 1 541 0
 2404 0e6e 884B     		ldr	r3, .L211+8
 2405 0e70 1A68     		ldr	r2, [r3]
 2406 0e72 B36A     		ldr	r3, [r6, #40]
 2407 0e74 D21A     		sub	r2, r2, r3
 2408 0e76 00D5     		bpl	.LCB2339
 2409 0e78 0FE2     		b	.L148	@long jump
 2410              	.LCB2339:
 2411 0e7a B38D     		ldrh	r3, [r6, #44]
 2412 0e7c D31A     		sub	r3, r2, r3
 2413 0e7e 002B     		cmp	r3, #0
 2414 0e80 00DD     		ble	.LCB2343
 2415 0e82 0AE2     		b	.L148	@long jump
 2416              	.LCB2343:
 2417 0e84 D8E2     		b	.L147
 2418              	.L145:
 2419              		.loc 1 562 0
 2420 0e86 9C07     		lsl	r4, r3, #30
 2421 0e88 0CD5     		bpl	.L149
 2422 0e8a 3369     		ldr	r3, [r6, #16]
 2423 0e8c 023B     		sub	r3, r3, #2
 2424 0e8e 012B     		cmp	r3, #1
 2425 0e90 08D9     		bls	.L149
 2426              		.loc 1 564 0
 2427 0e92 2623     		mov	r3, #38
 2428 0e94 F25C     		ldrb	r2, [r6, r3]
 2429 0e96 0221     		mov	r1, #2
 2430 0e98 0A43     		orr	r2, r2, r1
 2431 0e9a F254     		strb	r2, [r6, r3]
 2432 0e9c 301C     		mov	r0, r6
 2433              	.LVL140:
 2434 0e9e FFF7FEFF 		bl	tcp_output
 2435 0ea2 FAE1     		b	.L148
 2436              	.LVL141:
 2437              	.L149:
 2438              		.loc 1 569 0
 2439 0ea4 814B     		ldr	r3, .L211+36
 2440 0ea6 1B68     		ldr	r3, [r3]
 2441 0ea8 7363     		str	r3, [r6, #52]
 2442              		.loc 1 570 0
 2443 0eaa 0022     		mov	r2, #0
 2444 0eac A523     		mov	r3, #165
 2445 0eae F254     		strb	r2, [r6, r3]
 2446              		.loc 1 572 0
 2447 0eb0 301C     		mov	r0, r6
 2448              	.LVL142:
 2449 0eb2 FFF7A5F8 		bl	tcp_parseopt
 2450              		.loc 1 575 0
 2451 0eb6 3369     		ldr	r3, [r6, #16]
 2452 0eb8 092B     		cmp	r3, #9
 2453 0eba 00D9     		bls	.LCB2384
 2454 0ebc EDE1     		b	.L148	@long jump
 2455              	.LCB2384:
 2456 0ebe 9B00     		lsl	r3, r3, #2
 2457 0ec0 7B4A     		ldr	r2, .L211+40
 2458 0ec2 D358     		ldr	r3, [r2, r3]
 2459 0ec4 9F46     		mov	pc, r3
 2460              		.section	.rodata
 2461              		.align	2
 2462              	.L157:
 2463 0000 9A120000 		.word	.L148
 2464 0004 9A120000 		.word	.L148
 2465 0008 C60E0000 		.word	.L150
 2466 000c BC0F0000 		.word	.L151
 2467 0010 BC100000 		.word	.L152
 2468 0014 E2100000 		.word	.L153
 2469 0018 98110000 		.word	.L154
 2470 001c BC100000 		.word	.L152
 2471 0020 0A120000 		.word	.L155
 2472 0024 78120000 		.word	.L156
 2473              		.text
 2474              	.L150:
 2475              		.loc 1 580 0
 2476 0ec6 774B     		ldr	r3, .L211+28
 2477 0ec8 1B78     		ldrb	r3, [r3]
 2478 0eca D906     		lsl	r1, r3, #27
 2479 0ecc 00D4     		bmi	.LCB2401
 2480 0ece E4E1     		b	.L148	@long jump
 2481              	.LCB2401:
 2482 0ed0 9A07     		lsl	r2, r3, #30
 2483 0ed2 5ED5     		bpl	.L158
 2484              	.LBE24:
 2485 0ed4 F36F     		ldr	r3, [r6, #124]
 2486 0ed6 1B69     		ldr	r3, [r3, #16]
 2487 0ed8 5868     		ldr	r0, [r3, #4]
 2488 0eda FFF7FEFF 		bl	ntohl
 2489              	.LBB23:
 2490 0ede 0130     		add	r0, r0, #1
 2491 0ee0 714B     		ldr	r3, .L211+32
 2492 0ee2 1B68     		ldr	r3, [r3]
 2493 0ee4 9842     		cmp	r0, r3
 2494 0ee6 4FD1     		bne	.L159
 2495              		.loc 1 582 0
 2496 0ee8 7222     		mov	r2, #114
 2497 0eea B35A     		ldrh	r3, [r6, r2]
 2498 0eec 0133     		add	r3, r3, #1
 2499 0eee B352     		strh	r3, [r6, r2]
 2500              		.loc 1 583 0
 2501 0ef0 6749     		ldr	r1, .L211+8
 2502 0ef2 0B68     		ldr	r3, [r1]
 2503 0ef4 0133     		add	r3, r3, #1
 2504 0ef6 B362     		str	r3, [r6, #40]
 2505              		.loc 1 584 0
 2506 0ef8 3363     		str	r3, [r6, #48]
 2507              		.loc 1 585 0
 2508 0efa 6B4B     		ldr	r3, .L211+32
 2509 0efc 1B68     		ldr	r3, [r3]
 2510 0efe 3365     		str	r3, [r6, #80]
 2511              		.loc 1 586 0
 2512 0f00 624B     		ldr	r3, .L211+4
 2513 0f02 1B68     		ldr	r3, [r3]
 2514 0f04 DA89     		ldrh	r2, [r3, #14]
 2515 0f06 6023     		mov	r3, #96
 2516 0f08 F252     		strh	r2, [r6, r3]
 2517              		.loc 1 587 0
 2518 0f0a 0B68     		ldr	r3, [r1]
 2519 0f0c 013B     		sub	r3, r3, #1
 2520 0f0e 7366     		str	r3, [r6, #100]
 2521              		.loc 1 588 0
 2522 0f10 0423     		mov	r3, #4
 2523 0f12 3361     		str	r3, [r6, #16]
 2524              	.LBE23:
 2525              		.loc 1 591 0
 2526 0f14 B08F     		ldrh	r0, [r6, #60]
 2527 0f16 311D     		add	r1, r6, #4
 2528 0f18 FFF7FEFF 		bl	tcp_eff_send_mss
 2529              	.LBB22:
 2530 0f1c B087     		strh	r0, [r6, #60]
 2531              		.loc 1 596 0
 2532 0f1e 8300     		lsl	r3, r0, #2
 2533 0f20 1B18     		add	r3, r3, r0
 2534 0f22 5B00     		lsl	r3, r3, #1
 2535 0f24 5822     		mov	r2, #88
 2536 0f26 B352     		strh	r3, [r6, r2]
 2537              		.loc 1 598 0
 2538 0f28 5623     		mov	r3, #86
 2539 0f2a F35A     		ldrh	r3, [r6, r3]
 2540 0f2c 012B     		cmp	r3, #1
 2541 0f2e 03D1     		bne	.L160
 2542 0f30 B38F     		ldrh	r3, [r6, #60]
 2543 0f32 5B04     		lsl	r3, r3, #17
 2544 0f34 1A0C     		lsr	r2, r3, #16
 2545 0f36 00E0     		b	.L161
 2546              	.L160:
 2547 0f38 B28F     		ldrh	r2, [r6, #60]
 2548              	.L161:
 2549 0f3a 5623     		mov	r3, #86
 2550 0f3c F252     		strh	r2, [r6, r3]
 2551              		.loc 1 600 0
 2552 0f3e 7422     		mov	r2, #116
 2553 0f40 B35A     		ldrh	r3, [r6, r2]
 2554 0f42 013B     		sub	r3, r3, #1
 2555 0f44 B352     		strh	r3, [r6, r2]
 2556              		.loc 1 602 0
 2557 0f46 F06F     		ldr	r0, [r6, #124]
 2558              	.LVL143:
 2559              		.loc 1 603 0
 2560 0f48 0368     		ldr	r3, [r0]
 2561 0f4a F367     		str	r3, [r6, #124]
 2562              		.loc 1 607 0
 2563 0f4c 002B     		cmp	r3, #0
 2564 0f4e 03D1     		bne	.L162
 2565              		.loc 1 608 0
 2566 0f50 0123     		mov	r3, #1
 2567 0f52 5B42     		neg	r3, r3
 2568 0f54 7387     		strh	r3, [r6, #58]
 2569 0f56 03E0     		b	.L163
 2570              	.L162:
 2571              		.loc 1 610 0
 2572 0f58 0022     		mov	r2, #0
 2573 0f5a 7287     		strh	r2, [r6, #58]
 2574              		.loc 1 611 0
 2575 0f5c 4E23     		mov	r3, #78
 2576 0f5e F254     		strb	r2, [r6, r3]
 2577              	.L163:
 2578              		.loc 1 614 0
 2579 0f60 FFF7FEFF 		bl	tcp_seg_free
 2580              	.LVL144:
 2581              		.loc 1 618 0
 2582 0f64 9023     		mov	r3, #144
 2583 0f66 F358     		ldr	r3, [r6, r3]
 2584 0f68 002B     		cmp	r3, #0
 2585 0f6a 04D0     		beq	.L164
 2586 0f6c B069     		ldr	r0, [r6, #24]
 2587 0f6e 311C     		mov	r1, r6
 2588 0f70 0022     		mov	r2, #0
 2589 0f72 00F07BFA 		bl	.L218
 2590              	.L164:
 2591              		.loc 1 619 0
 2592 0f76 2623     		mov	r3, #38
 2593 0f78 F25C     		ldrb	r2, [r6, r3]
 2594 0f7a 0221     		mov	r1, #2
 2595 0f7c 0A43     		orr	r2, r2, r1
 2596 0f7e F254     		strb	r2, [r6, r3]
 2597 0f80 301C     		mov	r0, r6
 2598 0f82 FFF7FEFF 		bl	tcp_output
 2599 0f86 88E1     		b	.L148
 2600              	.L159:
 2601              		.loc 1 622 0
 2602 0f88 464B     		ldr	r3, .L211+28
 2603 0f8a 1B78     		ldrb	r3, [r3]
 2604 0f8c DC06     		lsl	r4, r3, #27
 2605 0f8e 00D4     		bmi	.LCB2520
 2606 0f90 83E1     		b	.L148	@long jump
 2607              	.LCB2520:
 2608              	.L158:
 2609              		.loc 1 624 0
 2610 0f92 3D4B     		ldr	r3, .L211
 2611 0f94 1B68     		ldr	r3, [r3]
 2612 0f96 3D4A     		ldr	r2, .L211+4
 2613 0f98 1568     		ldr	r5, [r2]
 2614 0f9a 434A     		ldr	r2, .L211+32
 2615 0f9c 1068     		ldr	r0, [r2]
 2616 0f9e 454A     		ldr	r2, .L211+44
 2617 0fa0 1188     		ldrh	r1, [r2]
 2618 0fa2 3B4A     		ldr	r2, .L211+8
 2619 0fa4 1268     		ldr	r2, [r2]
 2620 0fa6 8918     		add	r1, r1, r2
 2621 0fa8 1A1C     		mov	r2, r3
 2622 0faa 1032     		add	r2, r2, #16
 2623 0fac 0C33     		add	r3, r3, #12
 2624 0fae 6C88     		ldrh	r4, [r5, #2]
 2625 0fb0 0094     		str	r4, [sp]
 2626 0fb2 2C88     		ldrh	r4, [r5]
 2627 0fb4 0194     		str	r4, [sp, #4]
 2628 0fb6 FFF7FEFF 		bl	tcp_rst
 2629 0fba 6EE1     		b	.L148
 2630              	.L151:
 2631              		.loc 1 629 0
 2632 0fbc 394B     		ldr	r3, .L211+28
 2633 0fbe 1B78     		ldrb	r3, [r3]
 2634 0fc0 D906     		lsl	r1, r3, #27
 2635 0fc2 53D5     		bpl	.L165
 2636              		.loc 1 631 0
 2637 0fc4 384B     		ldr	r3, .L211+32
 2638 0fc6 1D68     		ldr	r5, [r3]
 2639 0fc8 336D     		ldr	r3, [r6, #80]
 2640 0fca DB43     		mvn	r3, r3
 2641 0fcc EB42     		cmn	r3, r5
 2642 0fce 39D4     		bmi	.L166
 2643 0fd0 F36D     		ldr	r3, [r6, #92]
 2644 0fd2 EB1A     		sub	r3, r5, r3
 2645 0fd4 002B     		cmp	r3, #0
 2646 0fd6 35DC     		bgt	.L166
 2647              	.LBB26:
 2648              		.loc 1 633 0
 2649 0fd8 0423     		mov	r3, #4
 2650 0fda 3361     		str	r3, [r6, #16]
 2651              		.loc 1 639 0
 2652 0fdc 336A     		ldr	r3, [r6, #32]
 2653 0fde 002B     		cmp	r3, #0
 2654 0fe0 0CD0     		beq	.L167
 2655              	.LBE26:
 2656              	.LBE22:
 2657 0fe2 B069     		ldr	r0, [r6, #24]
 2658 0fe4 311C     		mov	r1, r6
 2659 0fe6 0022     		mov	r2, #0
 2660 0fe8 00F040FA 		bl	.L218
 2661 0fec 0006     		lsl	r0, r0, #24
 2662              	.LBB21:
 2663              	.LBB25:
 2664              		.loc 1 640 0
 2665 0fee 0028     		cmp	r0, #0
 2666 0ff0 04D0     		beq	.L167
 2667              		.loc 1 643 0
 2668 0ff2 301C     		mov	r0, r6
 2669 0ff4 0121     		mov	r1, #1
 2670 0ff6 FFF7FEFF 		bl	tcp_abandon
 2671 0ffa BFE1     		b	.L168
 2672              	.L167:
 2673              		.loc 1 646 0
 2674 0ffc 5623     		mov	r3, #86
 2675 0ffe F45A     		ldrh	r4, [r6, r3]
 2676              	.LVL145:
 2677              		.loc 1 649 0
 2678 1000 301C     		mov	r0, r6
 2679 1002 FFF7C7F8 		bl	tcp_receive
 2680              		.loc 1 652 0
 2681 1006 7023     		mov	r3, #112
 2682 1008 F25A     		ldrh	r2, [r6, r3]
 2683 100a 002A     		cmp	r2, #0
 2684 100c 01D0     		beq	.L169
 2685              		.loc 1 653 0
 2686 100e 013A     		sub	r2, r2, #1
 2687 1010 F252     		strh	r2, [r6, r3]
 2688              	.L169:
 2689              		.loc 1 656 0
 2690 1012 012C     		cmp	r4, #1
 2691 1014 03D1     		bne	.L170
 2692 1016 B38F     		ldrh	r3, [r6, #60]
 2693 1018 5B04     		lsl	r3, r3, #17
 2694 101a 1A0C     		lsr	r2, r3, #16
 2695 101c 00E0     		b	.L171
 2696              	.L170:
 2697 101e B28F     		ldrh	r2, [r6, #60]
 2698              	.L171:
 2699 1020 5623     		mov	r3, #86
 2700 1022 F252     		strh	r2, [r6, r3]
 2701              		.loc 1 658 0
 2702 1024 244B     		ldr	r3, .L211+48
 2703 1026 1B78     		ldrb	r3, [r3]
 2704 1028 9A06     		lsl	r2, r3, #26
 2705 102a 00D4     		bmi	.LCB2620
 2706 102c 35E1     		b	.L148	@long jump
 2707              	.LCB2620:
 2708              		.loc 1 659 0
 2709 102e 2621     		mov	r1, #38
 2710 1030 735C     		ldrb	r3, [r6, r1]
 2711 1032 0222     		mov	r2, #2
 2712 1034 1343     		orr	r3, r3, r2
 2713 1036 7354     		strb	r3, [r6, r1]
 2714 1038 301C     		mov	r0, r6
 2715 103a FFF7FEFF 		bl	tcp_output
 2716              		.loc 1 660 0
 2717 103e 0723     		mov	r3, #7
 2718 1040 3361     		str	r3, [r6, #16]
 2719 1042 2AE1     		b	.L148
 2720              	.LVL146:
 2721              	.L166:
 2722              	.LBE25:
 2723              		.loc 1 666 0
 2724 1044 104B     		ldr	r3, .L211
 2725 1046 1B68     		ldr	r3, [r3]
 2726 1048 104A     		ldr	r2, .L211+4
 2727 104a 1468     		ldr	r4, [r2]
 2728 104c 194A     		ldr	r2, .L211+44
 2729 104e 1188     		ldrh	r1, [r2]
 2730 1050 0F4A     		ldr	r2, .L211+8
 2731 1052 1268     		ldr	r2, [r2]
 2732 1054 8918     		add	r1, r1, r2
 2733 1056 1A1C     		mov	r2, r3
 2734 1058 1032     		add	r2, r2, #16
 2735 105a 0C33     		add	r3, r3, #12
 2736 105c 6088     		ldrh	r0, [r4, #2]
 2737 105e 0090     		str	r0, [sp]
 2738 1060 2088     		ldrh	r0, [r4]
 2739 1062 0190     		str	r0, [sp, #4]
 2740 1064 281C     		mov	r0, r5
 2741 1066 FFF7FEFF 		bl	tcp_rst
 2742 106a 16E1     		b	.L148
 2743              	.L165:
 2744              		.loc 1 669 0
 2745 106c 9C07     		lsl	r4, r3, #30
 2746 106e 00D4     		bmi	.LCB2662
 2747 1070 13E1     		b	.L148	@long jump
 2748              	.LCB2662:
 2749 1072 B36A     		ldr	r3, [r6, #40]
 2750 1074 013B     		sub	r3, r3, #1
 2751 1076 064A     		ldr	r2, .L211+8
 2752 1078 1268     		ldr	r2, [r2]
 2753 107a 9342     		cmp	r3, r2
 2754 107c 00D0     		beq	.LCB2668
 2755 107e 0CE1     		b	.L148	@long jump
 2756              	.LCB2668:
 2757              		.loc 1 671 0
 2758 1080 301C     		mov	r0, r6
 2759 1082 FFF7FEFF 		bl	tcp_rexmit
 2760 1086 08E1     		b	.L148
 2761              	.L212:
 2762              		.align	2
 2763              	.L211:
 2764 1088 18000000 		.word	iphdr
 2765 108c 14000000 		.word	tcphdr
 2766 1090 1C000000 		.word	seqno
 2767 1094 99010000 		.word	409
 2768 1098 00000000 		.word	tcp_active_pcbs
 2769 109c 00000000 		.word	lwip_stats
 2770 10a0 00000000 		.word	tcp_input_pcb
 2771 10a4 24000000 		.word	flags
 2772 10a8 20000000 		.word	ackno
 2773 10ac 00000000 		.word	tcp_ticks
 2774 10b0 00000000 		.word	.L157
 2775 10b4 26000000 		.word	tcplen
 2776 10b8 28000000 		.word	recv_flags
 2777              	.L152:
 2778              		.loc 1 677 0
 2779 10bc 301C     		mov	r0, r6
 2780 10be FFF769F8 		bl	tcp_receive
 2781              		.loc 1 678 0
 2782 10c2 C54B     		ldr	r3, .L213
 2783 10c4 1B78     		ldrb	r3, [r3]
 2784 10c6 9906     		lsl	r1, r3, #26
 2785 10c8 00D4     		bmi	.LCB2700
 2786 10ca E6E0     		b	.L148	@long jump
 2787              	.LCB2700:
 2788              		.loc 1 679 0
 2789 10cc 2621     		mov	r1, #38
 2790 10ce 735C     		ldrb	r3, [r6, r1]
 2791 10d0 0222     		mov	r2, #2
 2792 10d2 1343     		orr	r3, r3, r2
 2793 10d4 7354     		strb	r3, [r6, r1]
 2794 10d6 301C     		mov	r0, r6
 2795 10d8 FFF7FEFF 		bl	tcp_output
 2796              		.loc 1 680 0
 2797 10dc 0723     		mov	r3, #7
 2798 10de 3361     		str	r3, [r6, #16]
 2799 10e0 DBE0     		b	.L148
 2800              	.L153:
 2801              		.loc 1 684 0
 2802 10e2 301C     		mov	r0, r6
 2803 10e4 FFF756F8 		bl	tcp_receive
 2804              		.loc 1 685 0
 2805 10e8 BB4B     		ldr	r3, .L213
 2806 10ea 1B78     		ldrb	r3, [r3]
 2807 10ec 9A06     		lsl	r2, r3, #26
 2808 10ee 45D5     		bpl	.L172
 2809              		.loc 1 686 0
 2810 10f0 BA4B     		ldr	r3, .L213+4
 2811 10f2 1B78     		ldrb	r3, [r3]
 2812 10f4 DC06     		lsl	r4, r3, #27
 2813 10f6 36D5     		bpl	.L173
 2814 10f8 B94B     		ldr	r3, .L213+8
 2815 10fa F26D     		ldr	r2, [r6, #92]
 2816 10fc 1B68     		ldr	r3, [r3]
 2817 10fe 9A42     		cmp	r2, r3
 2818 1100 31D1     		bne	.L173
 2819              		.loc 1 689 0
 2820 1102 2621     		mov	r1, #38
 2821 1104 735C     		ldrb	r3, [r6, r1]
 2822 1106 0222     		mov	r2, #2
 2823 1108 1343     		orr	r3, r3, r2
 2824 110a 7354     		strb	r3, [r6, r1]
 2825 110c 301C     		mov	r0, r6
 2826 110e FFF7FEFF 		bl	tcp_output
 2827              		.loc 1 690 0
 2828 1112 301C     		mov	r0, r6
 2829 1114 FFF7FEFF 		bl	tcp_pcb_purge
 2830              		.loc 1 691 0
 2831 1118 B24B     		ldr	r3, .L213+12
 2832 111a 1A68     		ldr	r2, [r3]
 2833 111c 9642     		cmp	r6, r2
 2834 111e 03D1     		bne	.L174
 2835 1120 1A1C     		mov	r2, r3
 2836 1122 F368     		ldr	r3, [r6, #12]
 2837 1124 1360     		str	r3, [r2]
 2838 1126 13E0     		b	.L175
 2839              	.L174:
 2840 1128 AF4B     		ldr	r3, .L213+16
 2841 112a 1A60     		str	r2, [r3]
 2842 112c 002A     		cmp	r2, #0
 2843 112e 0FD0     		beq	.L175
 2844 1130 D368     		ldr	r3, [r2, #12]
 2845 1132 9E42     		cmp	r6, r3
 2846 1134 05D0     		beq	.L176
 2847 1136 1A1C     		mov	r2, r3
 2848 1138 AB49     		ldr	r1, .L213+16
 2849 113a 06E0     		b	.L177
 2850              	.L179:
 2851 113c D368     		ldr	r3, [r2, #12]
 2852 113e 9E42     		cmp	r6, r3
 2853 1140 02D1     		bne	.L178
 2854              	.L176:
 2855 1142 F368     		ldr	r3, [r6, #12]
 2856 1144 D360     		str	r3, [r2, #12]
 2857 1146 03E0     		b	.L175
 2858              	.L178:
 2859 1148 1A1C     		mov	r2, r3
 2860              	.L177:
 2861 114a 0A60     		str	r2, [r1]
 2862 114c 002A     		cmp	r2, #0
 2863 114e F5D1     		bne	.L179
 2864              	.L175:
 2865 1150 0023     		mov	r3, #0
 2866 1152 F360     		str	r3, [r6, #12]
 2867              		.loc 1 692 0
 2868 1154 0A23     		mov	r3, #10
 2869 1156 3361     		str	r3, [r6, #16]
 2870              		.loc 1 693 0
 2871 1158 A44A     		ldr	r2, .L213+20
 2872 115a 1368     		ldr	r3, [r2]
 2873 115c F360     		str	r3, [r6, #12]
 2874 115e 1660     		str	r6, [r2]
 2875 1160 FFF7FEFF 		bl	tcp_timer_needed
 2876 1164 99E0     		b	.L148
 2877              	.L173:
 2878              		.loc 1 695 0
 2879 1166 2621     		mov	r1, #38
 2880 1168 735C     		ldrb	r3, [r6, r1]
 2881 116a 0222     		mov	r2, #2
 2882 116c 1343     		orr	r3, r3, r2
 2883 116e 7354     		strb	r3, [r6, r1]
 2884 1170 301C     		mov	r0, r6
 2885 1172 FFF7FEFF 		bl	tcp_output
 2886              		.loc 1 696 0
 2887 1176 0823     		mov	r3, #8
 2888 1178 3361     		str	r3, [r6, #16]
 2889 117a 8EE0     		b	.L148
 2890              	.L172:
 2891              		.loc 1 698 0
 2892 117c 974B     		ldr	r3, .L213+4
 2893 117e 1B78     		ldrb	r3, [r3]
 2894 1180 D906     		lsl	r1, r3, #27
 2895 1182 00D4     		bmi	.LCB2817
 2896 1184 89E0     		b	.L148	@long jump
 2897              	.LCB2817:
 2898 1186 964B     		ldr	r3, .L213+8
 2899 1188 F26D     		ldr	r2, [r6, #92]
 2900 118a 1B68     		ldr	r3, [r3]
 2901 118c 9A42     		cmp	r2, r3
 2902 118e 00D0     		beq	.LCB2822
 2903 1190 83E0     		b	.L148	@long jump
 2904              	.LCB2822:
 2905              		.loc 1 699 0
 2906 1192 0623     		mov	r3, #6
 2907 1194 3361     		str	r3, [r6, #16]
 2908 1196 80E0     		b	.L148
 2909              	.L154:
 2910              		.loc 1 703 0
 2911 1198 301C     		mov	r0, r6
 2912 119a FEF7FBFF 		bl	tcp_receive
 2913              		.loc 1 704 0
 2914 119e 8E4B     		ldr	r3, .L213
 2915 11a0 1B78     		ldrb	r3, [r3]
 2916 11a2 9A06     		lsl	r2, r3, #26
 2917 11a4 79D5     		bpl	.L148
 2918              		.loc 1 706 0
 2919 11a6 2621     		mov	r1, #38
 2920 11a8 735C     		ldrb	r3, [r6, r1]
 2921 11aa 0222     		mov	r2, #2
 2922 11ac 1343     		orr	r3, r3, r2
 2923 11ae 7354     		strb	r3, [r6, r1]
 2924 11b0 301C     		mov	r0, r6
 2925 11b2 FFF7FEFF 		bl	tcp_output
 2926              		.loc 1 707 0
 2927 11b6 301C     		mov	r0, r6
 2928 11b8 FFF7FEFF 		bl	tcp_pcb_purge
 2929              		.loc 1 708 0
 2930 11bc 894B     		ldr	r3, .L213+12
 2931 11be 1A68     		ldr	r2, [r3]
 2932 11c0 9642     		cmp	r6, r2
 2933 11c2 03D1     		bne	.L180
 2934 11c4 1A1C     		mov	r2, r3
 2935 11c6 F368     		ldr	r3, [r6, #12]
 2936 11c8 1360     		str	r3, [r2]
 2937 11ca 13E0     		b	.L181
 2938              	.L180:
 2939 11cc 864B     		ldr	r3, .L213+16
 2940 11ce 1A60     		str	r2, [r3]
 2941 11d0 002A     		cmp	r2, #0
 2942 11d2 0FD0     		beq	.L181
 2943 11d4 D368     		ldr	r3, [r2, #12]
 2944 11d6 9E42     		cmp	r6, r3
 2945 11d8 05D0     		beq	.L182
 2946 11da 1A1C     		mov	r2, r3
 2947 11dc 8249     		ldr	r1, .L213+16
 2948 11de 06E0     		b	.L183
 2949              	.L185:
 2950 11e0 D368     		ldr	r3, [r2, #12]
 2951 11e2 9E42     		cmp	r6, r3
 2952 11e4 02D1     		bne	.L184
 2953              	.L182:
 2954 11e6 F368     		ldr	r3, [r6, #12]
 2955 11e8 D360     		str	r3, [r2, #12]
 2956 11ea 03E0     		b	.L181
 2957              	.L184:
 2958 11ec 1A1C     		mov	r2, r3
 2959              	.L183:
 2960 11ee 0A60     		str	r2, [r1]
 2961 11f0 002A     		cmp	r2, #0
 2962 11f2 F5D1     		bne	.L185
 2963              	.L181:
 2964 11f4 0023     		mov	r3, #0
 2965 11f6 F360     		str	r3, [r6, #12]
 2966              		.loc 1 709 0
 2967 11f8 0A23     		mov	r3, #10
 2968 11fa 3361     		str	r3, [r6, #16]
 2969              		.loc 1 710 0
 2970 11fc 7B4A     		ldr	r2, .L213+20
 2971 11fe 1368     		ldr	r3, [r2]
 2972 1200 F360     		str	r3, [r6, #12]
 2973 1202 1660     		str	r6, [r2]
 2974 1204 FFF7FEFF 		bl	tcp_timer_needed
 2975 1208 47E0     		b	.L148
 2976              	.L155:
 2977              		.loc 1 714 0
 2978 120a 301C     		mov	r0, r6
 2979 120c FEF7C2FF 		bl	tcp_receive
 2980              		.loc 1 715 0
 2981 1210 724B     		ldr	r3, .L213+4
 2982 1212 1B78     		ldrb	r3, [r3]
 2983 1214 DC06     		lsl	r4, r3, #27
 2984 1216 40D5     		bpl	.L148
 2985 1218 714B     		ldr	r3, .L213+8
 2986 121a F26D     		ldr	r2, [r6, #92]
 2987 121c 1B68     		ldr	r3, [r3]
 2988 121e 9A42     		cmp	r2, r3
 2989 1220 3BD1     		bne	.L148
 2990              		.loc 1 717 0
 2991 1222 301C     		mov	r0, r6
 2992 1224 FFF7FEFF 		bl	tcp_pcb_purge
 2993              		.loc 1 718 0
 2994 1228 6E4B     		ldr	r3, .L213+12
 2995 122a 1968     		ldr	r1, [r3]
 2996 122c 8E42     		cmp	r6, r1
 2997 122e 03D1     		bne	.L186
 2998 1230 1A1C     		mov	r2, r3
 2999 1232 F368     		ldr	r3, [r6, #12]
 3000 1234 1360     		str	r3, [r2]
 3001 1236 14E0     		b	.L187
 3002              	.L186:
 3003 1238 6B4B     		ldr	r3, .L213+16
 3004 123a 1960     		str	r1, [r3]
 3005 123c 0029     		cmp	r1, #0
 3006 123e 10D0     		beq	.L187
 3007 1240 CA68     		ldr	r2, [r1, #12]
 3008 1242 9642     		cmp	r6, r2
 3009 1244 09D1     		bne	.L188
 3010 1246 0A1C     		mov	r2, r1
 3011 1248 02E0     		b	.L189
 3012              	.L191:
 3013 124a D368     		ldr	r3, [r2, #12]
 3014 124c 9E42     		cmp	r6, r3
 3015 124e 02D1     		bne	.L190
 3016              	.L189:
 3017 1250 F368     		ldr	r3, [r6, #12]
 3018 1252 D360     		str	r3, [r2, #12]
 3019 1254 05E0     		b	.L187
 3020              	.L190:
 3021 1256 1A1C     		mov	r2, r3
 3022 1258 00E0     		b	.L207
 3023              	.L188:
 3024 125a 6349     		ldr	r1, .L213+16
 3025              	.L207:
 3026 125c 0A60     		str	r2, [r1]
 3027 125e 002A     		cmp	r2, #0
 3028 1260 F3D1     		bne	.L191
 3029              	.L187:
 3030 1262 0023     		mov	r3, #0
 3031 1264 F360     		str	r3, [r6, #12]
 3032              		.loc 1 719 0
 3033 1266 0A23     		mov	r3, #10
 3034 1268 3361     		str	r3, [r6, #16]
 3035              		.loc 1 720 0
 3036 126a 604A     		ldr	r2, .L213+20
 3037 126c 1368     		ldr	r3, [r2]
 3038 126e F360     		str	r3, [r6, #12]
 3039 1270 1660     		str	r6, [r2]
 3040 1272 FFF7FEFF 		bl	tcp_timer_needed
 3041 1276 10E0     		b	.L148
 3042              	.L156:
 3043              		.loc 1 724 0
 3044 1278 301C     		mov	r0, r6
 3045 127a FEF78BFF 		bl	tcp_receive
 3046              		.loc 1 725 0
 3047 127e 574B     		ldr	r3, .L213+4
 3048 1280 1B78     		ldrb	r3, [r3]
 3049 1282 D906     		lsl	r1, r3, #27
 3050 1284 09D5     		bpl	.L148
 3051 1286 564B     		ldr	r3, .L213+8
 3052 1288 F26D     		ldr	r2, [r6, #92]
 3053 128a 1B68     		ldr	r3, [r3]
 3054 128c 9A42     		cmp	r2, r3
 3055 128e 04D1     		bne	.L148
 3056              		.loc 1 728 0
 3057 1290 514B     		ldr	r3, .L213
 3058 1292 1A78     		ldrb	r2, [r3]
 3059 1294 1021     		mov	r1, #16
 3060 1296 0A43     		orr	r2, r2, r1
 3061 1298 1A70     		strb	r2, [r3]
 3062              	.LVL147:
 3063              	.L148:
 3064              	.LBE21:
 3065              	.LBE20:
 3066              		.loc 1 296 0
 3067 129a 4F4B     		ldr	r3, .L213
 3068 129c 1B78     		ldrb	r3, [r3]
 3069 129e 1A07     		lsl	r2, r3, #28
 3070 12a0 11D5     		bpl	.L192
 3071              		.loc 1 301 0
 3072 12a2 9823     		mov	r3, #152
 3073 12a4 F358     		ldr	r3, [r6, r3]
 3074 12a6 002B     		cmp	r3, #0
 3075 12a8 04D0     		beq	.L193
 3076 12aa B069     		ldr	r0, [r6, #24]
 3077              	.LVL148:
 3078 12ac 0621     		mov	r1, #6
 3079 12ae 4942     		neg	r1, r1
 3080 12b0 00F0DCF8 		bl	.L218
 3081              	.LVL149:
 3082              	.L193:
 3083              		.loc 1 302 0
 3084 12b4 4B48     		ldr	r0, .L213+12
 3085              	.LVL150:
 3086 12b6 311C     		mov	r1, r6
 3087 12b8 FFF7FEFF 		bl	tcp_pcb_remove
 3088              		.loc 1 303 0
 3089 12bc 0220     		mov	r0, #2
 3090 12be 311C     		mov	r1, r6
 3091 12c0 FFF7FEFF 		bl	memp_free
 3092 12c4 5AE0     		b	.L168
 3093              	.LVL151:
 3094              	.L192:
 3095              		.loc 1 304 0
 3096 12c6 DC06     		lsl	r4, r3, #27
 3097 12c8 08D5     		bpl	.L194
 3098              	.LVL152:
 3099              		.loc 1 307 0
 3100 12ca 4648     		ldr	r0, .L213+12
 3101              	.LVL153:
 3102 12cc 311C     		mov	r1, r6
 3103 12ce FFF7FEFF 		bl	tcp_pcb_remove
 3104              		.loc 1 308 0
 3105 12d2 0220     		mov	r0, #2
 3106 12d4 311C     		mov	r1, r6
 3107 12d6 FFF7FEFF 		bl	memp_free
 3108 12da 4FE0     		b	.L168
 3109              	.LVL154:
 3110              	.L194:
 3111              		.loc 1 314 0
 3112 12dc 7023     		mov	r3, #112
 3113 12de F25A     		ldrh	r2, [r6, r3]
 3114 12e0 002A     		cmp	r2, #0
 3115 12e2 07D0     		beq	.L195
 3116              		.loc 1 315 0
 3117 12e4 8823     		mov	r3, #136
 3118 12e6 F358     		ldr	r3, [r6, r3]
 3119 12e8 002B     		cmp	r3, #0
 3120 12ea 03D0     		beq	.L195
 3121 12ec B069     		ldr	r0, [r6, #24]
 3122              	.LVL155:
 3123 12ee 311C     		mov	r1, r6
 3124 12f0 00F0BCF8 		bl	.L218
 3125              	.LVL156:
 3126              	.L195:
 3127              		.loc 1 318 0
 3128 12f4 3E4B     		ldr	r3, .L213+24
 3129 12f6 1968     		ldr	r1, [r3]
 3130 12f8 0029     		cmp	r1, #0
 3131 12fa 24D0     		beq	.L196
 3132              		.loc 1 319 0
 3133 12fc 374B     		ldr	r3, .L213+4
 3134 12fe 1B78     		ldrb	r3, [r3]
 3135 1300 1A07     		lsl	r2, r3, #28
 3136 1302 03D5     		bpl	.L197
 3137              		.loc 1 320 0
 3138 1304 4B7B     		ldrb	r3, [r1, #13]
 3139 1306 0122     		mov	r2, #1
 3140 1308 1343     		orr	r3, r3, r2
 3141 130a 4B73     		strb	r3, [r1, #13]
 3142              	.L197:
 3143              		.loc 1 324 0
 3144 130c 8C23     		mov	r3, #140
 3145 130e F458     		ldr	r4, [r6, r3]
 3146 1310 002C     		cmp	r4, #0
 3147 1312 09D0     		beq	.L198
 3148 1314 B069     		ldr	r0, [r6, #24]
 3149              	.LVL157:
 3150 1316 364B     		ldr	r3, .L213+24
 3151 1318 1A68     		ldr	r2, [r3]
 3152 131a 311C     		mov	r1, r6
 3153 131c 0023     		mov	r3, #0
 3154 131e 00F0A6F8 		bl	.L217
 3155 1322 0006     		lsl	r0, r0, #24
 3156 1324 000E     		lsr	r0, r0, #24
 3157              	.LVL158:
 3158 1326 08E0     		b	.L199
 3159              	.LVL159:
 3160              	.L198:
 3161 1328 314B     		ldr	r3, .L213+24
 3162 132a 1A68     		ldr	r2, [r3]
 3163 132c 0020     		mov	r0, #0
 3164              	.LVL160:
 3165 132e 311C     		mov	r1, r6
 3166 1330 0023     		mov	r3, #0
 3167 1332 FFF7FEFF 		bl	tcp_recv_null
 3168 1336 0006     		lsl	r0, r0, #24
 3169 1338 000E     		lsr	r0, r0, #24
 3170              	.LVL161:
 3171              	.L199:
 3172              		.loc 1 327 0
 3173 133a 0028     		cmp	r0, #0
 3174 133c 03D0     		beq	.L196
 3175              		.loc 1 328 0
 3176 133e 2C4B     		ldr	r3, .L213+24
 3177 1340 1A68     		ldr	r2, [r3]
 3178 1342 8423     		mov	r3, #132
 3179 1344 F250     		str	r2, [r6, r3]
 3180              	.LVL162:
 3181              	.L196:
 3182              		.loc 1 335 0
 3183 1346 244B     		ldr	r3, .L213
 3184 1348 1B78     		ldrb	r3, [r3]
 3185 134a 9C06     		lsl	r4, r3, #26
 3186 134c 10D5     		bpl	.L200
 3187              		.loc 1 336 0
 3188 134e 8C23     		mov	r3, #140
 3189 1350 F458     		ldr	r4, [r6, r3]
 3190 1352 002C     		cmp	r4, #0
 3191 1354 06D0     		beq	.L201
 3192 1356 B069     		ldr	r0, [r6, #24]
 3193              	.LVL163:
 3194 1358 311C     		mov	r1, r6
 3195 135a 0022     		mov	r2, #0
 3196 135c 0023     		mov	r3, #0
 3197 135e 00F086F8 		bl	.L217
 3198 1362 05E0     		b	.L200
 3199              	.LVL164:
 3200              	.L201:
 3201 1364 0020     		mov	r0, #0
 3202              	.LVL165:
 3203 1366 311C     		mov	r1, r6
 3204 1368 0022     		mov	r2, #0
 3205 136a 0023     		mov	r3, #0
 3206 136c FFF7FEFF 		bl	tcp_recv_null
 3207              	.LVL166:
 3208              	.L200:
 3209              		.loc 1 339 0
 3210 1370 204A     		ldr	r2, .L213+28
 3211 1372 0023     		mov	r3, #0
 3212 1374 1360     		str	r3, [r2]
 3213              		.loc 1 341 0
 3214 1376 301C     		mov	r0, r6
 3215              	.LVL167:
 3216 1378 FFF7FEFF 		bl	tcp_output
 3217              	.LVL168:
 3218              	.L168:
 3219              		.loc 1 349 0
 3220 137c 1D4B     		ldr	r3, .L213+28
 3221 137e 0022     		mov	r2, #0
 3222 1380 1A60     		str	r2, [r3]
 3223              		.loc 1 353 0
 3224 1382 1D4B     		ldr	r3, .L213+32
 3225 1384 5868     		ldr	r0, [r3, #4]
 3226 1386 0028     		cmp	r0, #0
 3227 1388 61D0     		beq	.L205
 3228              		.loc 1 355 0
 3229 138a FFF7FEFF 		bl	pbuf_free
 3230              		.loc 1 356 0
 3231 138e 1A4A     		ldr	r2, .L213+32
 3232 1390 0023     		mov	r3, #0
 3233 1392 5360     		str	r3, [r2, #4]
 3234 1394 5BE0     		b	.L205
 3235              	.LVL169:
 3236              	.L208:
 3237              		.loc 1 364 0
 3238 1396 194A     		ldr	r2, .L213+36
 3239 1398 A021     		mov	r1, #160
 3240 139a 535A     		ldrh	r3, [r2, r1]
 3241 139c 0133     		add	r3, r3, #1
 3242 139e 5352     		strh	r3, [r2, r1]
 3243              		.loc 1 365 0
 3244 13a0 9621     		mov	r1, #150
 3245 13a2 535A     		ldrh	r3, [r2, r1]
 3246 13a4 0133     		add	r3, r3, #1
 3247 13a6 5352     		strh	r3, [r2, r1]
 3248              		.loc 1 366 0
 3249 13a8 154B     		ldr	r3, .L213+40
 3250 13aa 1B68     		ldr	r3, [r3]
 3251 13ac 154A     		ldr	r2, .L213+44
 3252 13ae 1568     		ldr	r5, [r2]
 3253 13b0 0B4A     		ldr	r2, .L213+8
 3254 13b2 1068     		ldr	r0, [r2]
 3255 13b4 144A     		ldr	r2, .L213+48
 3256 13b6 1188     		ldrh	r1, [r2]
 3257 13b8 144A     		ldr	r2, .L213+52
 3258 13ba 1268     		ldr	r2, [r2]
 3259 13bc 8918     		add	r1, r1, r2
 3260 13be 1A1C     		mov	r2, r3
 3261 13c0 1032     		add	r2, r2, #16
 3262 13c2 0C33     		add	r3, r3, #12
 3263 13c4 6C88     		ldrh	r4, [r5, #2]
 3264              	.LVL170:
 3265 13c6 0094     		str	r4, [sp]
 3266 13c8 2C88     		ldrh	r4, [r5]
 3267 13ca 0194     		str	r4, [sp, #4]
 3268 13cc FFF7FEFF 		bl	tcp_rst
 3269              	.LVL171:
 3270              	.L204:
 3271              		.loc 1 370 0
 3272 13d0 381C     		mov	r0, r7
 3273 13d2 FFF7FEFF 		bl	pbuf_free
 3274 13d6 3AE0     		b	.L205
 3275              	.L214:
 3276              		.align	2
 3277              	.L213:
 3278 13d8 28000000 		.word	recv_flags
 3279 13dc 24000000 		.word	flags
 3280 13e0 20000000 		.word	ackno
 3281 13e4 00000000 		.word	tcp_active_pcbs
 3282 13e8 00000000 		.word	tcp_tmp_pcb
 3283 13ec 00000000 		.word	tcp_tw_pcbs
 3284 13f0 2C000000 		.word	recv_data
 3285 13f4 00000000 		.word	tcp_input_pcb
 3286 13f8 00000000 		.word	inseg
 3287 13fc 00000000 		.word	lwip_stats
 3288 1400 18000000 		.word	iphdr
 3289 1404 14000000 		.word	tcphdr
 3290 1408 26000000 		.word	tcplen
 3291 140c 1C000000 		.word	seqno
 3292              	.LVL172:
 3293              	.L118:
 3294              		.loc 1 207 0
 3295 1410 124B     		ldr	r3, .L215
 3296              	.LVL173:
 3297 1412 1868     		ldr	r0, [r3]
 3298              	.LVL174:
 3299 1414 0028     		cmp	r0, #0
 3300 1416 00D1     		bne	.LCB3261
 3301 1418 35E4     		b	.L202	@long jump
 3302              	.LCB3261:
 3303              		.loc 1 209 0
 3304 141a 114B     		ldr	r3, .L215+4
 3305 141c 1C68     		ldr	r4, [r3]
 3306 141e 2588     		ldrh	r5, [r4]
 3307 1420 104B     		ldr	r3, .L215+8
 3308 1422 1E68     		ldr	r6, [r3]
 3309 1424 FFF7EBFB 		bl	.L128	@ far jump
 3310              	.LVL175:
 3311              	.L129:
 3312              		.loc 1 363 0
 3313 1428 0D4B     		ldr	r3, .L215+4
 3314              	.LVL176:
 3315 142a 1B68     		ldr	r3, [r3]
 3316 142c 9889     		ldrh	r0, [r3, #12]
 3317              	.LVL177:
 3318 142e FFF7FEFF 		bl	ntohs
 3319              	.LVL178:
 3320 1432 4107     		lsl	r1, r0, #29
 3321 1434 CCD4     		bmi	.L204
 3322 1436 AEE7     		b	.L208
 3323              	.LVL179:
 3324              	.L147:
 3325              	.LBB28:
 3326              	.LBB27:
 3327              		.loc 1 550 0
 3328 1438 0B49     		ldr	r1, .L215+12
 3329 143a 0B78     		ldrb	r3, [r1]
 3330 143c 0822     		mov	r2, #8
 3331 143e 1343     		orr	r3, r3, r2
 3332 1440 0B70     		strb	r3, [r1]
 3333              		.loc 1 551 0
 3334 1442 2621     		mov	r1, #38
 3335 1444 735C     		ldrb	r3, [r6, r1]
 3336 1446 0122     		mov	r2, #1
 3337 1448 9343     		bic	r3, r3, r2
 3338 144a 7354     		strb	r3, [r6, r1]
 3339 144c 25E7     		b	.L148
 3340              	.LVL180:
 3341              	.L205:
 3342              	.LBE27:
 3343              	.LBE28:
 3344              		.loc 1 375 0
 3345 144e 02B0     		add	sp, sp, #8
 3346              		@ sp needed for prologue
 3347              	.LVL181:
 3348              	.LVL182:
 3349              	.LVL183:
 3350              	.LVL184:
 3351              	.LVL185:
 3352 1450 04BC     		pop	{r2}
 3353 1452 9046     		mov	r8, r2
 3354 1454 F0BC     		pop	{r4, r5, r6, r7}
 3355 1456 01BC     		pop	{r0}
 3356 1458 0047     		bx	r0
 3357              	.L216:
 3358 145a C046     		.align	2
 3359              	.L215:
 3360 145c 00000000 		.word	tcp_tw_pcbs
 3361 1460 14000000 		.word	tcphdr
 3362 1464 18000000 		.word	iphdr
 3363 1468 28000000 		.word	recv_flags
 3364              	.LFE290:
 3366              		.bss
 3367              		.align	2
 3368              	inseg:
 3369 0000 00000000 		.space	20
 3369      00000000 
 3369      00000000 
 3369      00000000 
 3369      00000000 
 3370              		.align	2
 3371              	tcphdr:
 3372 0014 00000000 		.space	4
 3373              		.align	2
 3374              	iphdr:
 3375 0018 00000000 		.space	4
 3376              		.align	2
 3377              	seqno:
 3378 001c 00000000 		.space	4
 3379              		.align	2
 3380              	ackno:
 3381 0020 00000000 		.space	4
 3382              	flags:
 3383 0024 00       		.space	1
 3384 0025 00       		.align	1
 3385              	tcplen:
 3386 0026 0000     		.space	2
 3387              	recv_flags:
 3388 0028 00       		.space	1
 3389 0029 000000   		.align	2
 3390              	recv_data:
 3391 002c 00000000 		.space	4
 3392              		.comm	tcp_input_pcb,4,4
 3535              	.Letext0:
 7394              		.code 16
 7395              		.align	1
 7396              	.L218:
 7397 146c 1847     		bx	r3
 7398              	.L217:
 7399 146e 2047     		bx	r4
DEFINED SYMBOLS
                            *ABS*:00000000 tcp_in.c
     /tmp/cccKkGug.s:1      .text:00000000 $t
     /tmp/cccKkGug.s:15     .text:00000000 tcp_parseopt
     /tmp/cccKkGug.s:148    .text:000000a4 $d
     /tmp/cccKkGug.s:3371   .bss:00000014 tcphdr
     /tmp/cccKkGug.s:154    .text:000000b0 $t
     /tmp/cccKkGug.s:157    .text:000000b0 tcp_oos_insert_segment
     /tmp/cccKkGug.s:300    .text:0000018c $d
     /tmp/cccKkGug.s:3377   .bss:0000001c seqno
     /tmp/cccKkGug.s:306    .text:00000194 $t
     /tmp/cccKkGug.s:309    .text:00000194 tcp_receive
     /tmp/cccKkGug.s:732    .text:00000410 $d
     /tmp/cccKkGug.s:3382   .bss:00000024 flags
     /tmp/cccKkGug.s:3380   .bss:00000020 ackno
     /tmp/cccKkGug.s:3385   .bss:00000026 tcplen
     /tmp/cccKkGug.s:739    .text:00000424 $t
     /tmp/cccKkGug.s:1074   .text:00000630 $d
     /tmp/cccKkGug.s:3368   .bss:00000000 inseg
     /tmp/cccKkGug.s:1083   .text:00000648 $t
     /tmp/cccKkGug.s:1578   .text:00000950 $d
     /tmp/cccKkGug.s:3390   .bss:0000002c recv_data
     /tmp/cccKkGug.s:3387   .bss:00000028 recv_flags
     /tmp/cccKkGug.s:1586   .text:00000968 $t
     /tmp/cccKkGug.s:1671   .text:000009e8 $d
     /tmp/cccKkGug.s:1680   .text:000009f0 tcp_input
     /tmp/cccKkGug.s:1677   .text:000009f0 $t
     /tmp/cccKkGug.s:2197   .text:00000d28 $d
     /tmp/cccKkGug.s:3374   .bss:00000018 iphdr
     /tmp/cccKkGug.s:2211   .text:00000d5c $t
     /tmp/cccKkGug.s:2463   .rodata:00000000 $d
     /tmp/cccKkGug.s:2764   .text:00001088 $d
                            *COM*:00000004 tcp_input_pcb
     /tmp/cccKkGug.s:2779   .text:000010bc $t
     /tmp/cccKkGug.s:3278   .text:000013d8 $d
     /tmp/cccKkGug.s:3295   .text:00001410 $t
     /tmp/cccKkGug.s:3360   .text:0000145c $d
     /tmp/cccKkGug.s:7394   .text:0000146c $t

UNDEFINED SYMBOLS
ntohs
tcp_segs_free
htons
tcp_seg_free
pbuf_realloc
__divsi3
tcp_rexmit_fast
pbuf_clen
ntohl
pbuf_header
tcp_output
tcp_ticks
tcp_update_rcv_ann_wnd
pbuf_cat
tcp_send_empty_ack
tcp_seg_copy
pbuf_free
ip_addr_isbroadcast
inet_chksum_pseudo
tcp_rst
tcp_alloc
lwip_stats
tcp_active_pcbs
tcp_listen_pcbs
tcp_timer_needed
tcp_eff_send_mss
tcp_enqueue
tcp_abandon
tcp_recv_null
tcp_rexmit
tcp_pcb_purge
tcp_pcb_remove
memp_free
tcp_tmp_pcb
tcp_tw_pcbs
