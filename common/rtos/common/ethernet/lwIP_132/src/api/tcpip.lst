   1              		.code	16
   2              		.file	"tcpip.c"
  10              	.Ltext0:
  11              		.align	2
  12              		.code	16
  13              		.thumb_func
  15              	pbuf_free_int:
  16              	.LFB303:
  17              		.file 1 "rtos/common/ethernet/lwIP_132/src/api/tcpip.c"
   1:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
   2:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @file
   3:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Sequential API Main thread module
   4:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
   5:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
   6:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
   7:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /*
   8:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
   9:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * All rights reserved.
  10:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
  11:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Redistribution and use in source and binary forms, with or without modification,
  12:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * are permitted provided that the following conditions are met:
  13:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
  14:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  15:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *    this list of conditions and the following disclaimer.
  16:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *    and/or other materials provided with the distribution.
  19:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * 3. The name of the author may not be used to endorse or promote products
  20:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *    derived from this software without specific prior written permission.
  21:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
  22:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  23:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  24:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  25:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  26:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  27:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  30:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  31:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * OF SUCH DAMAGE.
  32:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
  33:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * This file is part of the lwIP TCP/IP stack.
  34:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
  35:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Author: Adam Dunkels <adam@sics.se>
  36:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
  37:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
  38:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
  39:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/opt.h"
  40:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
  41:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if !NO_SYS /* don't build if not configured for use in lwipopts.h */
  42:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
  43:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/sys.h"
  44:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/memp.h"
  45:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/pbuf.h"
  46:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/ip_frag.h"
  47:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/tcp.h"
  48:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/autoip.h"
  49:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/dhcp.h"
  50:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/igmp.h"
  51:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/dns.h"
  52:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/tcpip.h"
  53:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "lwip/init.h"
  54:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "netif/etharp.h"
  55:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #include "netif/ppp_oe.h"
  56:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
  57:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /* global variables */
  58:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void (* tcpip_init_done)(void *arg);
  59:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void *tcpip_init_done_arg;
  60:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static sys_mbox_t mbox = SYS_MBOX_NULL;
  61:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
  62:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_TCPIP_CORE_LOCKING
  63:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /** The global semaphore to lock the stack. */
  64:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** sys_sem_t lock_tcpip_core;
  65:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_TCPIP_CORE_LOCKING */
  66:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
  67:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_TCP
  68:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /* global variable that shows if the tcp timer is currently scheduled or not */
  69:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static int tcpip_tcp_timer_active;
  70:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
  71:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
  72:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Timer callback function that calls tcp_tmr() and reschedules itself.
  73:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
  74:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg unused argument
  75:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
  76:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
  77:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_tcp_timer(void *arg)
  78:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
  79:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_UNUSED_ARG(arg);
  80:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
  81:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   /* call TCP timer handler */
  82:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   tcp_tmr();
  83:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   /* timer still needed? */
  84:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   if (tcp_active_pcbs || tcp_tw_pcbs) {
  85:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     /* restart timer */
  86:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  87:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   } else {
  88:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     /* disable timer */
  89:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     tcpip_tcp_timer_active = 0;
  90:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
  91:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
  92:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
  93:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if !NO_SYS
  94:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
  95:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Called from TCP_REG when registering a new PCB:
  96:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * the reason is to have the TCP timer only running when
  97:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * there are active (or time-wait) PCBs.
  98:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
  99:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** void
 100:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcp_timer_needed(void)
 101:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 102:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   /* timer is off but needed again? */
 103:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 104:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     /* enable and start timer */
 105:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     tcpip_tcp_timer_active = 1;
 106:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 107:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
 108:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 109:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* !NO_SYS */
 110:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_TCP */
 111:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 112:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if IP_REASSEMBLY
 113:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 114:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Timer callback function that calls ip_reass_tmr() and reschedules itself.
 115:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 116:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg unused argument
 117:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 118:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
 119:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** ip_reass_timer(void *arg)
 120:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 121:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_UNUSED_ARG(arg);
 122:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: ip_reass_tmr()\n"));
 123:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   ip_reass_tmr();
 124:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 125:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 126:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* IP_REASSEMBLY */
 127:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 128:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_ARP
 129:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 130:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Timer callback function that calls etharp_tmr() and reschedules itself.
 131:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 132:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg unused argument
 133:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 134:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
 135:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** arp_timer(void *arg)
 136:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 137:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_UNUSED_ARG(arg);
 138:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: etharp_tmr()\n"));
 139:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   etharp_tmr();
 140:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 141:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 142:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_ARP */
 143:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 144:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_DHCP
 145:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 146:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Timer callback function that calls dhcp_coarse_tmr() and reschedules itself.
 147:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 148:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg unused argument
 149:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 150:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
 151:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** dhcp_timer_coarse(void *arg)
 152:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 153:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_UNUSED_ARG(arg);
 154:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
 155:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   dhcp_coarse_tmr();
 156:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 157:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 158:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 159:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 160:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Timer callback function that calls dhcp_fine_tmr() and reschedules itself.
 161:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 162:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg unused argument
 163:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 164:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
 165:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** dhcp_timer_fine(void *arg)
 166:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 167:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_UNUSED_ARG(arg);
 168:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
 169:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   dhcp_fine_tmr();
 170:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 171:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 172:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_DHCP */
 173:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 174:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_AUTOIP
 175:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 176:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Timer callback function that calls autoip_tmr() and reschedules itself.
 177:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 178:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg unused argument
 179:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 180:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
 181:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** autoip_timer(void *arg)
 182:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 183:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_UNUSED_ARG(arg);
 184:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: autoip_tmr()\n"));
 185:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   autoip_tmr();
 186:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(AUTOIP_TMR_INTERVAL, autoip_timer, NULL);
 187:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 188:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_AUTOIP */
 189:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 190:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_IGMP
 191:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 192:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Timer callback function that calls igmp_tmr() and reschedules itself.
 193:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 194:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg unused argument
 195:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 196:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
 197:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** igmp_timer(void *arg)
 198:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 199:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_UNUSED_ARG(arg);
 200:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: igmp_tmr()\n"));
 201:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   igmp_tmr();
 202:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
 203:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 204:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_IGMP */
 205:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 206:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_DNS
 207:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 208:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Timer callback function that calls dns_tmr() and reschedules itself.
 209:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 210:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg unused argument
 211:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 212:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
 213:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** dns_timer(void *arg)
 214:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 215:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_UNUSED_ARG(arg);
 216:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: dns_tmr()\n"));
 217:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   dns_tmr();
 218:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
 219:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 220:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_DNS */
 221:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 222:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 223:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * The main lwIP thread. This thread has exclusive access to lwIP core functions
 224:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * (unless access to them is not locked). Other threads communicate with this
 225:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * thread using message boxes.
 226:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 227:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * It also starts all the timers to make sure they are running in the right
 228:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * thread context.
 229:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 230:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg unused argument
 231:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 232:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
 233:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_thread(void *arg)
 234:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 235:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   struct tcpip_msg *msg;
 236:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LWIP_UNUSED_ARG(arg);
 237:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 238:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if IP_REASSEMBLY
 239:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 240:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* IP_REASSEMBLY */
 241:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_ARP
 242:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 243:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_ARP */
 244:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_DHCP
 245:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 246:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 247:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_DHCP */
 248:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_AUTOIP
 249:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(AUTOIP_TMR_INTERVAL, autoip_timer, NULL);
 250:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_AUTOIP */
 251:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_IGMP
 252:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
 253:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_IGMP */
 254:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_DNS
 255:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
 256:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_DNS */
 257:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 258:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   if (tcpip_init_done != NULL) {
 259:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     tcpip_init_done(tcpip_init_done_arg);
 260:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
 261:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 262:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LOCK_TCPIP_CORE();
 263:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   while (1) {                          /* MAIN Loop */
 264:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_mbox_fetch(mbox, (void *)&msg);
 265:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     switch (msg->type) {
 266:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_NETCONN
 267:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     case TCPIP_MSG_API:
 268:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
 269:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
 270:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       break;
 271:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_NETCONN */
 272:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 273:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     case TCPIP_MSG_INPKT:
 274:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
 275:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_ARP
 276:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       if (msg->msg.inp.netif->flags & NETIF_FLAG_ETHARP) {
 277:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****         ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
 278:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       } else
 279:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_ARP */
 280:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       { ip_input(msg->msg.inp.p, msg->msg.inp.netif);
 281:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       }
 282:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 283:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       break;
 284:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 285:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_NETIF_API
 286:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     case TCPIP_MSG_NETIFAPI:
 287:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: Netif API message %p\n", (void *)msg));
 288:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       msg->msg.netifapimsg->function(&(msg->msg.netifapimsg->msg));
 289:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       break;
 290:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_NETIF_API */
 291:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 292:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     case TCPIP_MSG_CALLBACK:
 293:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
 294:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       msg->msg.cb.f(msg->msg.cb.ctx);
 295:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       memp_free(MEMP_TCPIP_MSG_API, msg);
 296:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       break;
 297:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 298:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     case TCPIP_MSG_TIMEOUT:
 299:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
 300:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 301:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       memp_free(MEMP_TCPIP_MSG_API, msg);
 302:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       break;
 303:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     case TCPIP_MSG_UNTIMEOUT:
 304:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
 305:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 306:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       memp_free(MEMP_TCPIP_MSG_API, msg);
 307:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       break;
 308:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 309:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     default:
 310:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       break;
 311:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     }
 312:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
 313:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 314:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 315:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 316:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Pass a received packet to tcpip_thread for input processing
 317:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 318:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param p the received packet, p->payload pointing to the Ethernet header or
 319:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *          to an IP header (if netif doesn't got NETIF_FLAG_ETHARP flag)
 320:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param inp the network interface on which the packet was received
 321:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 322:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 323:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_input(struct pbuf *p, struct netif *inp)
 324:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 325:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   struct tcpip_msg *msg;
 326:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 327:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   if (mbox != SYS_MBOX_NULL) {
 328:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg = memp_malloc(MEMP_TCPIP_MSG_INPKT);
 329:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     if (msg == NULL) {
 330:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       return ERR_MEM;
 331:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     }
 332:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 333:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->type = TCPIP_MSG_INPKT;
 334:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->msg.inp.p = p;
 335:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->msg.inp.netif = inp;
 336:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     if (sys_mbox_trypost(mbox, msg) != ERR_OK) {
 337:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 338:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       return ERR_MEM;
 339:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     }
 340:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     return ERR_OK;
 341:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
 342:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return ERR_VAL;
 343:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 344:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 345:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 346:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Call a specific function in the thread context of
 347:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * tcpip_thread for easy access synchronization.
 348:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * A function called in that way may access lwIP core code
 349:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * without fearing concurrent access.
 350:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 351:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param f the function to call
 352:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param ctx parameter passed to f
 353:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param block 1 to block until the request is posted, 0 to non-blocking mode
 354:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @return ERR_OK if the function was called, another err_t if not
 355:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 356:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 357:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_callback_with_block(void (*f)(void *ctx), void *ctx, u8_t block)
 358:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 359:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   struct tcpip_msg *msg;
 360:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 361:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   if (mbox != SYS_MBOX_NULL) {
 362:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg = memp_malloc(MEMP_TCPIP_MSG_API);
 363:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     if (msg == NULL) {
 364:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       return ERR_MEM;
 365:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     }
 366:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 367:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->type = TCPIP_MSG_CALLBACK;
 368:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->msg.cb.f = f;
 369:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->msg.cb.ctx = ctx;
 370:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     if (block) {
 371:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       sys_mbox_post(mbox, msg);
 372:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     } else {
 373:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       if (sys_mbox_trypost(mbox, msg) != ERR_OK) {
 374:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****         memp_free(MEMP_TCPIP_MSG_API, msg);
 375:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****         return ERR_MEM;
 376:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       }
 377:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     }
 378:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     return ERR_OK;
 379:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
 380:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return ERR_VAL;
 381:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 382:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 383:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 384:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * call sys_timeout in tcpip_thread
 385:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 386:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param msec time in miliseconds for timeout
 387:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param h function to be called on timeout
 388:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg argument to pass to timeout function h
 389:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @return ERR_MEM on memory error, ERR_OK otherwise
 390:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 391:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 392:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)
 393:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 394:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   struct tcpip_msg *msg;
 395:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 396:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   if (mbox != SYS_MBOX_NULL) {
 397:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg = memp_malloc(MEMP_TCPIP_MSG_API);
 398:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     if (msg == NULL) {
 399:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       return ERR_MEM;
 400:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     }
 401:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 402:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->type = TCPIP_MSG_TIMEOUT;
 403:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->msg.tmo.msecs = msecs;
 404:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->msg.tmo.h = h;
 405:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->msg.tmo.arg = arg;
 406:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_mbox_post(mbox, msg);
 407:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     return ERR_OK;
 408:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
 409:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return ERR_VAL;
 410:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 411:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 412:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 413:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * call sys_untimeout in tcpip_thread
 414:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 415:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param msec time in miliseconds for timeout
 416:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param h function to be called on timeout
 417:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg argument to pass to timeout function h
 418:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @return ERR_MEM on memory error, ERR_OK otherwise
 419:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 420:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 421:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_untimeout(sys_timeout_handler h, void *arg)
 422:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 423:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   struct tcpip_msg *msg;
 424:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 425:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   if (mbox != SYS_MBOX_NULL) {
 426:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg = memp_malloc(MEMP_TCPIP_MSG_API);
 427:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     if (msg == NULL) {
 428:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       return ERR_MEM;
 429:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     }
 430:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 431:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->type = TCPIP_MSG_UNTIMEOUT;
 432:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->msg.tmo.h = h;
 433:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg->msg.tmo.arg = arg;
 434:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_mbox_post(mbox, msg);
 435:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     return ERR_OK;
 436:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
 437:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return ERR_VAL;
 438:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 439:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 440:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_NETCONN
 441:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 442:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Call the lower part of a netconn_* function
 443:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * This function is then running in the thread context
 444:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * of tcpip_thread and has exclusive access to lwIP core code.
 445:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 446:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param apimsg a struct containing the function to call and its parameters
 447:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @return ERR_OK if the function was called, another err_t if not
 448:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 449:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 450:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_apimsg(struct api_msg *apimsg)
 451:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 452:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   struct tcpip_msg msg;
 453:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   
 454:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   if (mbox != SYS_MBOX_NULL) {
 455:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg.type = TCPIP_MSG_API;
 456:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg.msg.apimsg = apimsg;
 457:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_mbox_post(mbox, &msg);
 458:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_arch_sem_wait(apimsg->msg.conn->op_completed, 0);
 459:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     return ERR_OK;
 460:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
 461:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return ERR_VAL;
 462:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 463:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 464:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_TCPIP_CORE_LOCKING
 465:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 466:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Call the lower part of a netconn_* function
 467:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * This function has exclusive access to lwIP core code by locking it
 468:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * before the function is called.
 469:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 470:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param apimsg a struct containing the function to call and its parameters
 471:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @return ERR_OK (only for compatibility fo tcpip_apimsg())
 472:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 473:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 474:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_apimsg_lock(struct api_msg *apimsg)
 475:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 476:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LOCK_TCPIP_CORE();
 477:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   apimsg->function(&(apimsg->msg));
 478:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   UNLOCK_TCPIP_CORE();
 479:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return ERR_OK;
 480:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 481:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 482:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_TCPIP_CORE_LOCKING */
 483:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_NETCONN */
 484:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 485:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_NETIF_API
 486:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if !LWIP_TCPIP_CORE_LOCKING
 487:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 488:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Much like tcpip_apimsg, but calls the lower part of a netifapi_*
 489:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * function.
 490:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 491:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param netifapimsg a struct containing the function to call and its parameters
 492:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @return error code given back by the function that was called
 493:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 494:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 495:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_netifapi(struct netifapi_msg* netifapimsg)
 496:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 497:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   struct tcpip_msg msg;
 498:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   
 499:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   if (mbox != SYS_MBOX_NULL) {
 500:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     netifapimsg->msg.sem = sys_sem_new(0);
 501:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     if (netifapimsg->msg.sem == SYS_SEM_NULL) {
 502:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       netifapimsg->msg.err = ERR_MEM;
 503:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****       return netifapimsg->msg.err;
 504:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     }
 505:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     
 506:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg.type = TCPIP_MSG_NETIFAPI;
 507:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     msg.msg.netifapimsg = netifapimsg;
 508:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_mbox_post(mbox, &msg);
 509:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_sem_wait(netifapimsg->msg.sem);
 510:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     sys_sem_free(netifapimsg->msg.sem);
 511:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****     return netifapimsg->msg.err;
 512:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   }
 513:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return ERR_VAL;
 514:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 515:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #else /* !LWIP_TCPIP_CORE_LOCKING */
 516:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 517:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Call the lower part of a netifapi_* function
 518:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * This function has exclusive access to lwIP core code by locking it
 519:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * before the function is called.
 520:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 521:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param netifapimsg a struct containing the function to call and its parameters
 522:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @return ERR_OK (only for compatibility fo tcpip_netifapi())
 523:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 524:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 525:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_netifapi_lock(struct netifapi_msg* netifapimsg)
 526:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 527:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   LOCK_TCPIP_CORE();  
 528:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   netifapimsg->function(&(netifapimsg->msg));
 529:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   UNLOCK_TCPIP_CORE();
 530:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return netifapimsg->msg.err;
 531:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 532:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* !LWIP_TCPIP_CORE_LOCKING */
 533:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_NETIF_API */
 534:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 535:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 536:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Initialize this module:
 537:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * - initialize all sub modules
 538:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * - start the tcpip_thread
 539:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 540:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param initfunc a function to call when tcpip_thread is running and finished initializing
 541:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param arg argument to pass to initfunc
 542:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 543:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** void
 544:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** tcpip_init(void (* initfunc)(void *), void *arg)
 545:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 546:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   lwip_init();
 547:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 548:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   tcpip_init_done = initfunc;
 549:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   tcpip_init_done_arg = arg;
 550:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   mbox = sys_mbox_new(TCPIP_MBOX_SIZE);
 551:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #if LWIP_TCPIP_CORE_LOCKING
 552:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   lock_tcpip_core = sys_sem_new(1);
 553:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** #endif /* LWIP_TCPIP_CORE_LOCKING */
 554:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 555:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 556:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 557:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 558:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 559:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * Simple callback function used with tcpip_callback to free a pbuf
 560:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * (pbuf_free has a wrong signature for tcpip_callback)
 561:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 562:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param p The pbuf (chain) to be dereferenced.
 563:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 564:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** static void
 565:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** pbuf_free_int(void *p)
 566:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
  18              		.loc 1 566 0
  19 0000 00B5     		push	{lr}
  20              	.LCFI0:
  21              	.LVL0:
 567:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   struct pbuf *q = p;
 568:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   pbuf_free(q);
  22              		.loc 1 568 0
  23 0002 FFF7FEFF 		bl	pbuf_free
  24              	.LVL1:
 569:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
  25              		.loc 1 569 0
  26              		@ sp needed for prologue
  27 0006 01BC     		pop	{r0}
  28 0008 0047     		bx	r0
  29              	.LFE303:
  31              		.section	.rodata.str1.4,"aMS",%progbits,1
  32              		.align	2
  33              	.LC3:
  34 0000 74637069 		.ascii	"tcpip_thread\000"
  34      705F7468 
  34      72656164 
  34      00
  35 000d 000000   		.text
  36 000a C046     		.align	2
  37              		.global	tcpip_init
  38              		.code	16
  39              		.thumb_func
  41              	tcpip_init:
  42              	.LFB302:
  43              		.loc 1 545 0
  44 000c 30B5     		push	{r4, r5, lr}
  45              	.LCFI1:
  46              	.LVL2:
  47 000e 81B0     		sub	sp, sp, #4
  48              	.LCFI2:
  49 0010 041C     		mov	r4, r0
  50 0012 0D1C     		mov	r5, r1
  51              		.loc 1 546 0
  52 0014 FFF7FEFF 		bl	lwip_init
  53              	.LVL3:
  54              		.loc 1 548 0
  55 0018 0A4B     		ldr	r3, .L5
  56 001a 1C60     		str	r4, [r3]
  57              		.loc 1 549 0
  58 001c 0A4B     		ldr	r3, .L5+4
  59 001e 1D60     		str	r5, [r3]
  60              		.loc 1 550 0
  61 0020 0020     		mov	r0, #0
  62 0022 FFF7FEFF 		bl	sys_mbox_new
  63 0026 094B     		ldr	r3, .L5+8
  64 0028 1860     		str	r0, [r3]
  65              		.loc 1 555 0
  66 002a 0948     		ldr	r0, .L5+12
  67 002c 0949     		ldr	r1, .L5+16
  68 002e 0823     		mov	r3, #8
  69 0030 0093     		str	r3, [sp]
  70 0032 0022     		mov	r2, #0
  71 0034 084B     		ldr	r3, .L5+20
  72 0036 FFF7FEFF 		bl	sys_thread_new
  73              		.loc 1 556 0
  74 003a 01B0     		add	sp, sp, #4
  75              		@ sp needed for prologue
  76              	.LVL4:
  77              	.LVL5:
  78 003c 30BC     		pop	{r4, r5}
  79 003e 01BC     		pop	{r0}
  80 0040 0047     		bx	r0
  81              	.L6:
  82 0042 C046     		.align	2
  83              	.L5:
  84 0044 04000000 		.word	tcpip_init_done
  85 0048 08000000 		.word	tcpip_init_done_arg
  86 004c 00000000 		.word	mbox
  87 0050 00000000 		.word	.LC3
  88 0054 00000000 		.word	tcpip_thread
  89 0058 26020000 		.word	550
  90              	.LFE302:
  92              		.align	2
  93              		.global	tcp_timer_needed
  94              		.code	16
  95              		.thumb_func
  97              	tcp_timer_needed:
  98              	.LFB291:
  99              		.loc 1 101 0
 100 005c 00B5     		push	{lr}
 101              	.LCFI3:
 102              		.loc 1 103 0
 103 005e 0B4B     		ldr	r3, .L11
 104 0060 1B68     		ldr	r3, [r3]
 105 0062 002B     		cmp	r3, #0
 106 0064 0FD1     		bne	.L10
 107 0066 0A4B     		ldr	r3, .L11+4
 108 0068 1B68     		ldr	r3, [r3]
 109 006a 002B     		cmp	r3, #0
 110 006c 03D1     		bne	.L9
 111 006e 094B     		ldr	r3, .L11+8
 112 0070 1B68     		ldr	r3, [r3]
 113 0072 002B     		cmp	r3, #0
 114 0074 07D0     		beq	.L10
 115              	.L9:
 116              		.loc 1 105 0
 117 0076 054B     		ldr	r3, .L11
 118 0078 0122     		mov	r2, #1
 119 007a 1A60     		str	r2, [r3]
 120              		.loc 1 106 0
 121 007c 0649     		ldr	r1, .L11+12
 122 007e FA20     		mov	r0, #250
 123 0080 0022     		mov	r2, #0
 124 0082 FFF7FEFF 		bl	sys_timeout
 125              	.L10:
 126              		.loc 1 108 0
 127              		@ sp needed for prologue
 128 0086 01BC     		pop	{r0}
 129 0088 0047     		bx	r0
 130              	.L12:
 131 008a C046     		.align	2
 132              	.L11:
 133 008c 0C000000 		.word	tcpip_tcp_timer_active
 134 0090 00000000 		.word	tcp_active_pcbs
 135 0094 00000000 		.word	tcp_tw_pcbs
 136 0098 00000000 		.word	tcpip_tcp_timer
 137              	.LFE291:
 139              		.align	2
 140              		.code	16
 141              		.thumb_func
 143              	tcpip_thread:
 144              	.LFB296:
 145              		.loc 1 234 0
 146 009c F0B5     		push	{r4, r5, r6, r7, lr}
 147              	.LCFI4:
 148 009e 4746     		mov	r7, r8
 149 00a0 80B4     		push	{r7}
 150              	.LCFI5:
 151              	.LVL6:
 152 00a2 81B0     		sub	sp, sp, #4
 153              	.LCFI6:
 154              		.loc 1 239 0
 155 00a4 FA20     		mov	r0, #250
 156              	.LVL7:
 157 00a6 8000     		lsl	r0, r0, #2
 158 00a8 2F49     		ldr	r1, .L26
 159 00aa 0022     		mov	r2, #0
 160 00ac FFF7FEFF 		bl	sys_timeout
 161              		.loc 1 242 0
 162 00b0 2E49     		ldr	r1, .L26+4
 163 00b2 2F48     		ldr	r0, .L26+8
 164 00b4 0022     		mov	r2, #0
 165 00b6 FFF7FEFF 		bl	sys_timeout
 166              		.loc 1 245 0
 167 00ba 2E49     		ldr	r1, .L26+12
 168 00bc 2E48     		ldr	r0, .L26+16
 169 00be 0022     		mov	r2, #0
 170 00c0 FFF7FEFF 		bl	sys_timeout
 171              		.loc 1 246 0
 172 00c4 FA20     		mov	r0, #250
 173 00c6 4000     		lsl	r0, r0, #1
 174 00c8 2C49     		ldr	r1, .L26+20
 175 00ca 0022     		mov	r2, #0
 176 00cc FFF7FEFF 		bl	sys_timeout
 177              		.loc 1 258 0
 178 00d0 2B4B     		ldr	r3, .L26+24
 179 00d2 1A68     		ldr	r2, [r3]
 180 00d4 002A     		cmp	r2, #0
 181 00d6 03D0     		beq	.L24
 182              		.loc 1 259 0
 183 00d8 2A4B     		ldr	r3, .L26+28
 184 00da 1868     		ldr	r0, [r3]
 185 00dc 00F088F9 		bl	.L28
 186              	.L24:
 187              		.loc 1 264 0
 188 00e0 294C     		ldr	r4, .L26+32
 189              		.loc 1 265 0
 190 00e2 2A4D     		ldr	r5, .L26+36
 191              		.loc 1 276 0
 192 00e4 2D27     		mov	r7, #45
 193 00e6 2020     		mov	r0, #32
 194 00e8 8046     		mov	r8, r0
 195              	.LVL8:
 196              	.L25:
 197              		.loc 1 264 0
 198 00ea 2068     		ldr	r0, [r4]
 199 00ec 6946     		mov	r1, sp
 200 00ee FFF7FEFF 		bl	sys_mbox_fetch
 201              		.loc 1 265 0
 202 00f2 009A     		ldr	r2, [sp]
 203 00f4 1368     		ldr	r3, [r2]
 204 00f6 042B     		cmp	r3, #4
 205 00f8 F7D8     		bhi	.L25
 206 00fa 9B00     		lsl	r3, r3, #2
 207 00fc EB58     		ldr	r3, [r5, r3]
 208 00fe 9F46     		mov	pc, r3
 209              		.section	.rodata
 210              		.align	2
 211              	.L20:
 212 0000 00010000 		.word	.L15
 213 0004 0C010000 		.word	.L16
 214 0008 2E010000 		.word	.L17
 215 000c 40010000 		.word	.L18
 216 0010 54010000 		.word	.L19
 217              		.text
 218              	.L15:
 219              		.loc 1 269 0
 220 0100 9368     		ldr	r3, [r2, #8]
 221 0102 181D     		add	r0, r3, #4
 222 0104 1B68     		ldr	r3, [r3]
 223 0106 00F074F9 		bl	.L29
 224 010a EEE7     		b	.L25
 225              	.L16:
 226              		.loc 1 276 0
 227 010c D168     		ldr	r1, [r2, #12]
 228 010e CB5D     		ldrb	r3, [r1, r7]
 229 0110 4046     		mov	r0, r8
 230 0112 0342     		tst	r3, r0
 231 0114 03D0     		beq	.L21
 232              		.loc 1 277 0
 233 0116 9068     		ldr	r0, [r2, #8]
 234 0118 FFF7FEFF 		bl	ethernet_input
 235 011c 02E0     		b	.L22
 236              	.L21:
 237              		.loc 1 280 0
 238 011e 9068     		ldr	r0, [r2, #8]
 239 0120 FFF7FEFF 		bl	ip_input
 240              	.L22:
 241              		.loc 1 282 0
 242 0124 0099     		ldr	r1, [sp]
 243 0126 0920     		mov	r0, #9
 244 0128 FFF7FEFF 		bl	memp_free
 245 012c DDE7     		b	.L25
 246              	.L17:
 247              		.loc 1 294 0
 248 012e D068     		ldr	r0, [r2, #12]
 249 0130 9368     		ldr	r3, [r2, #8]
 250 0132 00F05EF9 		bl	.L29
 251              		.loc 1 295 0
 252 0136 0099     		ldr	r1, [sp]
 253 0138 0820     		mov	r0, #8
 254 013a FFF7FEFF 		bl	memp_free
 255 013e D4E7     		b	.L25
 256              	.L18:
 257              		.loc 1 300 0
 258 0140 9068     		ldr	r0, [r2, #8]
 259 0142 D168     		ldr	r1, [r2, #12]
 260 0144 1269     		ldr	r2, [r2, #16]
 261 0146 FFF7FEFF 		bl	sys_timeout
 262              		.loc 1 301 0
 263 014a 0099     		ldr	r1, [sp]
 264 014c 0820     		mov	r0, #8
 265 014e FFF7FEFF 		bl	memp_free
 266 0152 CAE7     		b	.L25
 267              	.L19:
 268              		.loc 1 305 0
 269 0154 D068     		ldr	r0, [r2, #12]
 270 0156 1169     		ldr	r1, [r2, #16]
 271 0158 FFF7FEFF 		bl	sys_untimeout
 272              		.loc 1 306 0
 273 015c 0099     		ldr	r1, [sp]
 274 015e 0820     		mov	r0, #8
 275 0160 FFF7FEFF 		bl	memp_free
 276 0164 C1E7     		b	.L25
 277              	.L27:
 278 0166 C046     		.align	2
 279              	.L26:
 280 0168 00000000 		.word	ip_reass_timer
 281 016c 00000000 		.word	arp_timer
 282 0170 88130000 		.word	5000
 283 0174 00000000 		.word	dhcp_timer_coarse
 284 0178 60EA0000 		.word	60000
 285 017c 00000000 		.word	dhcp_timer_fine
 286 0180 04000000 		.word	tcpip_init_done
 287 0184 08000000 		.word	tcpip_init_done_arg
 288 0188 00000000 		.word	mbox
 289 018c 00000000 		.word	.L20
 290              	.LFE296:
 292              		.align	2
 293              		.code	16
 294              		.thumb_func
 296              	dhcp_timer_fine:
 297              	.LFB295:
 298              		.loc 1 166 0
 299 0190 00B5     		push	{lr}
 300              	.LCFI7:
 301              	.LVL9:
 302              		.loc 1 169 0
 303 0192 FFF7FEFF 		bl	dhcp_fine_tmr
 304              	.LVL10:
 305              		.loc 1 170 0
 306 0196 FA20     		mov	r0, #250
 307 0198 4000     		lsl	r0, r0, #1
 308 019a 0349     		ldr	r1, .L32
 309 019c 0022     		mov	r2, #0
 310 019e FFF7FEFF 		bl	sys_timeout
 311              		.loc 1 171 0
 312              		@ sp needed for prologue
 313 01a2 01BC     		pop	{r0}
 314 01a4 0047     		bx	r0
 315              	.L33:
 316 01a6 C046     		.align	2
 317              	.L32:
 318 01a8 00000000 		.word	dhcp_timer_fine
 319              	.LFE295:
 321              		.align	2
 322              		.code	16
 323              		.thumb_func
 325              	dhcp_timer_coarse:
 326              	.LFB294:
 327              		.loc 1 152 0
 328 01ac 00B5     		push	{lr}
 329              	.LCFI8:
 330              	.LVL11:
 331              		.loc 1 155 0
 332 01ae FFF7FEFF 		bl	dhcp_coarse_tmr
 333              	.LVL12:
 334              		.loc 1 156 0
 335 01b2 0349     		ldr	r1, .L36
 336 01b4 0348     		ldr	r0, .L36+4
 337 01b6 0022     		mov	r2, #0
 338 01b8 FFF7FEFF 		bl	sys_timeout
 339              		.loc 1 157 0
 340              		@ sp needed for prologue
 341 01bc 01BC     		pop	{r0}
 342 01be 0047     		bx	r0
 343              	.L37:
 344              		.align	2
 345              	.L36:
 346 01c0 00000000 		.word	dhcp_timer_coarse
 347 01c4 60EA0000 		.word	60000
 348              	.LFE294:
 350              		.align	2
 351              		.code	16
 352              		.thumb_func
 354              	arp_timer:
 355              	.LFB293:
 356              		.loc 1 136 0
 357 01c8 00B5     		push	{lr}
 358              	.LCFI9:
 359              	.LVL13:
 360              		.loc 1 139 0
 361 01ca FFF7FEFF 		bl	etharp_tmr
 362              	.LVL14:
 363              		.loc 1 140 0
 364 01ce 0349     		ldr	r1, .L40
 365 01d0 0348     		ldr	r0, .L40+4
 366 01d2 0022     		mov	r2, #0
 367 01d4 FFF7FEFF 		bl	sys_timeout
 368              		.loc 1 141 0
 369              		@ sp needed for prologue
 370 01d8 01BC     		pop	{r0}
 371 01da 0047     		bx	r0
 372              	.L41:
 373              		.align	2
 374              	.L40:
 375 01dc 00000000 		.word	arp_timer
 376 01e0 88130000 		.word	5000
 377              	.LFE293:
 379              		.align	2
 380              		.code	16
 381              		.thumb_func
 383              	ip_reass_timer:
 384              	.LFB292:
 385              		.loc 1 120 0
 386 01e4 00B5     		push	{lr}
 387              	.LCFI10:
 388              	.LVL15:
 389              		.loc 1 123 0
 390 01e6 FFF7FEFF 		bl	ip_reass_tmr
 391              	.LVL16:
 392              		.loc 1 124 0
 393 01ea FA20     		mov	r0, #250
 394 01ec 8000     		lsl	r0, r0, #2
 395 01ee 0349     		ldr	r1, .L44
 396 01f0 0022     		mov	r2, #0
 397 01f2 FFF7FEFF 		bl	sys_timeout
 398              		.loc 1 125 0
 399              		@ sp needed for prologue
 400 01f6 01BC     		pop	{r0}
 401 01f8 0047     		bx	r0
 402              	.L45:
 403 01fa C046     		.align	2
 404              	.L44:
 405 01fc 00000000 		.word	ip_reass_timer
 406              	.LFE292:
 408              		.align	2
 409              		.global	tcpip_apimsg
 410              		.code	16
 411              		.thumb_func
 413              	tcpip_apimsg:
 414              	.LFB301:
 415              		.loc 1 451 0
 416 0200 10B5     		push	{r4, lr}
 417              	.LCFI11:
 418              	.LVL17:
 419 0202 85B0     		sub	sp, sp, #20
 420              	.LCFI12:
 421 0204 041C     		mov	r4, r0
 422              		.loc 1 454 0
 423 0206 0C4B     		ldr	r3, .L50
 424 0208 1868     		ldr	r0, [r3]
 425              	.LVL18:
 426 020a 0028     		cmp	r0, #0
 427 020c 01D1     		bne	.L47
 428 020e F720     		mov	r0, #247
 429 0210 0BE0     		b	.L48
 430              	.L47:
 431              		.loc 1 455 0
 432 0212 6946     		mov	r1, sp
 433 0214 0023     		mov	r3, #0
 434 0216 0093     		str	r3, [sp]
 435              		.loc 1 456 0
 436 0218 0294     		str	r4, [sp, #8]
 437              		.loc 1 457 0
 438 021a FFF7FEFF 		bl	sys_mbox_post
 439              		.loc 1 458 0
 440 021e 6368     		ldr	r3, [r4, #4]
 441 0220 1869     		ldr	r0, [r3, #16]
 442 0222 0021     		mov	r1, #0
 443 0224 FFF7FEFF 		bl	sys_arch_sem_wait
 444 0228 0020     		mov	r0, #0
 445              	.L48:
 446 022a 0006     		lsl	r0, r0, #24
 447 022c 0016     		asr	r0, r0, #24
 448              		.loc 1 462 0
 449 022e 05B0     		add	sp, sp, #20
 450              		@ sp needed for prologue
 451              	.LVL19:
 452 0230 10BC     		pop	{r4}
 453 0232 02BC     		pop	{r1}
 454 0234 0847     		bx	r1
 455              	.L51:
 456 0236 C046     		.align	2
 457              	.L50:
 458 0238 00000000 		.word	mbox
 459              	.LFE301:
 461              		.align	2
 462              		.global	tcpip_untimeout
 463              		.code	16
 464              		.thumb_func
 466              	tcpip_untimeout:
 467              	.LFB300:
 468              		.loc 1 422 0
 469 023c 30B5     		push	{r4, r5, lr}
 470              	.LCFI13:
 471              	.LVL20:
 472 023e 041C     		mov	r4, r0
 473 0240 0D1C     		mov	r5, r1
 474              		.loc 1 425 0
 475 0242 0E4B     		ldr	r3, .L57
 476 0244 1B68     		ldr	r3, [r3]
 477 0246 002B     		cmp	r3, #0
 478 0248 01D1     		bne	.L53
 479              	.LVL21:
 480 024a F720     		mov	r0, #247
 481 024c 10E0     		b	.L54
 482              	.LVL22:
 483              	.L53:
 484              		.loc 1 426 0
 485 024e 0820     		mov	r0, #8
 486 0250 FFF7FEFF 		bl	memp_malloc
 487 0254 011C     		mov	r1, r0
 488              	.LVL23:
 489              		.loc 1 427 0
 490 0256 0028     		cmp	r0, #0
 491 0258 01D1     		bne	.L55
 492              	.LVL24:
 493 025a FF20     		mov	r0, #255
 494              	.LVL25:
 495 025c 08E0     		b	.L54
 496              	.LVL26:
 497              	.L55:
 498              		.loc 1 431 0
 499 025e 0423     		mov	r3, #4
 500 0260 0360     		str	r3, [r0]
 501              		.loc 1 432 0
 502 0262 C460     		str	r4, [r0, #12]
 503              		.loc 1 433 0
 504 0264 0561     		str	r5, [r0, #16]
 505              		.loc 1 434 0
 506 0266 054B     		ldr	r3, .L57
 507 0268 1868     		ldr	r0, [r3]
 508              	.LVL27:
 509 026a FFF7FEFF 		bl	sys_mbox_post
 510              	.LVL28:
 511 026e 0020     		mov	r0, #0
 512              	.LVL29:
 513              	.L54:
 514 0270 0006     		lsl	r0, r0, #24
 515 0272 0016     		asr	r0, r0, #24
 516              		.loc 1 438 0
 517              		@ sp needed for prologue
 518              	.LVL30:
 519              	.LVL31:
 520 0274 30BC     		pop	{r4, r5}
 521 0276 02BC     		pop	{r1}
 522 0278 0847     		bx	r1
 523              	.L58:
 524 027a C046     		.align	2
 525              	.L57:
 526 027c 00000000 		.word	mbox
 527              	.LFE300:
 529              		.align	2
 530              		.global	tcpip_timeout
 531              		.code	16
 532              		.thumb_func
 534              	tcpip_timeout:
 535              	.LFB299:
 536              		.loc 1 393 0
 537 0280 70B5     		push	{r4, r5, r6, lr}
 538              	.LCFI14:
 539              	.LVL32:
 540 0282 041C     		mov	r4, r0
 541 0284 0D1C     		mov	r5, r1
 542 0286 161C     		mov	r6, r2
 543              		.loc 1 396 0
 544 0288 0E4B     		ldr	r3, .L64
 545 028a 1B68     		ldr	r3, [r3]
 546 028c 002B     		cmp	r3, #0
 547 028e 01D1     		bne	.L60
 548              	.LVL33:
 549 0290 F720     		mov	r0, #247
 550 0292 11E0     		b	.L61
 551              	.LVL34:
 552              	.L60:
 553              		.loc 1 397 0
 554 0294 0820     		mov	r0, #8
 555 0296 FFF7FEFF 		bl	memp_malloc
 556 029a 011C     		mov	r1, r0
 557              	.LVL35:
 558              		.loc 1 398 0
 559 029c 0028     		cmp	r0, #0
 560 029e 01D1     		bne	.L62
 561              	.LVL36:
 562 02a0 FF20     		mov	r0, #255
 563              	.LVL37:
 564 02a2 09E0     		b	.L61
 565              	.LVL38:
 566              	.L62:
 567              		.loc 1 402 0
 568 02a4 0323     		mov	r3, #3
 569 02a6 0360     		str	r3, [r0]
 570              		.loc 1 403 0
 571 02a8 8460     		str	r4, [r0, #8]
 572              		.loc 1 404 0
 573 02aa C560     		str	r5, [r0, #12]
 574              		.loc 1 405 0
 575 02ac 0661     		str	r6, [r0, #16]
 576              		.loc 1 406 0
 577 02ae 054B     		ldr	r3, .L64
 578 02b0 1868     		ldr	r0, [r3]
 579              	.LVL39:
 580 02b2 FFF7FEFF 		bl	sys_mbox_post
 581              	.LVL40:
 582 02b6 0020     		mov	r0, #0
 583              	.LVL41:
 584              	.L61:
 585 02b8 0006     		lsl	r0, r0, #24
 586 02ba 0016     		asr	r0, r0, #24
 587              		.loc 1 410 0
 588              		@ sp needed for prologue
 589              	.LVL42:
 590              	.LVL43:
 591              	.LVL44:
 592 02bc 70BC     		pop	{r4, r5, r6}
 593 02be 02BC     		pop	{r1}
 594 02c0 0847     		bx	r1
 595              	.L65:
 596 02c2 C046     		.align	2
 597              	.L64:
 598 02c4 00000000 		.word	mbox
 599              	.LFE299:
 601              		.align	2
 602              		.global	tcpip_callback_with_block
 603              		.code	16
 604              		.thumb_func
 606              	tcpip_callback_with_block:
 607              	.LFB298:
 608              		.loc 1 358 0
 609 02c8 F0B5     		push	{r4, r5, r6, r7, lr}
 610              	.LCFI15:
 611              	.LVL45:
 612 02ca 061C     		mov	r6, r0
 613 02cc 0F1C     		mov	r7, r1
 614 02ce 1206     		lsl	r2, r2, #24
 615              	.LVL46:
 616 02d0 140E     		lsr	r4, r2, #24
 617              	.LVL47:
 618              		.loc 1 361 0
 619 02d2 164B     		ldr	r3, .L73
 620 02d4 1B68     		ldr	r3, [r3]
 621 02d6 002B     		cmp	r3, #0
 622 02d8 01D1     		bne	.L67
 623              	.LVL48:
 624 02da F720     		mov	r0, #247
 625 02dc 21E0     		b	.L68
 626              	.LVL49:
 627              	.L67:
 628              		.loc 1 362 0
 629 02de 0820     		mov	r0, #8
 630 02e0 FFF7FEFF 		bl	memp_malloc
 631 02e4 051C     		mov	r5, r0
 632              	.LVL50:
 633              		.loc 1 363 0
 634 02e6 0028     		cmp	r0, #0
 635 02e8 01D1     		bne	.L69
 636              	.LVL51:
 637 02ea FF20     		mov	r0, #255
 638              	.LVL52:
 639 02ec 19E0     		b	.L68
 640              	.LVL53:
 641              	.L69:
 642              		.loc 1 367 0
 643 02ee 0223     		mov	r3, #2
 644 02f0 0360     		str	r3, [r0]
 645              		.loc 1 368 0
 646 02f2 8660     		str	r6, [r0, #8]
 647              		.loc 1 369 0
 648 02f4 C760     		str	r7, [r0, #12]
 649              		.loc 1 370 0
 650 02f6 002C     		cmp	r4, #0
 651 02f8 06D0     		beq	.L70
 652              		.loc 1 371 0
 653 02fa 0C4B     		ldr	r3, .L73
 654 02fc 1868     		ldr	r0, [r3]
 655              	.LVL54:
 656 02fe 291C     		mov	r1, r5
 657 0300 FFF7FEFF 		bl	sys_mbox_post
 658 0304 0020     		mov	r0, #0
 659 0306 0CE0     		b	.L68
 660              	.LVL55:
 661              	.L70:
 662              		.loc 1 373 0
 663 0308 084B     		ldr	r3, .L73
 664 030a 1868     		ldr	r0, [r3]
 665              	.LVL56:
 666 030c 291C     		mov	r1, r5
 667 030e FFF7FEFF 		bl	sys_mbox_trypost
 668 0312 0006     		lsl	r0, r0, #24
 669 0314 0028     		cmp	r0, #0
 670 0316 04D0     		beq	.L68
 671              		.loc 1 374 0
 672 0318 0820     		mov	r0, #8
 673 031a 291C     		mov	r1, r5
 674 031c FFF7FEFF 		bl	memp_free
 675 0320 FF20     		mov	r0, #255
 676              	.LVL57:
 677              	.L68:
 678 0322 0006     		lsl	r0, r0, #24
 679 0324 0016     		asr	r0, r0, #24
 680              		.loc 1 381 0
 681              		@ sp needed for prologue
 682              	.LVL58:
 683              	.LVL59:
 684              	.LVL60:
 685              	.LVL61:
 686 0326 F0BC     		pop	{r4, r5, r6, r7}
 687 0328 02BC     		pop	{r1}
 688 032a 0847     		bx	r1
 689              	.L74:
 690              		.align	2
 691              	.L73:
 692 032c 00000000 		.word	mbox
 693              	.LFE298:
 695              		.align	2
 696              		.global	mem_free_callback
 697              		.code	16
 698              		.thumb_func
 700              	mem_free_callback:
 701              	.LFB305:
 570:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 571:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 572:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * A simple wrapper function that allows you to free a pbuf from interrupt context.
 573:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 574:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param p The pbuf (chain) to be dereferenced.
 575:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @return ERR_OK if callback could be enqueued, an err_t if not
 576:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 577:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 578:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** pbuf_free_callback(struct pbuf *p)
 579:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 580:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return tcpip_callback_with_block(pbuf_free_int, p, 0);
 581:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 582:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** 
 583:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** /**
 584:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * A simple wrapper function that allows you to free heap memory from
 585:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * interrupt context.
 586:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  *
 587:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @param m the heap memory to free
 588:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  * @return ERR_OK if callback could be enqueued, an err_t if not
 589:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****  */
 590:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** err_t
 591:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** mem_free_callback(void *m)
 592:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** {
 702              		.loc 1 592 0
 703 0330 00B5     		push	{lr}
 704              	.LCFI16:
 705              	.LVL62:
 706 0332 011C     		mov	r1, r0
 593:rtos/common/ethernet/lwIP_132/src/api/tcpip.c ****   return tcpip_callback_with_block(mem_free, m, 0);
 707              		.loc 1 593 0
 708 0334 0348     		ldr	r0, .L77
 709              	.LVL63:
 710 0336 0022     		mov	r2, #0
 711 0338 FFF7FEFF 		bl	tcpip_callback_with_block
 712              	.LVL64:
 713 033c 0006     		lsl	r0, r0, #24
 714 033e 0016     		asr	r0, r0, #24
 594:rtos/common/ethernet/lwIP_132/src/api/tcpip.c **** }
 715              		.loc 1 594 0
 716              		@ sp needed for prologue
 717 0340 02BC     		pop	{r1}
 718 0342 0847     		bx	r1
 719              	.L78:
 720              		.align	2
 721              	.L77:
 722 0344 00000000 		.word	mem_free
 723              	.LFE305:
 725              		.align	2
 726              		.global	pbuf_free_callback
 727              		.code	16
 728              		.thumb_func
 730              	pbuf_free_callback:
 731              	.LFB304:
 732              		.loc 1 579 0
 733 0348 00B5     		push	{lr}
 734              	.LCFI17:
 735              	.LVL65:
 736 034a 011C     		mov	r1, r0
 737              		.loc 1 580 0
 738 034c 0348     		ldr	r0, .L81
 739              	.LVL66:
 740 034e 0022     		mov	r2, #0
 741 0350 FFF7FEFF 		bl	tcpip_callback_with_block
 742              	.LVL67:
 743 0354 0006     		lsl	r0, r0, #24
 744 0356 0016     		asr	r0, r0, #24
 745              		.loc 1 581 0
 746              		@ sp needed for prologue
 747 0358 02BC     		pop	{r1}
 748 035a 0847     		bx	r1
 749              	.L82:
 750              		.align	2
 751              	.L81:
 752 035c 00000000 		.word	pbuf_free_int
 753              	.LFE304:
 755              		.align	2
 756              		.global	tcpip_input
 757              		.code	16
 758              		.thumb_func
 760              	tcpip_input:
 761              	.LFB297:
 762              		.loc 1 324 0
 763 0360 70B5     		push	{r4, r5, r6, lr}
 764              	.LCFI18:
 765              	.LVL68:
 766 0362 041C     		mov	r4, r0
 767 0364 0D1C     		mov	r5, r1
 768              		.loc 1 327 0
 769 0366 124B     		ldr	r3, .L89
 770 0368 1B68     		ldr	r3, [r3]
 771 036a 002B     		cmp	r3, #0
 772 036c 01D1     		bne	.L84
 773              	.LVL69:
 774 036e F720     		mov	r0, #247
 775 0370 18E0     		b	.L85
 776              	.LVL70:
 777              	.L84:
 778              		.loc 1 328 0
 779 0372 0920     		mov	r0, #9
 780 0374 FFF7FEFF 		bl	memp_malloc
 781 0378 061C     		mov	r6, r0
 782              	.LVL71:
 783              		.loc 1 329 0
 784 037a 0028     		cmp	r0, #0
 785 037c 01D1     		bne	.L86
 786              	.LVL72:
 787 037e FF20     		mov	r0, #255
 788              	.LVL73:
 789 0380 10E0     		b	.L85
 790              	.LVL74:
 791              	.L86:
 792              		.loc 1 333 0
 793 0382 0123     		mov	r3, #1
 794 0384 0360     		str	r3, [r0]
 795              		.loc 1 334 0
 796 0386 8460     		str	r4, [r0, #8]
 797              		.loc 1 335 0
 798 0388 C560     		str	r5, [r0, #12]
 799              		.loc 1 336 0
 800 038a 094B     		ldr	r3, .L89
 801 038c 1868     		ldr	r0, [r3]
 802              	.LVL75:
 803 038e 311C     		mov	r1, r6
 804 0390 FFF7FEFF 		bl	sys_mbox_trypost
 805 0394 0006     		lsl	r0, r0, #24
 806 0396 0028     		cmp	r0, #0
 807 0398 04D0     		beq	.L85
 808              		.loc 1 337 0
 809 039a 0920     		mov	r0, #9
 810 039c 311C     		mov	r1, r6
 811 039e FFF7FEFF 		bl	memp_free
 812 03a2 FF20     		mov	r0, #255
 813              	.LVL76:
 814              	.L85:
 815 03a4 0006     		lsl	r0, r0, #24
 816 03a6 0016     		asr	r0, r0, #24
 817              		.loc 1 343 0
 818              		@ sp needed for prologue
 819              	.LVL77:
 820              	.LVL78:
 821              	.LVL79:
 822 03a8 70BC     		pop	{r4, r5, r6}
 823 03aa 02BC     		pop	{r1}
 824 03ac 0847     		bx	r1
 825              	.L90:
 826 03ae C046     		.align	2
 827              	.L89:
 828 03b0 00000000 		.word	mbox
 829              	.LFE297:
 831              		.align	2
 832              		.code	16
 833              		.thumb_func
 835              	tcpip_tcp_timer:
 836              	.LFB290:
 837              		.loc 1 78 0
 838 03b4 00B5     		push	{lr}
 839              	.LCFI19:
 840              	.LVL80:
 841              		.loc 1 82 0
 842 03b6 FFF7FEFF 		bl	tcp_tmr
 843              	.LVL81:
 844              		.loc 1 84 0
 845 03ba 094B     		ldr	r3, .L96
 846 03bc 1B68     		ldr	r3, [r3]
 847 03be 002B     		cmp	r3, #0
 848 03c0 03D1     		bne	.L92
 849 03c2 084B     		ldr	r3, .L96+4
 850 03c4 1B68     		ldr	r3, [r3]
 851 03c6 002B     		cmp	r3, #0
 852 03c8 05D0     		beq	.L93
 853              	.L92:
 854              		.loc 1 86 0
 855 03ca 0749     		ldr	r1, .L96+8
 856 03cc FA20     		mov	r0, #250
 857 03ce 0022     		mov	r2, #0
 858 03d0 FFF7FEFF 		bl	sys_timeout
 859 03d4 02E0     		b	.L95
 860              	.L93:
 861              		.loc 1 89 0
 862 03d6 054A     		ldr	r2, .L96+12
 863 03d8 0023     		mov	r3, #0
 864 03da 1360     		str	r3, [r2]
 865              	.L95:
 866              		.loc 1 91 0
 867              		@ sp needed for prologue
 868 03dc 01BC     		pop	{r0}
 869 03de 0047     		bx	r0
 870              	.L97:
 871              		.align	2
 872              	.L96:
 873 03e0 00000000 		.word	tcp_active_pcbs
 874 03e4 00000000 		.word	tcp_tw_pcbs
 875 03e8 00000000 		.word	tcpip_tcp_timer
 876 03ec 0C000000 		.word	tcpip_tcp_timer_active
 877              	.LFE290:
 879              		.bss
 880              		.align	2
 881              	mbox:
 882 0000 00000000 		.space	4
 883              		.align	2
 884              	tcpip_init_done:
 885 0004 00000000 		.space	4
 886              		.align	2
 887              	tcpip_init_done_arg:
 888 0008 00000000 		.space	4
 889              		.align	2
 890              	tcpip_tcp_timer_active:
 891 000c 00000000 		.space	4
 1188              	.Letext0:
 5547              		.code 16
 5548              		.align	1
 5549              	.L28:
 5550 03f0 1047     		bx	r2
 5551              	.L29:
 5552 03f2 1847     		bx	r3
DEFINED SYMBOLS
                            *ABS*:00000000 tcpip.c
     /tmp/ccINqRzU.s:1      .text:00000000 $t
     /tmp/ccINqRzU.s:15     .text:00000000 pbuf_free_int
     /tmp/ccINqRzU.s:41     .text:0000000c tcpip_init
     /tmp/ccINqRzU.s:84     .text:00000044 $d
     /tmp/ccINqRzU.s:884    .bss:00000004 tcpip_init_done
     /tmp/ccINqRzU.s:887    .bss:00000008 tcpip_init_done_arg
     /tmp/ccINqRzU.s:881    .bss:00000000 mbox
     /tmp/ccINqRzU.s:143    .text:0000009c tcpip_thread
     /tmp/ccINqRzU.s:97     .text:0000005c tcp_timer_needed
     /tmp/ccINqRzU.s:94     .text:0000005c $t
     /tmp/ccINqRzU.s:133    .text:0000008c $d
     /tmp/ccINqRzU.s:890    .bss:0000000c tcpip_tcp_timer_active
     /tmp/ccINqRzU.s:835    .text:000003b4 tcpip_tcp_timer
     /tmp/ccINqRzU.s:140    .text:0000009c $t
     /tmp/ccINqRzU.s:212    .rodata:00000000 $d
     /tmp/ccINqRzU.s:280    .text:00000168 $d
     /tmp/ccINqRzU.s:383    .text:000001e4 ip_reass_timer
     /tmp/ccINqRzU.s:354    .text:000001c8 arp_timer
     /tmp/ccINqRzU.s:325    .text:000001ac dhcp_timer_coarse
     /tmp/ccINqRzU.s:296    .text:00000190 dhcp_timer_fine
     /tmp/ccINqRzU.s:293    .text:00000190 $t
     /tmp/ccINqRzU.s:318    .text:000001a8 $d
     /tmp/ccINqRzU.s:322    .text:000001ac $t
     /tmp/ccINqRzU.s:346    .text:000001c0 $d
     /tmp/ccINqRzU.s:351    .text:000001c8 $t
     /tmp/ccINqRzU.s:375    .text:000001dc $d
     /tmp/ccINqRzU.s:380    .text:000001e4 $t
     /tmp/ccINqRzU.s:405    .text:000001fc $d
     /tmp/ccINqRzU.s:413    .text:00000200 tcpip_apimsg
     /tmp/ccINqRzU.s:410    .text:00000200 $t
     /tmp/ccINqRzU.s:458    .text:00000238 $d
     /tmp/ccINqRzU.s:466    .text:0000023c tcpip_untimeout
     /tmp/ccINqRzU.s:463    .text:0000023c $t
     /tmp/ccINqRzU.s:526    .text:0000027c $d
     /tmp/ccINqRzU.s:534    .text:00000280 tcpip_timeout
     /tmp/ccINqRzU.s:531    .text:00000280 $t
     /tmp/ccINqRzU.s:598    .text:000002c4 $d
     /tmp/ccINqRzU.s:606    .text:000002c8 tcpip_callback_with_block
     /tmp/ccINqRzU.s:603    .text:000002c8 $t
     /tmp/ccINqRzU.s:692    .text:0000032c $d
     /tmp/ccINqRzU.s:700    .text:00000330 mem_free_callback
     /tmp/ccINqRzU.s:697    .text:00000330 $t
     /tmp/ccINqRzU.s:722    .text:00000344 $d
     /tmp/ccINqRzU.s:730    .text:00000348 pbuf_free_callback
     /tmp/ccINqRzU.s:727    .text:00000348 $t
     /tmp/ccINqRzU.s:752    .text:0000035c $d
     /tmp/ccINqRzU.s:760    .text:00000360 tcpip_input
     /tmp/ccINqRzU.s:757    .text:00000360 $t
     /tmp/ccINqRzU.s:828    .text:000003b0 $d
     /tmp/ccINqRzU.s:832    .text:000003b4 $t
     /tmp/ccINqRzU.s:873    .text:000003e0 $d
     /tmp/ccINqRzU.s:5547   .text:000003f0 $t

UNDEFINED SYMBOLS
pbuf_free
lwip_init
sys_mbox_new
sys_thread_new
sys_timeout
tcp_active_pcbs
tcp_tw_pcbs
sys_mbox_fetch
ethernet_input
ip_input
memp_free
sys_untimeout
dhcp_fine_tmr
dhcp_coarse_tmr
etharp_tmr
ip_reass_tmr
sys_mbox_post
sys_arch_sem_wait
memp_malloc
sys_mbox_trypost
mem_free
tcp_tmr
