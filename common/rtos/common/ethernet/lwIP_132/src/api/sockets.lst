   1              		.code	16
   2              		.file	"sockets.c"
  10              	.Ltext0:
  11              		.align	2
  12              		.code	16
  13              		.thumb_func
  15              	get_socket:
  16              	.LFB291:
  17              		.file 1 "rtos/common/ethernet/lwIP_132/src/api/sockets.c"
   1:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /**
   2:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @file
   3:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Sockets BSD-Like API module
   4:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
   5:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
   6:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
   7:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /*
   8:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
   9:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * All rights reserved.
  10:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
  11:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Redistribution and use in source and binary forms, with or without modification,
  12:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * are permitted provided that the following conditions are met:
  13:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
  14:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  15:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *    this list of conditions and the following disclaimer.
  16:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *    and/or other materials provided with the distribution.
  19:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * 3. The name of the author may not be used to endorse or promote products
  20:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *    derived from this software without specific prior written permission.
  21:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
  22:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  23:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  24:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  25:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  26:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  27:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  30:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  31:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * OF SUCH DAMAGE.
  32:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
  33:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * This file is part of the lwIP TCP/IP stack.
  34:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
  35:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Author: Adam Dunkels <adam@sics.se>
  36:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
  37:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Improved by Marc Boucher <marc@mbsi.ca> and David Haas <dhaas@alum.rpi.edu>
  38:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
  39:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
  40:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
  41:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/opt.h"
  42:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
  43:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_SOCKET /* don't build if not configured for use in lwipopts.h */
  44:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
  45:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/sockets.h"
  46:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/api.h"
  47:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/sys.h"
  48:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/igmp.h"
  49:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/inet.h"
  50:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/tcp.h"
  51:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/raw.h"
  52:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/udp.h"
  53:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include "lwip/tcpip.h"
  54:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
  55:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #include <string.h>
  56:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
  57:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #define NUM_SOCKETS MEMP_NUM_NETCONN
  58:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
  59:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /** Contains all internal pointers and states used for a socket */
  60:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** struct lwip_socket {
  61:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** sockets currently are built on netconns, each socket has one netconn */
  62:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct netconn *conn;
  63:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** data that was left from the previous read */
  64:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct netbuf *lastdata;
  65:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** offset in the data that was left from the previous read */
  66:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t lastoffset;
  67:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** number of times data was received, set by event_callback(),
  68:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       tested by the receive and select functions */
  69:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   s16_t rcvevent;
  70:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** number of times data was received, set by event_callback(),
  71:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       tested by select */
  72:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t sendevent;
  73:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** socket flags (currently, only used for O_NONBLOCK) */
  74:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t flags;
  75:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** last error that occurred on this socket */
  76:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int err;
  77:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** };
  78:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
  79:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /** Description for a task waiting in select */
  80:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** struct lwip_select_cb {
  81:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** Pointer to the next waiting task */
  82:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_select_cb *next;
  83:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** readset passed to select */
  84:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   fd_set *readset;
  85:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** writeset passed to select */
  86:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   fd_set *writeset;
  87:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** unimplemented: exceptset passed to select */
  88:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   fd_set *exceptset;
  89:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** don't signal the same semaphore twice: set to 1 when signalled */
  90:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int sem_signalled;
  91:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** semaphore to wake up a task waiting for select */
  92:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_t sem;
  93:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** };
  94:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
  95:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /** This struct is used to pass data to the set/getsockopt_internal
  96:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * functions running in tcpip_thread context (only a void* is allowed) */
  97:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** struct lwip_setgetsockopt_data {
  98:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** socket struct for which to change options */
  99:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
 100:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** socket index for which to change options */
 101:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int s;
 102:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** level of the option to process */
 103:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int level;
 104:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** name of the option to process */
 105:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int optname;
 106:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** set: value to set the option to
 107:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     * get: value of the option is stored here */
 108:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   void *optval;
 109:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** size of *optval */
 110:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   socklen_t *optlen;
 111:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /** if an error occures, it is temporarily stored here */
 112:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err_t err;
 113:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** };
 114:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 115:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /** The global array of available sockets */
 116:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static struct lwip_socket sockets[NUM_SOCKETS];
 117:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /** The global list of tasks waiting for select */
 118:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static struct lwip_select_cb *select_cb_list;
 119:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 120:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /** Semaphore protecting the sockets array */
 121:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static sys_sem_t socksem;
 122:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /** Semaphore protecting select_cb_list */
 123:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static sys_sem_t selectsem;
 124:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 125:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /** Table to quickly map an lwIP error (err_t) to a socket error
 126:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   * by using -err as an index */
 127:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static const int err_to_errno_table[] = {
 128:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   0,             /* ERR_OK          0      No error, everything OK. */
 129:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ENOMEM,        /* ERR_MEM        -1      Out of memory error.     */
 130:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ENOBUFS,       /* ERR_BUF        -2      Buffer error.            */
 131:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ETIMEDOUT,     /* ERR_TIMEOUT    -3      Timeout                  */
 132:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   EHOSTUNREACH,  /* ERR_RTE        -4      Routing problem.         */
 133:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ECONNABORTED,  /* ERR_ABRT       -5      Connection aborted.      */
 134:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ECONNRESET,    /* ERR_RST        -6      Connection reset.        */
 135:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ESHUTDOWN,     /* ERR_CLSD       -7      Connection closed.       */
 136:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ENOTCONN,      /* ERR_CONN       -8      Not connected.           */
 137:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   EINVAL,        /* ERR_VAL        -9      Illegal value.           */
 138:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   EIO,           /* ERR_ARG        -10     Illegal argument.        */
 139:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   EADDRINUSE,    /* ERR_USE        -11     Address in use.          */
 140:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   -1,            /* ERR_IF         -12     Low-level netif error    */
 141:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   -1,            /* ERR_ISCONN     -13     Already connected.       */
 142:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   EINPROGRESS    /* ERR_INPROGRESS -14     Operation in progress    */
 143:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** };
 144:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 145:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #define ERR_TO_ERRNO_TABLE_SIZE \
 146:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   (sizeof(err_to_errno_table)/sizeof(err_to_errno_table[0]))
 147:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 148:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #define err_to_errno(err) \
 149:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ((unsigned)(-(err)) < ERR_TO_ERRNO_TABLE_SIZE ? \
 150:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     err_to_errno_table[-(err)] : EIO)
 151:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 152:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #ifdef ERRNO
 153:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #ifndef set_errno
 154:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #define set_errno(err) errno = (err)
 155:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif
 156:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #else
 157:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #define set_errno(err)
 158:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif
 159:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 160:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #define sock_set_errno(sk, e) do { \
 161:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sk->err = (e); \
 162:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   set_errno(sk->err); \
 163:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** } while (0)
 164:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 165:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Forward delcaration of some functions */
 166:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static void event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len);
 167:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static void lwip_getsockopt_internal(void *arg);
 168:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static void lwip_setsockopt_internal(void *arg);
 169:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 170:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /**
 171:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Initialize this module. This function has to be called before any other
 172:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * functions in this module!
 173:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
 174:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** void
 175:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_socket_init(void)
 176:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 177:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   socksem   = sys_sem_new(1);
 178:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   selectsem = sys_sem_new(1);
 179:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 180:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 181:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /**
 182:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Map a externally used socket index to the internal socket representation.
 183:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
 184:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @param s externally used socket index
 185:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @return struct lwip_socket for the socket or NULL if not found
 186:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
 187:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static struct lwip_socket *
 188:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** get_socket(int s)
 189:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
  18              		.loc 1 189 0
  19              	.LVL0:
 190:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
 191:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 192:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if ((s < 0) || (s >= NUM_SOCKETS)) {
  20              		.loc 1 192 0
  21 0000 0328     		cmp	r0, #3
  22 0002 07D8     		bhi	.L2
  23              	.LVL1:
 193:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s));
 194:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     set_errno(EBADF);
 195:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return NULL;
 196:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 197:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 198:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = &sockets[s];
  24              		.loc 1 198 0
  25 0004 8300     		lsl	r3, r0, #2
  26 0006 1B18     		add	r3, r3, r0
  27 0008 9B00     		lsl	r3, r3, #2
  28 000a 034A     		ldr	r2, .L5
  29 000c D018     		add	r0, r2, r3
  30              	.LVL2:
 199:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 200:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock->conn) {
  31              		.loc 1 200 0
  32 000e 0368     		ldr	r3, [r0]
  33 0010 002B     		cmp	r3, #0
  34 0012 00D1     		bne	.L3
  35              	.L2:
  36 0014 0020     		mov	r0, #0
  37              	.L3:
  38              	.LVL3:
 201:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s));
 202:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     set_errno(EBADF);
 203:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return NULL;
 204:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 205:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 206:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return sock;
 207:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
  39              		.loc 1 207 0
  40              		@ sp needed for prologue
  41 0016 7047     		bx	lr
  42              	.L6:
  43              		.align	2
  44              	.L5:
  45 0018 00000000 		.word	sockets
  46              	.LFE291:
  48              		.align	2
  49              		.code	16
  50              		.thumb_func
  52              	lwip_selscan:
  53              	.LFB305:
 208:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 209:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /**
 210:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Allocate a new socket for a given netconn.
 211:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
 212:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @param newconn the netconn for which to allocate a socket
 213:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @return the index of the new socket; -1 on error
 214:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
 215:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static int
 216:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** alloc_socket(struct netconn *newconn)
 217:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 218:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int i;
 219:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 220:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Protect socket array */
 221:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_wait(socksem);
 222:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 223:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* allocate a new socket identifier */
 224:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   for (i = 0; i < NUM_SOCKETS; ++i) {
 225:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (!sockets[i].conn) {
 226:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sockets[i].conn       = newconn;
 227:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sockets[i].lastdata   = NULL;
 228:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sockets[i].lastoffset = 0;
 229:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sockets[i].rcvevent   = 0;
 230:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sockets[i].sendevent  = 1; /* TCP send buf is empty */
 231:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sockets[i].flags      = 0;
 232:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sockets[i].err        = 0;
 233:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sys_sem_signal(socksem);
 234:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       return i;
 235:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 236:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 237:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_signal(socksem);
 238:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return -1;
 239:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 240:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 241:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Below this, the well-known socket functions are implemented.
 242:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Use google.com or opengroup.org to get a good description :-)
 243:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
 244:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Exceptions are documented!
 245:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
 246:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 247:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 248:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
 249:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 250:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock, *nsock;
 251:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct netconn *newconn;
 252:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct ip_addr naddr;
 253:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t port;
 254:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int newsock;
 255:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct sockaddr_in sin;
 256:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err_t err;
 257:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 258:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
 259:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = get_socket(s);
 260:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
 261:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 262:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 263:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if ((sock->flags & O_NONBLOCK) && (sock->rcvevent <= 0)) {
 264:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
 265:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, EWOULDBLOCK);
 266:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 267:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 268:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 269:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   newconn = netconn_accept(sock->conn);
 270:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!newconn) {
 271:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) failed, err=%d\n", s, sock->conn->err));
 272:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, err_to_errno(sock->conn->err));
 273:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 274:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 275:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 276:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* get the IP address and port of the remote host */
 277:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err = netconn_peer(newconn, &naddr, &port);
 278:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (err != ERR_OK) {
 279:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     netconn_delete(newconn);
 280:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, err_to_errno(err));
 281:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 282:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 283:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 284:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
 285:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****    * not be NULL if addr is valid.
 286:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****    */
 287:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (NULL != addr) {
 288:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
 289:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     memset(&sin, 0, sizeof(sin));
 290:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sin.sin_len = sizeof(sin);
 291:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sin.sin_family = AF_INET;
 292:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sin.sin_port = htons(port);
 293:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sin.sin_addr.s_addr = naddr.addr;
 294:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 295:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (*addrlen > sizeof(sin))
 296:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *addrlen = sizeof(sin);
 297:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 298:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     MEMCPY(addr, &sin, *addrlen);
 299:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 300:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 301:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   newsock = alloc_socket(newconn);
 302:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (newsock == -1) {
 303:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     netconn_delete(newconn);
 304:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, ENFILE);
 305:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 306:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 307:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_ASSERT("invalid socket index", (newsock >= 0) && (newsock < NUM_SOCKETS));
 308:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   newconn->callback = event_callback;
 309:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   nsock = &sockets[newsock];
 310:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_ASSERT("invalid socket pointer", nsock != NULL);
 311:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 312:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_wait(socksem);
 313:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* See event_callback: If data comes in right away after an accept, even
 314:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****    * though the server task might not have created a new socket yet.
 315:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****    * In that case, newconn->socket is counted down (newconn->socket--),
 316:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****    * so nsock->rcvevent is >= 1 here!
 317:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****    */
 318:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   nsock->rcvevent += -1 - newconn->socket;
 319:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   newconn->socket = newsock;
 320:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_signal(socksem);
 321:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 322:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d addr=", s, newsock));
 323:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
 324:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
 325:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 326:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, 0);
 327:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return newsock;
 328:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 329:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 330:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 331:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
 332:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 333:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
 334:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct ip_addr local_addr;
 335:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t local_port;
 336:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err_t err;
 337:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 338:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = get_socket(s);
 339:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
 340:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 341:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 342:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_ERROR("lwip_bind: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
 343:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****              ((((const struct sockaddr_in *)name)->sin_family) == AF_INET)),
 344:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****              sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
 345:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 346:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   local_addr.addr = ((const struct sockaddr_in *)name)->sin_addr.s_addr;
 347:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   local_port = ((const struct sockaddr_in *)name)->sin_port;
 348:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 349:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d, addr=", s));
 350:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ip_addr_debug_print(SOCKETS_DEBUG, &local_addr);
 351:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", ntohs(local_port)));
 352:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 353:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err = netconn_bind(sock->conn, &local_addr, ntohs(local_port));
 354:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 355:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (err != ERR_OK) {
 356:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
 357:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, err_to_errno(err));
 358:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 359:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 360:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 361:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
 362:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, 0);
 363:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return 0;
 364:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 365:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 366:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 367:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_close(int s)
 368:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 369:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
 370:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 371:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));
 372:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 373:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = get_socket(s);
 374:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock) {
 375:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 376:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 377:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 378:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   netconn_delete(sock->conn);
 379:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 380:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_wait(socksem);
 381:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (sock->lastdata) {
 382:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     netbuf_delete(sock->lastdata);
 383:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 384:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock->lastdata   = NULL;
 385:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock->lastoffset = 0;
 386:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock->conn       = NULL;
 387:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, 0);
 388:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_signal(socksem);
 389:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return 0;
 390:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 391:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 392:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 393:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
 394:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 395:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
 396:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err_t err;
 397:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 398:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = get_socket(s);
 399:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
 400:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 401:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 402:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_ERROR("lwip_connect: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
 403:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****              ((((const struct sockaddr_in *)name)->sin_family) == AF_INET)),
 404:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****              sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
 405:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 406:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (((const struct sockaddr_in *)name)->sin_family == AF_UNSPEC) {
 407:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
 408:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     err = netconn_disconnect(sock->conn);
 409:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   } else {
 410:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     struct ip_addr remote_addr;
 411:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     u16_t remote_port;
 412:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 413:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     remote_addr.addr = ((const struct sockaddr_in *)name)->sin_addr.s_addr;
 414:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     remote_port = ((const struct sockaddr_in *)name)->sin_port;
 415:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 416:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, addr=", s));
 417:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     ip_addr_debug_print(SOCKETS_DEBUG, &remote_addr);
 418:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", ntohs(remote_port)));
 419:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 420:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     err = netconn_connect(sock->conn, &remote_addr, ntohs(remote_port));
 421:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 422:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 423:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (err != ERR_OK) {
 424:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
 425:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, err_to_errno(err));
 426:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 427:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 428:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 429:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
 430:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, 0);
 431:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return 0;
 432:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 433:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 434:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /**
 435:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Set a socket into listen mode.
 436:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * The socket may not have been used for another connection previously.
 437:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
 438:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @param s the socket to set to listening mode
 439:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @param backlog (ATTENTION: need TCP_LISTEN_BACKLOG=1)
 440:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @return 0 on success, non-zero on failure
 441:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
 442:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 443:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_listen(int s, int backlog)
 444:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 445:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
 446:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err_t err;
 447:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 448:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));
 449:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 450:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = get_socket(s);
 451:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
 452:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 453:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 454:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* limit the "backlog" parameter to fit in an u8_t */
 455:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (backlog < 0) {
 456:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     backlog = 0;
 457:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 458:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (backlog > 0xff) {
 459:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     backlog = 0xff;
 460:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 461:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 462:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err = netconn_listen_with_backlog(sock->conn, backlog);
 463:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 464:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (err != ERR_OK) {
 465:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
 466:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, err_to_errno(err));
 467:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 468:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 469:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 470:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, 0);
 471:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return 0;
 472:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 473:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 474:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 475:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_recvfrom(int s, void *mem, size_t len, int flags,
 476:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         struct sockaddr *from, socklen_t *fromlen)
 477:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 478:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
 479:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct netbuf      *buf;
 480:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t               buflen, copylen, off = 0;
 481:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct ip_addr     *addr;
 482:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t               port;
 483:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u8_t                done = 0;
 484:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 485:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
 486:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = get_socket(s);
 487:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
 488:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 489:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 490:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   do {
 491:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", (void*)sock->lastda
 492:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* Check if there is data left from the last recv operation. */
 493:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (sock->lastdata) {
 494:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       buf = sock->lastdata;
 495:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     } else {
 496:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       /* If this is non-blocking call, then check first */
 497:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (((flags & MSG_DONTWAIT) || (sock->flags & O_NONBLOCK)) && 
 498:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           (sock->rcvevent <= 0)) {
 499:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if (off > 0) {
 500:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           /* already received data, return that */
 501:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           sock_set_errno(sock, 0);
 502:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           return off;
 503:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         }
 504:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
 505:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock_set_errno(sock, EWOULDBLOCK);
 506:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         return -1;
 507:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
 508:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 509:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       /* No data was left from the previous operation, so we try to get
 510:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       some from the network. */
 511:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->lastdata = buf = netconn_recv(sock->conn);
 512:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv netbuf=%p\n", (void*)buf));
 513:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 514:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (!buf) {
 515:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if (off > 0) {
 516:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           /* already received data, return that */
 517:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           sock_set_errno(sock, 0);
 518:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           return off;
 519:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         }
 520:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         /* We should really do some error checking here. */
 521:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL!\n", s));
 522:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock_set_errno(sock, (((sock->conn->pcb.ip != NULL) && (sock->conn->err == ERR_OK))
 523:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           ? ETIMEDOUT : err_to_errno(sock->conn->err)));
 524:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         return 0;
 525:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
 526:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 527:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 528:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     buflen = netbuf_len(buf);
 529:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%"U16_F" sock->las
 530:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       buflen, len, off, sock->lastoffset));
 531:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 532:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     buflen -= sock->lastoffset;
 533:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 534:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (len > buflen) {
 535:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       copylen = buflen;
 536:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     } else {
 537:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       copylen = (u16_t)len;
 538:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 539:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 540:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* copy the contents of the received buffer into
 541:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     the supplied memory pointer mem */
 542:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     netbuf_copy_partial(buf, (u8_t*)mem + off, copylen, sock->lastoffset);
 543:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 544:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     off += copylen;
 545:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 546:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (netconn_type(sock->conn) == NETCONN_TCP) {
 547:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 548:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       len -= copylen;
 549:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if ( (len <= 0) || 
 550:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****            (buf->p->flags & PBUF_FLAG_PUSH) || 
 551:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****            (sock->rcvevent <= 0) || 
 552:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****            ((flags & MSG_PEEK)!=0)) {
 553:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         done = 1;
 554:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
 555:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     } else {
 556:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       done = 1;
 557:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 558:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 559:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* Check to see from where the data was.*/
 560:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (done) {
 561:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (from && fromlen) {
 562:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         struct sockaddr_in sin;
 563:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 564:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if (netconn_type(sock->conn) == NETCONN_TCP) {
 565:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           addr = (struct ip_addr*)&(sin.sin_addr.s_addr);
 566:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           netconn_getaddr(sock->conn, addr, &port, 0);
 567:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         } else {
 568:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           addr = netbuf_fromaddr(buf);
 569:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           port = netbuf_fromport(buf);
 570:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         }
 571:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 572:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         memset(&sin, 0, sizeof(sin));
 573:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sin.sin_len = sizeof(sin);
 574:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sin.sin_family = AF_INET;
 575:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sin.sin_port = htons(port);
 576:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sin.sin_addr.s_addr = addr->addr;
 577:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 578:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if (*fromlen > sizeof(sin)) {
 579:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           *fromlen = sizeof(sin);
 580:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         }
 581:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 582:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         MEMCPY(from, &sin, *fromlen);
 583:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 584:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
 585:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         ip_addr_debug_print(SOCKETS_DEBUG, addr);
 586:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%"U16_F"\n", port, off));
 587:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       } else {
 588:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   #if SOCKETS_DEBUG
 589:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         struct sockaddr_in sin;
 590:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 591:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if (netconn_type(sock->conn) == NETCONN_TCP) {
 592:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           addr = (struct ip_addr*)&(sin.sin_addr.s_addr);
 593:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           netconn_getaddr(sock->conn, addr, &port, 0);
 594:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         } else {
 595:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           addr = netbuf_fromaddr(buf);
 596:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           port = netbuf_fromport(buf);
 597:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         }
 598:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 599:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
 600:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         ip_addr_debug_print(SOCKETS_DEBUG, addr);
 601:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%"U16_F"\n", port, off));
 602:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   #endif /*  SOCKETS_DEBUG */
 603:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
 604:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 605:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 606:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* If we don't peek the incoming message... */
 607:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if ((flags & MSG_PEEK)==0) {
 608:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       /* If this is a TCP socket, check if there is data left in the
 609:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****          buffer. If so, it should be saved in the sock structure for next
 610:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****          time around. */
 611:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if ((netconn_type(sock->conn) == NETCONN_TCP) && (buflen - copylen > 0)) {
 612:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->lastdata = buf;
 613:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->lastoffset += copylen;
 614:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", (void*)buf));
 615:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       } else {
 616:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->lastdata = NULL;
 617:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->lastoffset = 0;
 618:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", (void*)buf));
 619:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         netbuf_delete(buf);
 620:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
 621:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 622:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   } while (!done);
 623:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 624:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, 0);
 625:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return off;
 626:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 627:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 628:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 629:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_read(int s, void *mem, size_t len)
 630:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 631:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 632:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 633:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 634:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 635:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_recv(int s, void *mem, size_t len, int flags)
 636:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 637:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 638:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 639:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 640:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 641:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_send(int s, const void *data, size_t size, int flags)
 642:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 643:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
 644:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err_t err;
 645:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 646:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
 647:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                               s, data, size, flags));
 648:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 649:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = get_socket(s);
 650:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
 651:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 652:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 653:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (sock->conn->type != NETCONN_TCP) {
 654:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if (LWIP_UDP || LWIP_RAW)
 655:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return lwip_sendto(s, data, size, flags, NULL, 0);
 656:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #else
 657:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, err_to_errno(ERR_ARG));
 658:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 659:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* (LWIP_UDP || LWIP_RAW) */
 660:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 661:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 662:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err = netconn_write(sock->conn, data, size, NETCONN_COPY | ((flags & MSG_MORE)?NETCONN_MORE:0));
 663:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 664:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d size=%"SZT_F"\n", s, err, size));
 665:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, err_to_errno(err));
 666:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return (err == ERR_OK ? (int)size : -1);
 667:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 668:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 669:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 670:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_sendto(int s, const void *data, size_t size, int flags,
 671:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****        const struct sockaddr *to, socklen_t tolen)
 672:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 673:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
 674:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct ip_addr remote_addr;
 675:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err_t err;
 676:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t short_size;
 677:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if !LWIP_TCPIP_CORE_LOCKING
 678:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct netbuf buf;
 679:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t remote_port;
 680:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif
 681:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 682:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = get_socket(s);
 683:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
 684:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 685:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 686:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (sock->conn->type == NETCONN_TCP) {
 687:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCP
 688:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return lwip_send(s, data, size, flags);
 689:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #else
 690:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, err_to_errno(ERR_ARG));
 691:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 692:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCP */
 693:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 694:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 695:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 696:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   short_size = (u16_t)size;
 697:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 698:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****              ((tolen == sizeof(struct sockaddr_in)) &&
 699:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****              ((((const struct sockaddr_in *)to)->sin_family) == AF_INET))),
 700:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****              sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
 701:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 702:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCPIP_CORE_LOCKING
 703:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Should only be consider like a sample or a simple way to experiment this option (no check of "
 704:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   { struct pbuf* p;
 705:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
 706:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 707:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (p == NULL) {
 708:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = ERR_MEM;
 709:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     } else {
 710:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       p->payload = (void*)data;
 711:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       p->len = p->tot_len = short_size;
 712:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       
 713:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       remote_addr.addr = ((const struct sockaddr_in *)to)->sin_addr.s_addr;
 714:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       
 715:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LOCK_TCPIP_CORE();
 716:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (sock->conn->type==NETCONN_RAW) {
 717:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = sock->conn->err = raw_sendto(sock->conn->pcb.raw, p, &remote_addr);
 718:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       } else {
 719:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = sock->conn->err = udp_sendto(sock->conn->pcb.udp, p, &remote_addr, ntohs(((const stru
 720:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
 721:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       UNLOCK_TCPIP_CORE();
 722:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       
 723:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       pbuf_free(p);
 724:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 725:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 726:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #else
 727:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* initialize a buffer */
 728:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   buf.p = buf.ptr = NULL;
 729:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (to) {
 730:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     remote_addr.addr = ((const struct sockaddr_in *)to)->sin_addr.s_addr;
 731:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     remote_port      = ntohs(((const struct sockaddr_in *)to)->sin_port);
 732:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     buf.addr         = &remote_addr;
 733:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     buf.port         = remote_port;
 734:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   } else {
 735:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     remote_addr.addr = 0;
 736:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     remote_port      = 0;
 737:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     buf.addr         = NULL;
 738:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     buf.port         = 0;
 739:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 740:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 741:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_sendto(%d, data=%p, short_size=%d"U16_F", flags=0x%x to=",
 742:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****               s, data, short_size, flags));
 743:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ip_addr_debug_print(SOCKETS_DEBUG, &remote_addr);
 744:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", remote_port));
 745:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 746:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* make the buffer point to the data that should be sent */
 747:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_NETIF_TX_SINGLE_PBUF
 748:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Allocate a new netbuf and copy the data into it. */
 749:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (netbuf_alloc(&buf, short_size) == NULL) {
 750:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     err = ERR_MEM;
 751:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   } else {
 752:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     err = netbuf_take(&buf, data, short_size);
 753:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 754:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #else /* LWIP_NETIF_TX_SINGLE_PBUF */
 755:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err = netbuf_ref(&buf, data, short_size);
 756:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_NETIF_TX_SINGLE_PBUF */
 757:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (err == ERR_OK) {
 758:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* send the data */
 759:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     err = netconn_send(sock->conn, &buf);
 760:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 761:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 762:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* deallocated the buffer */
 763:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   netbuf_free(&buf);
 764:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCPIP_CORE_LOCKING */
 765:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, err_to_errno(err));
 766:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return (err == ERR_OK ? short_size : -1);
 767:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 768:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 769:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 770:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_socket(int domain, int type, int protocol)
 771:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 772:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct netconn *conn;
 773:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int i;
 774:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 775:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_UNUSED_ARG(domain);
 776:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 777:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* create a netconn */
 778:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   switch (type) {
 779:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case SOCK_RAW:
 780:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     conn = netconn_new_with_proto_and_callback(NETCONN_RAW, (u8_t)protocol, event_callback);
 781:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
 782:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
 783:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
 784:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case SOCK_DGRAM:
 785:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     conn = netconn_new_with_callback( (protocol == IPPROTO_UDPLITE) ?
 786:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                  NETCONN_UDPLITE : NETCONN_UDP, event_callback);
 787:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
 788:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
 789:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
 790:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case SOCK_STREAM:
 791:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     conn = netconn_new_with_callback(NETCONN_TCP, event_callback);
 792:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
 793:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
 794:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
 795:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   default:
 796:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
 797:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                  domain, type, protocol));
 798:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     set_errno(EINVAL);
 799:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 800:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 801:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 802:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!conn) {
 803:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
 804:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     set_errno(ENOBUFS);
 805:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 806:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 807:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 808:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   i = alloc_socket(conn);
 809:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 810:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (i == -1) {
 811:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     netconn_delete(conn);
 812:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     set_errno(ENFILE);
 813:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
 814:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 815:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   conn->socket = i;
 816:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
 817:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   set_errno(0);
 818:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return i;
 819:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 820:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 821:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 822:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_write(int s, const void *data, size_t size)
 823:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 824:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return lwip_send(s, data, size, 0);
 825:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 826:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 827:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /**
 828:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Go through the readset and writeset lists and see which socket of the sockets
 829:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * set in the sets has events. On return, readset, writeset and exceptset have
 830:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * the sockets enabled that had events.
 831:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
 832:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * exceptset is not used for now!!!
 833:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *
 834:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @param maxfdp1 the highest socket index in the sets
 835:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @param readset in: set of sockets to check for read events;
 836:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *                out: set of sockets that had read events
 837:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @param writeset in: set of sockets to check for write events;
 838:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  *                 out: set of sockets that had write events
 839:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @param exceptset not yet implemented
 840:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * @return number of sockets that had events (read+write)
 841:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
 842:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static int
 843:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_selscan(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset)
 844:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
  54              		.loc 1 844 0
  55 001c F0B5     		push	{r4, r5, r6, r7, lr}
  56              	.LCFI0:
  57 001e 5F46     		mov	r7, fp
  58 0020 5646     		mov	r6, sl
  59 0022 4D46     		mov	r5, r9
  60 0024 4446     		mov	r4, r8
  61 0026 F0B4     		push	{r4, r5, r6, r7}
  62              	.LCFI1:
  63              	.LVL4:
  64 0028 87B0     		sub	sp, sp, #28
  65              	.LCFI2:
  66 002a 8246     		mov	sl, r0
  67 002c 8946     		mov	r9, r1
  68 002e 9346     		mov	fp, r2
  69 0030 0093     		str	r3, [sp]
  70              	.LBB2:
 845:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int i, nready = 0;
 846:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   fd_set lreadset, lwriteset, lexceptset;
 847:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *p_sock;
 848:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
 849:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   FD_ZERO(&lreadset);
  71              		.loc 1 849 0
  72 0032 05AB     		add	r3, sp, #20
  73              	.LVL5:
  74 0034 1A1C     		mov	r2, r3
  75              	.LVL6:
  76 0036 0021     		mov	r1, #0
  77              	.LVL7:
  78 0038 0833     		add	r3, r3, #8
  79              	.LVL8:
  80              	.L8:
  81 003a 1170     		strb	r1, [r2]
  82 003c 0132     		add	r2, r2, #1
  83 003e 9A42     		cmp	r2, r3
  84 0040 FBD1     		bne	.L8
  85              	.LBE2:
  86              	.LBB3:
 850:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   FD_ZERO(&lwriteset);
  87              		.loc 1 850 0
  88 0042 03AB     		add	r3, sp, #12
  89              	.LVL9:
  90 0044 1A1C     		mov	r2, r3
  91              	.LVL10:
  92 0046 0021     		mov	r1, #0
  93 0048 0833     		add	r3, r3, #8
  94              	.LVL11:
  95              	.L9:
  96 004a 1170     		strb	r1, [r2]
  97 004c 0132     		add	r2, r2, #1
  98 004e 9A42     		cmp	r2, r3
  99 0050 FBD1     		bne	.L9
 100              	.LBE3:
 101              	.LBB4:
 851:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   FD_ZERO(&lexceptset);
 102              		.loc 1 851 0
 103 0052 01AB     		add	r3, sp, #4
 104              	.LVL12:
 105 0054 1A1C     		mov	r2, r3
 106              	.LVL13:
 107 0056 0021     		mov	r1, #0
 108 0058 0833     		add	r3, r3, #8
 109              	.LVL14:
 110              	.L10:
 111 005a 1170     		strb	r1, [r2]
 112 005c 0132     		add	r2, r2, #1
 113 005e 9A42     		cmp	r2, r3
 114 0060 FBD1     		bne	.L10
 115              	.LBE4:
 852:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
 853:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Go through each socket in each list to count number of sockets which
 854:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   currently match */
 855:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   for(i = 0; i < maxfdp1; i++) {
 116              		.loc 1 855 0
 117 0062 5146     		mov	r1, sl
 118 0064 0029     		cmp	r1, #0
 119 0066 02DC     		bgt	.L11
 120 0068 0022     		mov	r2, #0
 121              	.LVL15:
 122 006a 9046     		mov	r8, r2
 123              	.LVL16:
 124 006c 3EE0     		b	.L12
 125              	.LVL17:
 126              	.L11:
 127 006e 0024     		mov	r4, #0
 128              	.LVL18:
 129 0070 A046     		mov	r8, r4
 130              	.LVL19:
 856:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (FD_ISSET(i, readset)) {
 131              		.loc 1 856 0
 132 0072 0127     		mov	r7, #1
 133              	.LVL20:
 134              	.L16:
 135 0074 6509     		lsr	r5, r4, #5
 136 0076 1F26     		mov	r6, #31
 137 0078 2640     		and	r6, r6, r4
 138 007a AB00     		lsl	r3, r5, #2
 139 007c 4946     		mov	r1, r9
 140 007e CB58     		ldr	r3, [r1, r3]
 141 0080 3341     		asr	r3, r3, r6
 142 0082 3B42     		tst	r3, r7
 143 0084 16D0     		beq	.L13
 857:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       /* See if netconn of this socket is ready for read */
 858:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       p_sock = get_socket(i);
 144              		.loc 1 858 0
 145 0086 201C     		mov	r0, r4
 146              	.LVL21:
 147 0088 FFF7BAFF 		bl	get_socket
 148              	.LVL22:
 859:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (p_sock && (p_sock->lastdata || (p_sock->rcvevent > 0))) {
 149              		.loc 1 859 0
 150 008c 0028     		cmp	r0, #0
 151 008e 11D0     		beq	.L13
 152              	.LVL23:
 153 0090 4368     		ldr	r3, [r0, #4]
 154 0092 002B     		cmp	r3, #0
 155 0094 03D1     		bne	.L14
 156 0096 0A22     		mov	r2, #10
 157 0098 835E     		ldrsh	r3, [r0, r2]
 158 009a 002B     		cmp	r3, #0
 159 009c 0ADD     		ble	.L13
 160              	.L14:
 860:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         FD_SET(i, &lreadset);
 161              		.loc 1 860 0
 162 009e AB00     		lsl	r3, r5, #2
 163 00a0 07A9     		add	r1, sp, #28
 164 00a2 CA18     		add	r2, r1, r3
 165 00a4 083A     		sub	r2, r2, #8
 166 00a6 391C     		mov	r1, r7
 167 00a8 B140     		lsl	r1, r1, r6
 168 00aa 1368     		ldr	r3, [r2]
 169 00ac 0B43     		orr	r3, r3, r1
 170 00ae 1360     		str	r3, [r2]
 861:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
 862:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         nready++;
 171              		.loc 1 862 0
 172 00b0 0122     		mov	r2, #1
 173 00b2 9044     		add	r8, r8, r2
 174              	.LVL24:
 175              	.L13:
 863:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
 864:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 865:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (FD_ISSET(i, writeset)) {
 176              		.loc 1 865 0
 177 00b4 AB00     		lsl	r3, r5, #2
 178 00b6 5946     		mov	r1, fp
 179 00b8 CB58     		ldr	r3, [r1, r3]
 180 00ba 3341     		asr	r3, r3, r6
 181 00bc 3B42     		tst	r3, r7
 182 00be 12D0     		beq	.L15
 866:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       /* See if netconn of this socket is ready for write */
 867:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       p_sock = get_socket(i);
 183              		.loc 1 867 0
 184 00c0 201C     		mov	r0, r4
 185              	.LVL25:
 186 00c2 FFF79DFF 		bl	get_socket
 187              	.LVL26:
 868:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (p_sock && p_sock->sendevent) {
 188              		.loc 1 868 0
 189 00c6 0028     		cmp	r0, #0
 190 00c8 0DD0     		beq	.L15
 191              	.LVL27:
 192 00ca 8389     		ldrh	r3, [r0, #12]
 193 00cc 002B     		cmp	r3, #0
 194 00ce 0AD0     		beq	.L15
 869:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         FD_SET(i, &lwriteset);
 195              		.loc 1 869 0
 196 00d0 AB00     		lsl	r3, r5, #2
 197 00d2 07A9     		add	r1, sp, #28
 198 00d4 CA18     		add	r2, r1, r3
 199 00d6 103A     		sub	r2, r2, #16
 200 00d8 391C     		mov	r1, r7
 201 00da B140     		lsl	r1, r1, r6
 202 00dc 1368     		ldr	r3, [r2]
 203 00de 0B43     		orr	r3, r3, r1
 204 00e0 1360     		str	r3, [r2]
 870:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
 871:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         nready++;
 205              		.loc 1 871 0
 206 00e2 0122     		mov	r2, #1
 207 00e4 9044     		add	r8, r8, r2
 208              	.LVL28:
 209              	.L15:
 210              		.loc 1 855 0
 211 00e6 0134     		add	r4, r4, #1
 212 00e8 A245     		cmp	sl, r4
 213 00ea C3DC     		bgt	.L16
 214              	.L12:
 872:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
 873:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 874:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
 875:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   *readset = lreadset;
 215              		.loc 1 875 0
 216 00ec 059B     		ldr	r3, [sp, #20]
 217 00ee 069C     		ldr	r4, [sp, #24]
 218 00f0 4946     		mov	r1, r9
 219 00f2 0B60     		str	r3, [r1]
 220 00f4 4C60     		str	r4, [r1, #4]
 876:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   *writeset = lwriteset;
 221              		.loc 1 876 0
 222 00f6 039B     		ldr	r3, [sp, #12]
 223 00f8 049C     		ldr	r4, [sp, #16]
 224 00fa 5A46     		mov	r2, fp
 225              	.LVL29:
 226 00fc 1360     		str	r3, [r2]
 227 00fe 5460     		str	r4, [r2, #4]
 228              	.LBB5:
 877:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   FD_ZERO(exceptset);
 229              		.loc 1 877 0
 230 0100 009B     		ldr	r3, [sp]
 231              	.LVL30:
 232 0102 1A1C     		mov	r2, r3
 233 0104 0021     		mov	r1, #0
 234 0106 0833     		add	r3, r3, #8
 235              	.LVL31:
 236              	.L17:
 237 0108 1170     		strb	r1, [r2]
 238 010a 0132     		add	r2, r2, #1
 239 010c 9A42     		cmp	r2, r3
 240 010e FBD1     		bne	.L17
 241              	.LBE5:
 878:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
 879:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return nready;
 880:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 242              		.loc 1 880 0
 243 0110 4046     		mov	r0, r8
 244              	.LVL32:
 245 0112 07B0     		add	sp, sp, #28
 246              		@ sp needed for prologue
 247              	.LVL33:
 248              	.LVL34:
 249              	.LVL35:
 250              	.LVL36:
 251              	.LVL37:
 252 0114 3CBC     		pop	{r2, r3, r4, r5}
 253 0116 9046     		mov	r8, r2
 254 0118 9946     		mov	r9, r3
 255 011a A246     		mov	sl, r4
 256 011c AB46     		mov	fp, r5
 257 011e F0BC     		pop	{r4, r5, r6, r7}
 258 0120 02BC     		pop	{r1}
 259 0122 0847     		bx	r1
 260              	.LFE305:
 262              		.align	2
 263              		.global	lwip_ioctl
 264              		.code	16
 265              		.thumb_func
 267              	lwip_ioctl:
 268              	.LFB316:
 881:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 882:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 883:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /**
 884:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Processing exceptset is not yet implemented.
 885:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
 886:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
 887:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
 888:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                struct timeval *timeout)
 889:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 890:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int i;
 891:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int nready;
 892:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   fd_set lreadset, lwriteset, lexceptset;
 893:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u32_t msectimeout;
 894:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_select_cb select_cb;
 895:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_select_cb *p_selcb;
 896:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 897:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%ld tvusec=%ld)\n",
 898:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
 899:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   timeout ? (long)timeout->tv_sec : (long)-1,
 900:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   timeout ? (long)timeout->tv_usec : (long)-1));
 901:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 902:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   select_cb.next = 0;
 903:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   select_cb.readset = readset;
 904:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   select_cb.writeset = writeset;
 905:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   select_cb.exceptset = exceptset;
 906:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   select_cb.sem_signalled = 0;
 907:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 908:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Protect ourselves searching through the list */
 909:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_wait(selectsem);
 910:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 911:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (readset)
 912:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     lreadset = *readset;
 913:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   else
 914:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     FD_ZERO(&lreadset);
 915:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (writeset)
 916:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     lwriteset = *writeset;
 917:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   else
 918:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     FD_ZERO(&lwriteset);
 919:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (exceptset)
 920:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     lexceptset = *exceptset;
 921:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   else
 922:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     FD_ZERO(&lexceptset);
 923:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 924:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Go through each socket in each list to count number of sockets which
 925:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****      currently match */
 926:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   nready = lwip_selscan(maxfdp1, &lreadset, &lwriteset, &lexceptset);
 927:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
 928:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* If we don't have any current events, then suspend if we are supposed to */
 929:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!nready) {
 930:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 931:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sys_sem_signal(selectsem);
 932:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (readset)
 933:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         FD_ZERO(readset);
 934:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (writeset)
 935:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         FD_ZERO(writeset);
 936:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (exceptset)
 937:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         FD_ZERO(exceptset);
 938:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
 939:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
 940:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       set_errno(0);
 941:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
 942:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       return 0;
 943:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 944:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
 945:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* add our semaphore to list */
 946:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* We don't actually need any dynamic memory. Our entry on the
 947:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****      * list is only valid while we are in this function, so it's ok
 948:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****      * to use local variables */
 949:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
 950:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     select_cb.sem = sys_sem_new(0);
 951:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* Note that we are still protected */
 952:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* Put this select_cb on top of list */
 953:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     select_cb.next = select_cb_list;
 954:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     select_cb_list = &select_cb;
 955:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
 956:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* Now we can safely unprotect */
 957:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sys_sem_signal(selectsem);
 958:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
 959:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* Now just wait to be woken */
 960:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (timeout == 0)
 961:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       /* Wait forever */
 962:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       msectimeout = 0;
 963:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     else {
 964:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
 965:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if(msectimeout == 0)
 966:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         msectimeout = 1;
 967:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
 968:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
 969:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     i = sys_sem_wait_timeout(select_cb.sem, msectimeout);
 970:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
 971:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* Take us off the list */
 972:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sys_sem_wait(selectsem);
 973:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (select_cb_list == &select_cb)
 974:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       select_cb_list = select_cb.next;
 975:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     else
 976:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       for (p_selcb = select_cb_list; p_selcb; p_selcb = p_selcb->next) {
 977:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if (p_selcb->next == &select_cb) {
 978:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           p_selcb->next = select_cb.next;
 979:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           break;
 980:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         }
 981:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
 982:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
 983:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sys_sem_signal(selectsem);
 984:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
 985:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sys_sem_free(select_cb.sem);
 986:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (i == 0)  {
 987:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       /* Timeout */
 988:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (readset)
 989:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         FD_ZERO(readset);
 990:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (writeset)
 991:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         FD_ZERO(writeset);
 992:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (exceptset)
 993:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         FD_ZERO(exceptset);
 994:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
 995:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
 996:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       set_errno(0);
 997:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
 998:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       return 0;
 999:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1000:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
1001:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (readset)
1002:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       lreadset = *readset;
1003:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     else
1004:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       FD_ZERO(&lreadset);
1005:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (writeset)
1006:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       lwriteset = *writeset;
1007:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     else
1008:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       FD_ZERO(&lwriteset);
1009:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (exceptset)
1010:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       lexceptset = *exceptset;
1011:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     else
1012:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       FD_ZERO(&lexceptset);
1013:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
1014:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* See what's set */
1015:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     nready = lwip_selscan(maxfdp1, &lreadset, &lwriteset, &lexceptset);
1016:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   } else
1017:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sys_sem_signal(selectsem);
1018:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
1019:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (readset)
1020:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     *readset = lreadset;
1021:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (writeset)
1022:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     *writeset = lwriteset;
1023:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (exceptset)
1024:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     *exceptset = lexceptset;
1025:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
1026:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
1027:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   set_errno(0);
1028:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   
1029:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return nready;
1030:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1031:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1032:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /**
1033:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Callback registered in the netconn layer for each socket-netconn.
1034:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Processes recvevent (data available) and wakes up tasks waiting for select.
1035:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
1036:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static void
1037:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
1038:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
1039:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int s;
1040:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
1041:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_select_cb *scb;
1042:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1043:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_UNUSED_ARG(len);
1044:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1045:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Get socket */
1046:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (conn) {
1047:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     s = conn->socket;
1048:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (s < 0) {
1049:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       /* Data comes in right away after an accept, even though
1050:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****        * the server task might not have created a new socket yet.
1051:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****        * Just count down (or up) if that's the case and we
1052:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****        * will use the data later. Note that only receive events
1053:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****        * can happen before the new socket is set up. */
1054:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sys_sem_wait(socksem);
1055:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (conn->socket < 0) {
1056:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if (evt == NETCONN_EVT_RCVPLUS) {
1057:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           conn->socket--;
1058:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         }
1059:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sys_sem_signal(socksem);
1060:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         return;
1061:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1062:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       s = conn->socket;
1063:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sys_sem_signal(socksem);
1064:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1065:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1066:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock = get_socket(s);
1067:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (!sock) {
1068:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       return;
1069:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1070:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   } else {
1071:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return;
1072:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
1073:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1074:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_wait(selectsem);
1075:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Set event as required */
1076:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   switch (evt) {
1077:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case NETCONN_EVT_RCVPLUS:
1078:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->rcvevent++;
1079:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1080:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case NETCONN_EVT_RCVMINUS:
1081:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->rcvevent--;
1082:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1083:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case NETCONN_EVT_SENDPLUS:
1084:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->sendevent = 1;
1085:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1086:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case NETCONN_EVT_SENDMINUS:
1087:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->sendevent = 0;
1088:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1089:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     default:
1090:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_ASSERT("unknown event", 0);
1091:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1092:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
1093:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_signal(selectsem);
1094:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1095:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Now decide if anyone is waiting for this socket */
1096:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* NOTE: This code is written this way to protect the select link list
1097:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****      but to avoid a deadlock situation by releasing socksem before
1098:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****      signalling for the select. This means we need to go through the list
1099:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****      multiple times ONLY IF a select was actually waiting. We go through
1100:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****      the list the number of waiting select calls + 1. This list is
1101:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****      expected to be small. */
1102:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   while (1) {
1103:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sys_sem_wait(selectsem);
1104:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     for (scb = select_cb_list; scb; scb = scb->next) {
1105:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (scb->sem_signalled == 0) {
1106:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         /* Test this select call for our socket */
1107:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if (scb->readset && FD_ISSET(s, scb->readset))
1108:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           if (sock->rcvevent > 0)
1109:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****             break;
1110:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if (scb->writeset && FD_ISSET(s, scb->writeset))
1111:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           if (sock->sendevent)
1112:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****             break;
1113:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1114:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1115:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (scb) {
1116:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       scb->sem_signalled = 1;
1117:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sys_sem_signal(scb->sem);
1118:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sys_sem_signal(selectsem);
1119:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     } else {
1120:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sys_sem_signal(selectsem);
1121:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1122:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1123:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
1124:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1125:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1126:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /**
1127:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Unimplemented: Close one end of a full-duplex connection.
1128:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  * Currently, the full connection is closed.
1129:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****  */
1130:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
1131:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_shutdown(int s, int how)
1132:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
1133:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_UNUSED_ARG(how);
1134:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));
1135:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return lwip_close(s); /* XXX temporary hack until proper implementation */
1136:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1137:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1138:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static int
1139:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
1140:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
1141:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
1142:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct sockaddr_in sin;
1143:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct ip_addr naddr;
1144:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1145:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = get_socket(s);
1146:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
1147:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
1148:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1149:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   memset(&sin, 0, sizeof(sin));
1150:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sin.sin_len = sizeof(sin);
1151:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sin.sin_family = AF_INET;
1152:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1153:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* get the IP address and port */
1154:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   netconn_getaddr(sock->conn, &naddr, &sin.sin_port, local);
1155:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1156:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
1157:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
1158:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", sin.sin_port));
1159:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1160:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sin.sin_port = htons(sin.sin_port);
1161:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sin.sin_addr.s_addr = naddr.addr;
1162:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1163:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (*namelen > sizeof(sin))
1164:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     *namelen = sizeof(sin);
1165:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1166:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   MEMCPY(name, &sin, *namelen);
1167:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, 0);
1168:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return 0;
1169:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1170:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1171:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
1172:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
1173:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
1174:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return lwip_getaddrname(s, name, namelen, 0);
1175:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1176:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1177:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
1178:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
1179:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
1180:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return lwip_getaddrname(s, name, namelen, 1);
1181:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1182:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1183:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
1184:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
1185:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
1186:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err_t err = ERR_OK;
1187:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock = get_socket(s);
1188:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_setgetsockopt_data data;
1189:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1190:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
1191:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
1192:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1193:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if ((NULL == optval) || (NULL == optlen)) {
1194:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, EFAULT);
1195:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
1196:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
1197:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1198:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Do length and type checks for the various options first, to keep it readable. */
1199:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   switch (level) {
1200:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****    
1201:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: SOL_SOCKET */
1202:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case SOL_SOCKET:
1203:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1204:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****        
1205:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_ACCEPTCONN:
1206:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_BROADCAST:
1207:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_DEBUG: */
1208:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_DONTROUTE: */
1209:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_ERROR:
1210:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_KEEPALIVE:
1211:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_CONTIMEO: */
1212:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_SNDTIMEO: */
1213:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_SO_RCVTIMEO
1214:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_RCVTIMEO:
1215:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_SO_RCVTIMEO */
1216:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_SO_RCVBUF
1217:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_RCVBUF:
1218:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_SO_RCVBUF */
1219:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_OOBINLINE: */
1220:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_SNDBUF: */
1221:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_RCVLOWAT: */
1222:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_SNDLOWAT: */
1223:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if SO_REUSE
1224:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_REUSEADDR:
1225:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_REUSEPORT:
1226:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* SO_REUSE */
1227:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_TYPE:
1228:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_USELOOPBACK: */
1229:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (*optlen < sizeof(int)) {
1230:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1231:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1232:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1233:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1234:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_NO_CHECK:
1235:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (*optlen < sizeof(int)) {
1236:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1237:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1238:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_UDP
1239:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if ((sock->conn->type != NETCONN_UDP) ||
1240:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
1241:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         /* this flag is only available for UDP, not for UDP lite */
1242:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EAFNOSUPPORT;
1243:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1244:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_UDP */
1245:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1246:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1247:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     default:
1248:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
1249:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                   s, optname));
1250:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = ENOPROTOOPT;
1251:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1252:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1253:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                      
1254:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_IP */
1255:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_IP:
1256:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1257:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case IP_HDRINCL: */
1258:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case IP_RCVDSTADDR: */
1259:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case IP_RCVIF: */
1260:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_TTL:
1261:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_TOS:
1262:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (*optlen < sizeof(int)) {
1263:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1264:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1265:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1266:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_IGMP
1267:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_MULTICAST_TTL:
1268:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (*optlen < sizeof(u8_t)) {
1269:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1270:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1271:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1272:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_MULTICAST_IF:
1273:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (*optlen < sizeof(struct in_addr)) {
1274:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1275:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1276:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1277:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_IGMP */
1278:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1279:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     default:
1280:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
1281:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                   s, optname));
1282:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = ENOPROTOOPT;
1283:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1284:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1285:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****          
1286:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCP
1287:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_TCP */
1288:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_TCP:
1289:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (*optlen < sizeof(int)) {
1290:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = EINVAL;
1291:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1292:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1293:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
1294:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* If this is no TCP socket, ignore any options. */
1295:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (sock->conn->type != NETCONN_TCP)
1296:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       return 0;
1297:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1298:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1299:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_NODELAY:
1300:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPALIVE:
1301:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCP_KEEPALIVE
1302:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPIDLE:
1303:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPINTVL:
1304:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPCNT:
1305:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCP_KEEPALIVE */
1306:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1307:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****        
1308:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     default:
1309:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
1310:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                   s, optname));
1311:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = ENOPROTOOPT;
1312:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1313:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1314:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCP */
1315:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_UDP && LWIP_UDPLITE
1316:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_UDPLITE */
1317:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_UDPLITE:
1318:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (*optlen < sizeof(int)) {
1319:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = EINVAL;
1320:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1321:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1322:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     
1323:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* If this is no UDP lite socket, ignore any options. */
1324:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (sock->conn->type != NETCONN_UDPLITE)
1325:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       return 0;
1326:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1327:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1328:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case UDPLITE_SEND_CSCOV:
1329:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case UDPLITE_RECV_CSCOV:
1330:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1331:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****        
1332:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     default:
1333:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n
1334:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                   s, optname));
1335:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = ENOPROTOOPT;
1336:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1337:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1338:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_UDP && LWIP_UDPLITE*/
1339:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* UNDEFINED LEVEL */
1340:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   default:
1341:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
1342:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                   s, level, optname));
1343:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = ENOPROTOOPT;
1344:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }  /* switch */
1345:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1346:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****    
1347:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (err != ERR_OK) {
1348:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, err);
1349:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
1350:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
1351:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1352:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Now do the actual option processing */
1353:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.sock = sock;
1354:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.level = level;
1355:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.optname = optname;
1356:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.optval = optval;
1357:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.optlen = optlen;
1358:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.err = err;
1359:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   tcpip_callback(lwip_getsockopt_internal, &data);
1360:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_arch_sem_wait(sock->conn->op_completed, 0);
1361:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* maybe lwip_getsockopt_internal has changed err */
1362:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err = data.err;
1363:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1364:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, err);
1365:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return err ? -1 : 0;
1366:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1367:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1368:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static void
1369:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_getsockopt_internal(void *arg)
1370:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
1371:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
1372:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #ifdef LWIP_DEBUG
1373:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int s;
1374:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_DEBUG */
1375:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int level, optname;
1376:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   void *optval;
1377:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_setgetsockopt_data *data;
1378:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1379:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_ASSERT("arg != NULL", arg != NULL);
1380:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1381:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data = (struct lwip_setgetsockopt_data*)arg;
1382:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = data->sock;
1383:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #ifdef LWIP_DEBUG
1384:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   s = data->s;
1385:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_DEBUG */
1386:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   level = data->level;
1387:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   optname = data->optname;
1388:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   optval = data->optval;
1389:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1390:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   switch (level) {
1391:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****    
1392:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: SOL_SOCKET */
1393:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case SOL_SOCKET:
1394:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1395:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1396:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* The option flags */
1397:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_ACCEPTCONN:
1398:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_BROADCAST:
1399:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_DEBUG: */
1400:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_DONTROUTE: */
1401:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_KEEPALIVE:
1402:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_OOBINCLUDE: */
1403:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if SO_REUSE
1404:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_REUSEADDR:
1405:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_REUSEPORT:
1406:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* SO_REUSE */
1407:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /*case SO_USELOOPBACK: UNIMPL */
1408:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = sock->conn->pcb.ip->so_options & optname;
1409:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
1410:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                                   s, optname, (*(int*)optval?"on":"off")));
1411:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1412:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1413:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_TYPE:
1414:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       switch (NETCONNTYPE_GROUP(sock->conn->type)) {
1415:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       case NETCONN_RAW:
1416:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         *(int*)optval = SOCK_RAW;
1417:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         break;
1418:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       case NETCONN_TCP:
1419:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         *(int*)optval = SOCK_STREAM;
1420:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         break;
1421:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       case NETCONN_UDP:
1422:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         *(int*)optval = SOCK_DGRAM;
1423:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         break;
1424:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       default: /* unrecognized socket type */
1425:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         *(int*)optval = sock->conn->type;
1426:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG,
1427:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                     ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
1428:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                     s, *(int *)optval));
1429:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }  /* switch (sock->conn->type) */
1430:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
1431:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(int *)optval));
1432:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1433:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1434:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_ERROR:
1435:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (sock->err == 0) {
1436:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock_set_errno(sock, err_to_errno(sock->conn->err));
1437:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       } 
1438:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int *)optval = sock->err;
1439:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->err = 0;
1440:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
1441:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(int *)optval));
1442:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1443:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1444:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_SO_RCVTIMEO
1445:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_RCVTIMEO:
1446:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int *)optval = sock->conn->recv_timeout;
1447:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1448:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_SO_RCVTIMEO */
1449:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_SO_RCVBUF
1450:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_RCVBUF:
1451:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int *)optval = sock->conn->recv_bufsize;
1452:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1453:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_SO_RCVBUF */
1454:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_UDP
1455:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_NO_CHECK:
1456:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
1457:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1458:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_UDP*/
1459:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1460:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1461:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1462:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_IP */
1463:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_IP:
1464:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1465:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_TTL:
1466:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = sock->conn->pcb.ip->ttl;
1467:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
1468:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(int *)optval));
1469:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1470:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_TOS:
1471:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = sock->conn->pcb.ip->tos;
1472:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
1473:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(int *)optval));
1474:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1475:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_IGMP
1476:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_MULTICAST_TTL:
1477:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(u8_t*)optval = sock->conn->pcb.ip->ttl;
1478:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
1479:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(int *)optval));
1480:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1481:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_MULTICAST_IF:
1482:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       ((struct in_addr*) optval)->s_addr = sock->conn->pcb.udp->multicast_ip.addr;
1483:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n"
1484:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(u32_t *)optval));
1485:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1486:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_IGMP */
1487:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1488:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1489:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1490:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCP
1491:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_TCP */
1492:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_TCP:
1493:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1494:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_NODELAY:
1495:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
1496:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
1497:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, (*(int*)optval)?"on":"off") );
1498:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1499:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPALIVE:
1500:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
1501:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",
1502:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(int *)optval));
1503:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1504:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1505:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCP_KEEPALIVE
1506:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPIDLE:
1507:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
1508:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",
1509:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(int *)optval));
1510:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1511:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPINTVL:
1512:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
1513:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",
1514:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(int *)optval));
1515:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1516:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPCNT:
1517:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
1518:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",
1519:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, *(int *)optval));
1520:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1521:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCP_KEEPALIVE */
1522:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1523:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1524:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1525:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCP */
1526:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_UDP && LWIP_UDPLITE
1527:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Level: IPPROTO_UDPLITE */
1528:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_UDPLITE:
1529:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1530:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case UDPLITE_SEND_CSCOV:
1531:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = sock->conn->pcb.udp->chksum_len_tx;
1532:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) = %d\n"
1533:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, (*(int*)optval)) );
1534:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1535:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case UDPLITE_RECV_CSCOV:
1536:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *(int*)optval = sock->conn->pcb.udp->chksum_len_rx;
1537:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) = %d\n"
1538:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, (*(int*)optval)) );
1539:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1540:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1541:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1542:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_UDP */
1543:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   } /* switch (level) */
1544:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_signal(sock->conn->op_completed);
1545:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1546:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1547:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
1548:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
1549:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
1550:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock = get_socket(s);
1551:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int err = ERR_OK;
1552:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_setgetsockopt_data data;
1553:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1554:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
1555:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
1556:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1557:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (NULL == optval) {
1558:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, EFAULT);
1559:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
1560:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
1561:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1562:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Do length and type checks for the various options first, to keep it readable. */
1563:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   switch (level) {
1564:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1565:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: SOL_SOCKET */
1566:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case SOL_SOCKET:
1567:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1568:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1569:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_BROADCAST:
1570:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_DEBUG: */
1571:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_DONTROUTE: */
1572:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_KEEPALIVE:
1573:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case case SO_CONTIMEO: */
1574:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case case SO_SNDTIMEO: */
1575:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_SO_RCVTIMEO
1576:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_RCVTIMEO:
1577:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_SO_RCVTIMEO */
1578:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_SO_RCVBUF
1579:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_RCVBUF:
1580:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_SO_RCVBUF */
1581:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_OOBINLINE: */
1582:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_SNDBUF: */
1583:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_RCVLOWAT: */
1584:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_SNDLOWAT: */
1585:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if SO_REUSE
1586:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_REUSEADDR:
1587:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_REUSEPORT:
1588:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* SO_REUSE */
1589:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_USELOOPBACK: */
1590:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (optlen < sizeof(int)) {
1591:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1592:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1593:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1594:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_NO_CHECK:
1595:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (optlen < sizeof(int)) {
1596:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1597:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1598:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_UDP
1599:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if ((sock->conn->type != NETCONN_UDP) ||
1600:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
1601:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         /* this flag is only available for UDP, not for UDP lite */
1602:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EAFNOSUPPORT;
1603:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1604:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_UDP */
1605:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1606:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     default:
1607:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
1608:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, optname));
1609:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = ENOPROTOOPT;
1610:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1611:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1612:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1613:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_IP */
1614:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_IP:
1615:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1616:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case IP_HDRINCL: */
1617:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case IP_RCVDSTADDR: */
1618:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case IP_RCVIF: */
1619:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_TTL:
1620:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_TOS:
1621:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (optlen < sizeof(int)) {
1622:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1623:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1624:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1625:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_IGMP
1626:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_MULTICAST_TTL:
1627:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (optlen < sizeof(u8_t)) {
1628:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1629:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1630:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP) {
1631:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EAFNOSUPPORT;
1632:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1633:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1634:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_MULTICAST_IF:
1635:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (optlen < sizeof(struct in_addr)) {
1636:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1637:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1638:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP) {
1639:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EAFNOSUPPORT;
1640:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1641:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1642:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_ADD_MEMBERSHIP:
1643:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_DROP_MEMBERSHIP:
1644:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (optlen < sizeof(struct ip_mreq)) {
1645:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EINVAL;
1646:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1647:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP) {
1648:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = EAFNOSUPPORT;
1649:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1650:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1651:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_IGMP */
1652:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       default:
1653:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
1654:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                     s, optname));
1655:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         err = ENOPROTOOPT;
1656:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1657:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1658:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1659:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCP
1660:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_TCP */
1661:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_TCP:
1662:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (optlen < sizeof(int)) {
1663:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = EINVAL;
1664:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1665:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1666:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1667:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* If this is no TCP socket, ignore any options. */
1668:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (sock->conn->type != NETCONN_TCP)
1669:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       return 0;
1670:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1671:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1672:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_NODELAY:
1673:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPALIVE:
1674:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCP_KEEPALIVE
1675:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPIDLE:
1676:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPINTVL:
1677:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPCNT:
1678:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCP_KEEPALIVE */
1679:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1680:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1681:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     default:
1682:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
1683:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, optname));
1684:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = ENOPROTOOPT;
1685:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1686:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1687:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCP */
1688:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_UDP && LWIP_UDPLITE
1689:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_UDPLITE */
1690:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_UDPLITE:
1691:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (optlen < sizeof(int)) {
1692:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = EINVAL;
1693:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1694:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1695:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1696:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* If this is no UDP lite socket, ignore any options. */
1697:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (sock->conn->type != NETCONN_UDPLITE)
1698:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       return 0;
1699:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1700:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1701:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case UDPLITE_SEND_CSCOV:
1702:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case UDPLITE_RECV_CSCOV:
1703:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1704:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1705:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     default:
1706:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n
1707:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, optname));
1708:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       err = ENOPROTOOPT;
1709:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1710:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1711:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_UDP && LWIP_UDPLITE */
1712:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* UNDEFINED LEVEL */
1713:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   default:
1714:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
1715:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                 s, level, optname));
1716:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     err = ENOPROTOOPT;
1717:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }  /* switch (level) */
1718:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1719:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1720:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (err != ERR_OK) {
1721:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, err);
1722:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
1723:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }
1724:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1725:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1726:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Now do the actual option processing */
1727:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.sock = sock;
1728:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.level = level;
1729:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.optname = optname;
1730:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.optval = (void*)optval;
1731:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.optlen = &optlen;
1732:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data.err = err;
1733:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   tcpip_callback(lwip_setsockopt_internal, &data);
1734:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_arch_sem_wait(sock->conn->op_completed, 0);
1735:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* maybe lwip_setsockopt_internal has changed err */
1736:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   err = data.err;
1737:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1738:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock_set_errno(sock, err);
1739:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   return err ? -1 : 0;
1740:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1741:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1742:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** static void
1743:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_setsockopt_internal(void *arg)
1744:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
1745:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock;
1746:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #ifdef LWIP_DEBUG
1747:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int s;
1748:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_DEBUG */
1749:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   int level, optname;
1750:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   const void *optval;
1751:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_setgetsockopt_data *data;
1752:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1753:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   LWIP_ASSERT("arg != NULL", arg != NULL);
1754:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1755:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   data = (struct lwip_setgetsockopt_data*)arg;
1756:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sock = data->sock;
1757:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #ifdef LWIP_DEBUG
1758:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   s = data->s;
1759:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_DEBUG */
1760:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   level = data->level;
1761:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   optname = data->optname;
1762:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   optval = data->optval;
1763:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1764:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   switch (level) {
1765:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1766:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: SOL_SOCKET */
1767:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case SOL_SOCKET:
1768:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1769:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1770:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* The option flags */
1771:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_BROADCAST:
1772:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_DEBUG: */
1773:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_DONTROUTE: */
1774:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_KEEPALIVE:
1775:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_OOBINCLUDE: */
1776:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if SO_REUSE
1777:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_REUSEADDR:
1778:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_REUSEPORT:
1779:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* SO_REUSE */
1780:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* UNIMPL case SO_USELOOPBACK: */
1781:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (*(int*)optval) {
1782:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->conn->pcb.ip->so_options |= optname;
1783:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       } else {
1784:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->conn->pcb.ip->so_options &= ~optname;
1785:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1786:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
1787:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, optname, (*(int*)optval?"on":"off")));
1788:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1789:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_SO_RCVTIMEO
1790:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_RCVTIMEO:
1791:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->recv_timeout = ( *(int*)optval );
1792:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1793:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_SO_RCVTIMEO */
1794:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_SO_RCVBUF
1795:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_RCVBUF:
1796:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->recv_bufsize = ( *(int*)optval );
1797:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1798:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_SO_RCVBUF */
1799:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_UDP
1800:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case SO_NO_CHECK:
1801:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (*(int*)optval) {
1802:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
1803:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       } else {
1804:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
1805:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1806:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1807:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_UDP */
1808:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1809:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1810:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1811:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_IP */
1812:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_IP:
1813:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1814:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_TTL:
1815:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->pcb.ip->ttl = (u8_t)(*(int*)optval);
1816:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
1817:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, sock->conn->pcb.ip->ttl));
1818:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1819:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_TOS:
1820:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->pcb.ip->tos = (u8_t)(*(int*)optval);
1821:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
1822:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, sock->conn->pcb.ip->tos));
1823:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1824:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_IGMP
1825:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_MULTICAST_TTL:
1826:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->pcb.udp->ttl = (u8_t)(*(u8_t*)optval);
1827:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1828:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_MULTICAST_IF:
1829:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->pcb.udp->multicast_ip.addr = ((struct in_addr*) optval)->s_addr;
1830:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1831:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_ADD_MEMBERSHIP:
1832:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case IP_DROP_MEMBERSHIP:
1833:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       {
1834:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         /* If this is a TCP or a RAW socket, ignore these options. */
1835:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         struct ip_mreq *imr = (struct ip_mreq *)optval;
1836:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if(optname == IP_ADD_MEMBERSHIP){
1837:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           data->err = igmp_joingroup((struct ip_addr*)&(imr->imr_interface.s_addr), (struct ip_addr
1838:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         } else {
1839:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           data->err = igmp_leavegroup((struct ip_addr*)&(imr->imr_interface.s_addr), (struct ip_add
1840:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         }
1841:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         if(data->err != ERR_OK) {
1842:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****           data->err = EADDRNOTAVAIL;
1843:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         }
1844:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1845:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1846:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_IGMP */
1847:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1848:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1849:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1850:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCP
1851:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** /* Level: IPPROTO_TCP */
1852:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_TCP:
1853:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1854:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_NODELAY:
1855:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if (*(int*)optval) {
1856:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         tcp_nagle_disable(sock->conn->pcb.tcp);
1857:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       } else {
1858:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         tcp_nagle_enable(sock->conn->pcb.tcp);
1859:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1860:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
1861:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, (*(int *)optval)?"on":"off") );
1862:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1863:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPALIVE:
1864:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->pcb.tcp->keep_idle = (u32_t)(*(int*)optval);
1865:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
1866:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, sock->conn->pcb.tcp->keep_idle));
1867:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1868:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1869:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_TCP_KEEPALIVE
1870:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPIDLE:
1871:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(int*)optval);
1872:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
1873:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, sock->conn->pcb.tcp->keep_idle));
1874:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1875:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPINTVL:
1876:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(int*)optval);
1877:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
1878:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, sock->conn->pcb.tcp->keep_intvl));
1879:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1880:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case TCP_KEEPCNT:
1881:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(int*)optval);
1882:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
1883:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, sock->conn->pcb.tcp->keep_cnt));
1884:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1885:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCP_KEEPALIVE */
1886:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1887:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1888:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1889:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_TCP*/
1890:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #if LWIP_UDP && LWIP_UDPLITE
1891:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   /* Level: IPPROTO_UDPLITE */
1892:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case IPPROTO_UDPLITE:
1893:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     switch (optname) {
1894:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case UDPLITE_SEND_CSCOV:
1895:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if ((*(int*)optval != 0) && (*(int*)optval < 8)) {
1896:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         /* don't allow illegal values! */
1897:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->conn->pcb.udp->chksum_len_tx = 8;
1898:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       } else {
1899:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->conn->pcb.udp->chksum_len_tx = *(int*)optval;
1900:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1901:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) -> %d\n
1902:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, (*(int*)optval)) );
1903:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1904:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     case UDPLITE_RECV_CSCOV:
1905:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       if ((*(int*)optval != 0) && (*(int*)optval < 8)) {
1906:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         /* don't allow illegal values! */
1907:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->conn->pcb.udp->chksum_len_rx = 8;
1908:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       } else {
1909:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****         sock->conn->pcb.udp->chksum_len_rx = *(int*)optval;
1910:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       }
1911:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) -> %d\n
1912:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****                   s, (*(int*)optval)) );
1913:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       break;
1914:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }  /* switch (optname) */
1915:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     break;
1916:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** #endif /* LWIP_UDP */
1917:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   }  /* switch (level) */
1918:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   sys_sem_signal(sock->conn->op_completed);
1919:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
1920:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1921:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** int
1922:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** lwip_ioctl(int s, long cmd, void *argp)
1923:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** {
 269              		.loc 1 1923 0
 270 0124 70B5     		push	{r4, r5, r6, lr}
 271              	.LCFI3:
 272              	.LVL38:
 273 0126 0C1C     		mov	r4, r1
 274 0128 161C     		mov	r6, r2
1924:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   struct lwip_socket *sock = get_socket(s);
 275              		.loc 1 1924 0
 276 012a FFF769FF 		bl	get_socket
 277              	.LVL39:
 278 012e 051C     		mov	r5, r0
 279              	.LVL40:
1925:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   u16_t buflen = 0;
1926:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   s16_t recv_avail;
1927:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1928:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   if (!sock)
 280              		.loc 1 1928 0
 281 0130 0028     		cmp	r0, #0
 282 0132 02D1     		bne	.L25
 283              	.LVL41:
 284 0134 0120     		mov	r0, #1
 285              	.LVL42:
 286 0136 4042     		neg	r0, r0
 287 0138 3EE0     		b	.L26
 288              	.LVL43:
 289              	.L25:
1929:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
1930:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1931:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   switch (cmd) {
 290              		.loc 1 1931 0
 291 013a 214B     		ldr	r3, .L37
 292 013c 9C42     		cmp	r4, r3
 293 013e 24D0     		beq	.L28
 294 0140 204B     		ldr	r3, .L37+4
 295 0142 9C42     		cmp	r4, r3
 296 0144 34D1     		bne	.L36
1932:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case FIONREAD:
1933:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (!argp) {
 297              		.loc 1 1933 0
 298 0146 002E     		cmp	r6, #0
 299 0148 04D1     		bne	.L30
1934:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock_set_errno(sock, EINVAL);
 300              		.loc 1 1934 0
 301 014a 1623     		mov	r3, #22
 302 014c 0361     		str	r3, [r0, #16]
 303 014e 0120     		mov	r0, #1
 304              	.LVL44:
 305 0150 4042     		neg	r0, r0
 306 0152 31E0     		b	.L26
 307              	.LVL45:
 308              	.L30:
 309              	.LBB6:
1935:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       return -1;
1936:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1937:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1938:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
 310              		.loc 1 1938 0
 311 0154 FFF7FEFF 		bl	sys_arch_protect
 312              	.LVL46:
 313 0158 2B68     		ldr	r3, [r5]
 314 015a 9C8C     		ldrh	r4, [r3, #36]
 315              	.LVL47:
 316 015c FFF7FEFF 		bl	sys_arch_unprotect
 317              	.LBE6:
1939:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (recv_avail < 0)
1940:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       recv_avail = 0;
1941:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     *((u16_t*)argp) = (u16_t)recv_avail;
 318              		.loc 1 1941 0
 319 0160 311C     		mov	r1, r6
 320 0162 2304     		lsl	r3, r4, #16
 321 0164 002B     		cmp	r3, #0
 322 0166 00DA     		bge	.L31
 323 0168 0024     		mov	r4, #0
 324              	.LVL48:
 325              	.L31:
 326 016a 2304     		lsl	r3, r4, #16
 327 016c 1C0C     		lsr	r4, r3, #16
 328              	.LVL49:
 329 016e 0C80     		strh	r4, [r1]
1942:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1943:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     /* Check if there is data left from the last recv operation. /maq 041215 */
1944:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (sock->lastdata) {
 330              		.loc 1 1944 0
 331 0170 6B68     		ldr	r3, [r5, #4]
 332 0172 002B     		cmp	r3, #0
 333 0174 05D0     		beq	.L32
1945:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       buflen = netbuf_len(sock->lastdata);
 334              		.loc 1 1945 0
 335 0176 1B68     		ldr	r3, [r3]
 336 0178 1B89     		ldrh	r3, [r3, #8]
 337              	.LVL50:
1946:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       buflen -= sock->lastoffset;
1947:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1948:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       *((u16_t*)argp) += buflen;
 338              		.loc 1 1948 0
 339 017a 2A89     		ldrh	r2, [r5, #8]
 340 017c 9B1A     		sub	r3, r3, r2
 341              	.LVL51:
 342 017e E318     		add	r3, r4, r3
 343 0180 0B80     		strh	r3, [r1]
 344              	.L32:
1949:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     }
1950:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1951:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONREAD, %p) = %"U16_F"\n", s, argp, *((u16_t*)arg
1952:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, 0);
 345              		.loc 1 1952 0
 346 0182 0023     		mov	r3, #0
 347 0184 2B61     		str	r3, [r5, #16]
 348 0186 0020     		mov	r0, #0
 349 0188 16E0     		b	.L26
 350              	.LVL52:
 351              	.L28:
1953:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return 0;
1954:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1955:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   case FIONBIO:
1956:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     if (argp && *(u32_t*)argp)
 352              		.loc 1 1956 0
 353 018a 002E     		cmp	r6, #0
 354 018c 08D0     		beq	.L33
 355 018e 3368     		ldr	r3, [r6]
 356 0190 002B     		cmp	r3, #0
 357 0192 05D0     		beq	.L33
1957:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->flags |= O_NONBLOCK;
 358              		.loc 1 1957 0
 359 0194 C389     		ldrh	r3, [r0, #14]
 360 0196 8022     		mov	r2, #128
 361 0198 1201     		lsl	r2, r2, #4
 362 019a 1343     		orr	r3, r3, r2
 363 019c C381     		strh	r3, [r0, #14]
 364 019e 03E0     		b	.L34
 365              	.L33:
1958:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     else
1959:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****       sock->flags &= ~O_NONBLOCK;
 366              		.loc 1 1959 0
 367 01a0 EB89     		ldrh	r3, [r5, #14]
 368 01a2 094A     		ldr	r2, .L37+8
 369 01a4 1340     		and	r3, r3, r2
 370 01a6 EB81     		strh	r3, [r5, #14]
 371              	.LVL53:
 372              	.L34:
1960:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, !!(sock->flags & O_NONBLOCK)));
1961:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, 0);
 373              		.loc 1 1961 0
 374 01a8 0023     		mov	r3, #0
 375 01aa 2B61     		str	r3, [r5, #16]
 376 01ac 0020     		mov	r0, #0
 377 01ae 03E0     		b	.L26
 378              	.LVL54:
 379              	.L36:
1962:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return 0;
1963:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** 
1964:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   default:
1965:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
1966:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     sock_set_errno(sock, ENOSYS); /* not yet implemented */
 380              		.loc 1 1966 0
 381 01b0 2623     		mov	r3, #38
 382 01b2 0361     		str	r3, [r0, #16]
 383 01b4 0120     		mov	r0, #1
 384              	.LVL55:
 385 01b6 4042     		neg	r0, r0
 386              	.L26:
1967:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****     return -1;
1968:rtos/common/ethernet/lwIP_132/src/api/sockets.c ****   } /* switch (cmd) */
1969:rtos/common/ethernet/lwIP_132/src/api/sockets.c **** }
 387              		.loc 1 1969 0
 388              		@ sp needed for prologue
 389              	.LVL56:
 390              	.LVL57:
 391              	.LVL58:
 392 01b8 70BC     		pop	{r4, r5, r6}
 393 01ba 02BC     		pop	{r1}
 394 01bc 0847     		bx	r1
 395              	.L38:
 396 01be C046     		.align	2
 397              	.L37:
 398 01c0 7E660480 		.word	-2147195266
 399 01c4 7F660440 		.word	1074030207
 400 01c8 FFF7FFFF 		.word	-2049
 401              	.LFE316:
 403              		.align	2
 404              		.global	lwip_setsockopt
 405              		.code	16
 406              		.thumb_func
 408              	lwip_setsockopt:
 409              	.LFB314:
 410              		.loc 1 1549 0
 411 01cc F0B5     		push	{r4, r5, r6, r7, lr}
 412              	.LCFI4:
 413 01ce 4746     		mov	r7, r8
 414 01d0 80B4     		push	{r7}
 415              	.LCFI5:
 416              	.LVL59:
 417 01d2 87B0     		sub	sp, sp, #28
 418              	.LCFI6:
 419 01d4 0F1C     		mov	r7, r1
 420 01d6 161C     		mov	r6, r2
 421 01d8 9846     		mov	r8, r3
 422              		.loc 1 1550 0
 423 01da FFF711FF 		bl	get_socket
 424              	.LVL60:
 425 01de 051C     		mov	r5, r0
 426              	.LVL61:
 427              		.loc 1 1554 0
 428 01e0 0028     		cmp	r0, #0
 429 01e2 65D0     		beq	.L40
 430              	.LVL62:
 431              		.loc 1 1557 0
 432 01e4 4146     		mov	r1, r8
 433 01e6 0029     		cmp	r1, #0
 434 01e8 04D1     		bne	.L41
 435              		.loc 1 1558 0
 436 01ea 0E23     		mov	r3, #14
 437 01ec 0361     		str	r3, [r0, #16]
 438 01ee 0120     		mov	r0, #1
 439              	.LVL63:
 440 01f0 4042     		neg	r0, r0
 441 01f2 61E0     		b	.L42
 442              	.LVL64:
 443              	.L41:
 444              		.loc 1 1563 0
 445 01f4 062F     		cmp	r7, #6
 446 01f6 2DD0     		beq	.L45
 447 01f8 344B     		ldr	r3, .L64
 448 01fa 9F42     		cmp	r7, r3
 449 01fc 02D0     		beq	.L46
 450 01fe 002F     		cmp	r7, #0
 451 0200 21D0     		beq	.L44
 452 0202 35E0     		b	.L43
 453              	.L46:
 454              		.loc 1 1567 0
 455 0204 202E     		cmp	r6, #32
 456 0206 0BD0     		beq	.L47
 457 0208 202E     		cmp	r6, #32
 458 020a 02DC     		bgt	.L49
 459 020c 082E     		cmp	r6, #8
 460 020e 2FD1     		bne	.L43
 461 0210 06E0     		b	.L47
 462              	.L49:
 463 0212 2F4B     		ldr	r3, .L64+4
 464 0214 9E42     		cmp	r6, r3
 465 0216 03D0     		beq	.L47
 466 0218 0433     		add	r3, r3, #4
 467 021a 9E42     		cmp	r6, r3
 468 021c 28D1     		bne	.L43
 469 021e 03E0     		b	.L63
 470              	.L47:
 471              		.loc 1 1590 0
 472 0220 0D9B     		ldr	r3, [sp, #52]
 473 0222 032B     		cmp	r3, #3
 474 0224 4ED9     		bls	.L50
 475              	.LVL65:
 476 0226 2AE0     		b	.L51
 477              	.LVL66:
 478              	.L63:
 479              		.loc 1 1595 0
 480 0228 0D9B     		ldr	r3, [sp, #52]
 481 022a 032B     		cmp	r3, #3
 482 022c 01D8     		bhi	.L52
 483              	.LVL67:
 484 022e 1622     		mov	r2, #22
 485              	.LVL68:
 486 0230 00E0     		b	.L53
 487              	.LVL69:
 488              	.L52:
 489 0232 0022     		mov	r2, #0
 490              	.LVL70:
 491              	.L53:
 492              		.loc 1 1599 0
 493 0234 2968     		ldr	r1, [r5]
 494 0236 0B68     		ldr	r3, [r1]
 495              	.LVL71:
 496 0238 202B     		cmp	r3, #32
 497 023a 45D1     		bne	.L54
 498              	.LVL72:
 499 023c 8B68     		ldr	r3, [r1, #8]
 500 023e 1B7C     		ldrb	r3, [r3, #16]
 501 0240 9907     		lsl	r1, r3, #30
 502 0242 41D4     		bmi	.L54
 503 0244 15E0     		b	.L55
 504              	.LVL73:
 505              	.L44:
 506              		.loc 1 1615 0
 507 0246 731E     		sub	r3, r6, #1
 508 0248 012B     		cmp	r3, #1
 509 024a 11D8     		bhi	.L43
 510              		.loc 1 1621 0
 511 024c 0D9B     		ldr	r3, [sp, #52]
 512 024e 032B     		cmp	r3, #3
 513 0250 38D9     		bls	.L50
 514              	.LVL74:
 515 0252 14E0     		b	.L51
 516              	.LVL75:
 517              	.L45:
 518              		.loc 1 1662 0
 519 0254 0D9B     		ldr	r3, [sp, #52]
 520 0256 032B     		cmp	r3, #3
 521 0258 34D9     		bls	.L50
 522              	.LVL76:
 523              		.loc 1 1668 0
 524 025a 0368     		ldr	r3, [r0]
 525              	.LVL77:
 526 025c 1B68     		ldr	r3, [r3]
 527 025e 102B     		cmp	r3, #16
 528 0260 29D1     		bne	.L57
 529              		.loc 1 1671 0
 530 0262 731E     		sub	r3, r6, #1
 531 0264 012B     		cmp	r3, #1
 532 0266 01D9     		bls	.L62
 533 0268 5C22     		mov	r2, #92
 534              	.LVL78:
 535 026a 04E0     		b	.L60
 536              	.LVL79:
 537              	.L62:
 538 026c 0022     		mov	r2, #0
 539              	.LVL80:
 540 026e 00E0     		b	.L55
 541              	.LVL81:
 542              	.L43:
 543 0270 5C22     		mov	r2, #92
 544              	.LVL82:
 545              	.L55:
 546              		.loc 1 1720 0
 547 0272 002A     		cmp	r2, #0
 548 0274 03D0     		beq	.L51
 549              	.LVL83:
 550              	.L60:
 551              		.loc 1 1721 0
 552 0276 2A61     		str	r2, [r5, #16]
 553 0278 0120     		mov	r0, #1
 554              	.LVL84:
 555 027a 4042     		neg	r0, r0
 556 027c 1CE0     		b	.L42
 557              	.LVL85:
 558              	.L51:
 559              		.loc 1 1727 0
 560 027e 6C46     		mov	r4, sp
 561 0280 0095     		str	r5, [sp]
 562              		.loc 1 1728 0
 563 0282 0297     		str	r7, [sp, #8]
 564              		.loc 1 1729 0
 565 0284 0396     		str	r6, [sp, #12]
 566              		.loc 1 1730 0
 567 0286 4346     		mov	r3, r8
 568 0288 0493     		str	r3, [sp, #16]
 569              		.loc 1 1731 0
 570 028a 0DA9     		add	r1, sp, #52
 571 028c 0591     		str	r1, [sp, #20]
 572              		.loc 1 1732 0
 573 028e 0023     		mov	r3, #0
 574 0290 2376     		strb	r3, [r4, #24]
 575              		.loc 1 1733 0
 576 0292 1048     		ldr	r0, .L64+8
 577              	.LVL86:
 578 0294 6946     		mov	r1, sp
 579 0296 0122     		mov	r2, #1
 580              	.LVL87:
 581 0298 FFF7FEFF 		bl	tcpip_callback_with_block
 582              		.loc 1 1734 0
 583 029c 2B68     		ldr	r3, [r5]
 584 029e 1869     		ldr	r0, [r3, #16]
 585 02a0 0021     		mov	r1, #0
 586 02a2 FFF7FEFF 		bl	sys_arch_sem_wait
 587              		.loc 1 1736 0
 588 02a6 1823     		mov	r3, #24
 589 02a8 E356     		ldrsb	r3, [r4, r3]
 590              	.LVL88:
 591              		.loc 1 1738 0
 592 02aa 2B61     		str	r3, [r5, #16]
 593              		.loc 1 1739 0
 594 02ac 002B     		cmp	r3, #0
 595 02ae 02D0     		beq	.L57
 596              	.LVL89:
 597              	.L40:
 598 02b0 0120     		mov	r0, #1
 599 02b2 4042     		neg	r0, r0
 600 02b4 00E0     		b	.L42
 601              	.LVL90:
 602              	.L57:
 603 02b6 0020     		mov	r0, #0
 604              	.LVL91:
 605              	.L42:
 606              		.loc 1 1740 0
 607 02b8 07B0     		add	sp, sp, #28
 608              		@ sp needed for prologue
 609              	.LVL92:
 610              	.LVL93:
 611              	.LVL94:
 612              	.LVL95:
 613 02ba 04BC     		pop	{r2}
 614 02bc 9046     		mov	r8, r2
 615 02be F0BC     		pop	{r4, r5, r6, r7}
 616 02c0 02BC     		pop	{r1}
 617 02c2 0847     		bx	r1
 618              	.LVL96:
 619              	.L50:
 620              		.loc 1 1739 0
 621 02c4 1622     		mov	r2, #22
 622              	.LVL97:
 623 02c6 D6E7     		b	.L60
 624              	.LVL98:
 625              	.L54:
 626 02c8 6122     		mov	r2, #97
 627 02ca D4E7     		b	.L60
 628              	.L65:
 629              		.align	2
 630              	.L64:
 631 02cc FF0F0000 		.word	4095
 632 02d0 06100000 		.word	4102
 633 02d4 00000000 		.word	lwip_setsockopt_internal
 634              	.LFE314:
 636              		.align	2
 637              		.global	lwip_getsockopt
 638              		.code	16
 639              		.thumb_func
 641              	lwip_getsockopt:
 642              	.LFB312:
 643              		.loc 1 1185 0
 644 02d8 F0B5     		push	{r4, r5, r6, r7, lr}
 645              	.LCFI7:
 646 02da 4746     		mov	r7, r8
 647 02dc 80B4     		push	{r7}
 648              	.LCFI8:
 649              	.LVL99:
 650 02de 87B0     		sub	sp, sp, #28
 651              	.LCFI9:
 652 02e0 0F1C     		mov	r7, r1
 653 02e2 161C     		mov	r6, r2
 654 02e4 9846     		mov	r8, r3
 655              		.loc 1 1187 0
 656 02e6 FFF78BFE 		bl	get_socket
 657              	.LVL100:
 658 02ea 051C     		mov	r5, r0
 659              	.LVL101:
 660              		.loc 1 1190 0
 661 02ec 0028     		cmp	r0, #0
 662 02ee 72D0     		beq	.L67
 663              	.LVL102:
 664              		.loc 1 1193 0
 665 02f0 4146     		mov	r1, r8
 666 02f2 0029     		cmp	r1, #0
 667 02f4 02D0     		beq	.L90
 668 02f6 0D9A     		ldr	r2, [sp, #52]
 669 02f8 002A     		cmp	r2, #0
 670 02fa 04D1     		bne	.L68
 671              	.L90:
 672              		.loc 1 1194 0
 673 02fc 0E23     		mov	r3, #14
 674 02fe 2B61     		str	r3, [r5, #16]
 675 0300 0120     		mov	r0, #1
 676              	.LVL103:
 677 0302 4042     		neg	r0, r0
 678 0304 6BE0     		b	.L70
 679              	.LVL104:
 680              	.L68:
 681              		.loc 1 1199 0
 682 0306 062F     		cmp	r7, #6
 683 0308 35D0     		beq	.L73
 684 030a 3A4B     		ldr	r3, .L93
 685 030c 9F42     		cmp	r7, r3
 686 030e 02D0     		beq	.L74
 687 0310 002F     		cmp	r7, #0
 688 0312 28D0     		beq	.L72
 689 0314 3EE0     		b	.L71
 690              	.L74:
 691              		.loc 1 1203 0
 692 0316 202E     		cmp	r6, #32
 693 0318 10D0     		beq	.L75
 694 031a 202E     		cmp	r6, #32
 695 031c 04DC     		bgt	.L77
 696 031e 022E     		cmp	r6, #2
 697 0320 0CD0     		beq	.L75
 698 0322 082E     		cmp	r6, #8
 699 0324 36D1     		bne	.L71
 700 0326 09E0     		b	.L75
 701              	.L77:
 702 0328 334B     		ldr	r3, .L93+4
 703 032a 9E42     		cmp	r6, r3
 704 032c 32DB     		blt	.L71
 705 032e 0233     		add	r3, r3, #2
 706 0330 9E42     		cmp	r6, r3
 707 0332 03DD     		ble	.L75
 708 0334 0233     		add	r3, r3, #2
 709 0336 9E42     		cmp	r6, r3
 710 0338 2CD1     		bne	.L71
 711 033a 04E0     		b	.L92
 712              	.L75:
 713              		.loc 1 1229 0
 714 033c 0D99     		ldr	r1, [sp, #52]
 715 033e 0B68     		ldr	r3, [r1]
 716 0340 032B     		cmp	r3, #3
 717 0342 52D9     		bls	.L78
 718 0344 2DE0     		b	.L79
 719              	.L92:
 720              		.loc 1 1235 0
 721 0346 0D9A     		ldr	r2, [sp, #52]
 722 0348 1368     		ldr	r3, [r2]
 723 034a 032B     		cmp	r3, #3
 724 034c 01D8     		bhi	.L80
 725 034e 1622     		mov	r2, #22
 726              	.LVL105:
 727 0350 00E0     		b	.L81
 728              	.LVL106:
 729              	.L80:
 730 0352 0022     		mov	r2, #0
 731              	.LVL107:
 732              	.L81:
 733              		.loc 1 1239 0
 734 0354 2968     		ldr	r1, [r5]
 735 0356 0B68     		ldr	r3, [r1]
 736 0358 202B     		cmp	r3, #32
 737 035a 48D1     		bne	.L82
 738              	.LVL108:
 739 035c 8B68     		ldr	r3, [r1, #8]
 740 035e 1B7C     		ldrb	r3, [r3, #16]
 741 0360 9907     		lsl	r1, r3, #30
 742 0362 44D4     		bmi	.L82
 743 0364 17E0     		b	.L83
 744              	.LVL109:
 745              	.L72:
 746              		.loc 1 1256 0
 747 0366 731E     		sub	r3, r6, #1
 748 0368 012B     		cmp	r3, #1
 749 036a 13D8     		bhi	.L71
 750              		.loc 1 1262 0
 751 036c 0D9A     		ldr	r2, [sp, #52]
 752 036e 1368     		ldr	r3, [r2]
 753 0370 032B     		cmp	r3, #3
 754 0372 3AD9     		bls	.L78
 755 0374 15E0     		b	.L79
 756              	.L73:
 757              		.loc 1 1289 0
 758 0376 0D99     		ldr	r1, [sp, #52]
 759 0378 0B68     		ldr	r3, [r1]
 760 037a 032B     		cmp	r3, #3
 761 037c 35D9     		bls	.L78
 762              		.loc 1 1295 0
 763 037e 0368     		ldr	r3, [r0]
 764 0380 1B68     		ldr	r3, [r3]
 765 0382 102B     		cmp	r3, #16
 766 0384 2AD1     		bne	.L85
 767              		.loc 1 1298 0
 768 0386 731E     		sub	r3, r6, #1
 769 0388 012B     		cmp	r3, #1
 770 038a 01D9     		bls	.L91
 771 038c 5C22     		mov	r2, #92
 772              	.LVL110:
 773 038e 04E0     		b	.L88
 774              	.LVL111:
 775              	.L91:
 776 0390 0022     		mov	r2, #0
 777              	.LVL112:
 778 0392 00E0     		b	.L83
 779              	.LVL113:
 780              	.L71:
 781 0394 5C22     		mov	r2, #92
 782              	.LVL114:
 783              	.L83:
 784              		.loc 1 1347 0
 785 0396 002A     		cmp	r2, #0
 786 0398 03D0     		beq	.L79
 787              	.L88:
 788              		.loc 1 1348 0
 789 039a 2A61     		str	r2, [r5, #16]
 790 039c 0120     		mov	r0, #1
 791              	.LVL115:
 792 039e 4042     		neg	r0, r0
 793 03a0 1DE0     		b	.L70
 794              	.LVL116:
 795              	.L79:
 796              		.loc 1 1353 0
 797 03a2 6C46     		mov	r4, sp
 798 03a4 0095     		str	r5, [sp]
 799              		.loc 1 1354 0
 800 03a6 0297     		str	r7, [sp, #8]
 801              		.loc 1 1355 0
 802 03a8 0396     		str	r6, [sp, #12]
 803              		.loc 1 1356 0
 804 03aa 4246     		mov	r2, r8
 805              	.LVL117:
 806 03ac 0492     		str	r2, [sp, #16]
 807              		.loc 1 1357 0
 808 03ae 0D9B     		ldr	r3, [sp, #52]
 809 03b0 0593     		str	r3, [sp, #20]
 810              		.loc 1 1358 0
 811 03b2 0023     		mov	r3, #0
 812 03b4 2376     		strb	r3, [r4, #24]
 813              		.loc 1 1359 0
 814 03b6 1148     		ldr	r0, .L93+8
 815              	.LVL118:
 816 03b8 6946     		mov	r1, sp
 817 03ba 0122     		mov	r2, #1
 818 03bc FFF7FEFF 		bl	tcpip_callback_with_block
 819              		.loc 1 1360 0
 820 03c0 2B68     		ldr	r3, [r5]
 821 03c2 1869     		ldr	r0, [r3, #16]
 822 03c4 0021     		mov	r1, #0
 823 03c6 FFF7FEFF 		bl	sys_arch_sem_wait
 824              		.loc 1 1362 0
 825 03ca 227E     		ldrb	r2, [r4, #24]
 826              	.LVL119:
 827              		.loc 1 1364 0
 828 03cc 1306     		lsl	r3, r2, #24
 829 03ce 1B16     		asr	r3, r3, #24
 830 03d0 2B61     		str	r3, [r5, #16]
 831              		.loc 1 1365 0
 832 03d2 002A     		cmp	r2, #0
 833 03d4 02D0     		beq	.L85
 834              	.LVL120:
 835              	.L67:
 836 03d6 0120     		mov	r0, #1
 837 03d8 4042     		neg	r0, r0
 838 03da 00E0     		b	.L70
 839              	.LVL121:
 840              	.L85:
 841 03dc 0020     		mov	r0, #0
 842              	.L70:
 843              		.loc 1 1366 0
 844 03de 07B0     		add	sp, sp, #28
 845              		@ sp needed for prologue
 846              	.LVL122:
 847              	.LVL123:
 848              	.LVL124:
 849              	.LVL125:
 850 03e0 04BC     		pop	{r2}
 851 03e2 9046     		mov	r8, r2
 852 03e4 F0BC     		pop	{r4, r5, r6, r7}
 853 03e6 02BC     		pop	{r1}
 854 03e8 0847     		bx	r1
 855              	.LVL126:
 856              	.L78:
 857              		.loc 1 1365 0
 858 03ea 1622     		mov	r2, #22
 859              	.LVL127:
 860 03ec D5E7     		b	.L88
 861              	.LVL128:
 862              	.L82:
 863 03ee 6122     		mov	r2, #97
 864              	.LVL129:
 865 03f0 D3E7     		b	.L88
 866              	.L94:
 867 03f2 C046     		.align	2
 868              	.L93:
 869 03f4 FF0F0000 		.word	4095
 870 03f8 06100000 		.word	4102
 871 03fc 00000000 		.word	lwip_getsockopt_internal
 872              	.LFE312:
 874              		.align	2
 875              		.code	16
 876              		.thumb_func
 878              	lwip_setsockopt_internal:
 879              	.LFB315:
 880              		.loc 1 1744 0
 881 0400 30B5     		push	{r4, r5, lr}
 882              	.LCFI10:
 883              	.LVL130:
 884              		.loc 1 1756 0
 885 0402 0568     		ldr	r5, [r0]
 886              	.LVL131:
 887              		.loc 1 1761 0
 888 0404 C168     		ldr	r1, [r0, #12]
 889              	.LVL132:
 890              		.loc 1 1762 0
 891 0406 0469     		ldr	r4, [r0, #16]
 892              	.LVL133:
 893              		.loc 1 1764 0
 894 0408 8268     		ldr	r2, [r0, #8]
 895 040a 062A     		cmp	r2, #6
 896 040c 45D0     		beq	.L98
 897 040e 354B     		ldr	r3, .L114
 898 0410 9A42     		cmp	r2, r3
 899 0412 02D0     		beq	.L99
 900 0414 002A     		cmp	r2, #0
 901 0416 32D0     		beq	.L97
 902 0418 5CE0     		b	.L96
 903              	.L99:
 904              		.loc 1 1768 0
 905 041a 2029     		cmp	r1, #32
 906 041c 0BD0     		beq	.L100
 907 041e 2029     		cmp	r1, #32
 908 0420 02DC     		bgt	.L103
 909 0422 0829     		cmp	r1, #8
 910 0424 56D1     		bne	.L96
 911 0426 06E0     		b	.L100
 912              	.L103:
 913 0428 2F4B     		ldr	r3, .L114+4
 914 042a 9942     		cmp	r1, r3
 915 042c 12D0     		beq	.L101
 916 042e 0433     		add	r3, r3, #4
 917 0430 9942     		cmp	r1, r3
 918 0432 4FD1     		bne	.L96
 919 0434 12E0     		b	.L112
 920              	.L100:
 921              		.loc 1 1781 0
 922 0436 2368     		ldr	r3, [r4]
 923 0438 002B     		cmp	r3, #0
 924 043a 05D0     		beq	.L104
 925              		.loc 1 1782 0
 926 043c 2B68     		ldr	r3, [r5]
 927 043e 9A68     		ldr	r2, [r3, #8]
 928 0440 1389     		ldrh	r3, [r2, #8]
 929 0442 0B43     		orr	r3, r3, r1
 930 0444 1381     		strh	r3, [r2, #8]
 931 0446 45E0     		b	.L96
 932              	.L104:
 933              		.loc 1 1784 0
 934 0448 2B68     		ldr	r3, [r5]
 935 044a 9A68     		ldr	r2, [r3, #8]
 936 044c 1389     		ldrh	r3, [r2, #8]
 937 044e 8B43     		bic	r3, r3, r1
 938 0450 1381     		strh	r3, [r2, #8]
 939 0452 3FE0     		b	.L96
 940              	.L101:
 941              		.loc 1 1791 0
 942 0454 2A68     		ldr	r2, [r5]
 943 0456 2368     		ldr	r3, [r4]
 944 0458 1362     		str	r3, [r2, #32]
 945 045a 3BE0     		b	.L96
 946              	.L112:
 947              		.loc 1 1801 0
 948 045c 2368     		ldr	r3, [r4]
 949 045e 002B     		cmp	r3, #0
 950 0460 06D0     		beq	.L105
 951              		.loc 1 1802 0
 952 0462 2B68     		ldr	r3, [r5]
 953 0464 9968     		ldr	r1, [r3, #8]
 954              	.LVL134:
 955 0466 0B7C     		ldrb	r3, [r1, #16]
 956 0468 0122     		mov	r2, #1
 957 046a 1343     		orr	r3, r3, r2
 958 046c 0B74     		strb	r3, [r1, #16]
 959 046e 31E0     		b	.L96
 960              	.LVL135:
 961              	.L105:
 962              		.loc 1 1804 0
 963 0470 2B68     		ldr	r3, [r5]
 964 0472 9968     		ldr	r1, [r3, #8]
 965              	.LVL136:
 966 0474 0B7C     		ldrb	r3, [r1, #16]
 967 0476 0122     		mov	r2, #1
 968 0478 9343     		bic	r3, r3, r2
 969 047a 0B74     		strb	r3, [r1, #16]
 970 047c 2AE0     		b	.L96
 971              	.LVL137:
 972              	.L97:
 973              		.loc 1 1813 0
 974 047e 0129     		cmp	r1, #1
 975 0480 06D0     		beq	.L106
 976 0482 0229     		cmp	r1, #2
 977 0484 26D1     		bne	.L96
 978              		.loc 1 1815 0
 979 0486 2B68     		ldr	r3, [r5]
 980 0488 9A68     		ldr	r2, [r3, #8]
 981 048a 2368     		ldr	r3, [r4]
 982 048c D372     		strb	r3, [r2, #11]
 983 048e 21E0     		b	.L96
 984              	.L106:
 985              		.loc 1 1820 0
 986 0490 2B68     		ldr	r3, [r5]
 987 0492 9A68     		ldr	r2, [r3, #8]
 988 0494 2368     		ldr	r3, [r4]
 989 0496 9372     		strb	r3, [r2, #10]
 990 0498 1CE0     		b	.L96
 991              	.L98:
 992              		.loc 1 1853 0
 993 049a 0129     		cmp	r1, #1
 994 049c 02D0     		beq	.L108
 995 049e 0229     		cmp	r1, #2
 996 04a0 18D1     		bne	.L96
 997 04a2 12E0     		b	.L113
 998              	.L108:
 999              		.loc 1 1855 0
 1000 04a4 2368     		ldr	r3, [r4]
 1001 04a6 002B     		cmp	r3, #0
 1002 04a8 07D0     		beq	.L110
 1003              		.loc 1 1856 0
 1004 04aa 2B68     		ldr	r3, [r5]
 1005 04ac 9868     		ldr	r0, [r3, #8]
 1006              	.LVL138:
 1007 04ae 2621     		mov	r1, #38
 1008              	.LVL139:
 1009 04b0 435C     		ldrb	r3, [r0, r1]
 1010 04b2 4022     		mov	r2, #64
 1011 04b4 1343     		orr	r3, r3, r2
 1012 04b6 4354     		strb	r3, [r0, r1]
 1013 04b8 0CE0     		b	.L96
 1014              	.LVL140:
 1015              	.L110:
 1016              		.loc 1 1858 0
 1017 04ba 2B68     		ldr	r3, [r5]
 1018 04bc 9868     		ldr	r0, [r3, #8]
 1019              	.LVL141:
 1020 04be 2621     		mov	r1, #38
 1021              	.LVL142:
 1022 04c0 435C     		ldrb	r3, [r0, r1]
 1023 04c2 4022     		mov	r2, #64
 1024 04c4 9343     		bic	r3, r3, r2
 1025 04c6 4354     		strb	r3, [r0, r1]
 1026 04c8 04E0     		b	.L96
 1027              	.LVL143:
 1028              	.L113:
 1029              		.loc 1 1864 0
 1030 04ca 2B68     		ldr	r3, [r5]
 1031 04cc 9968     		ldr	r1, [r3, #8]
 1032              	.LVL144:
 1033 04ce 2268     		ldr	r2, [r4]
 1034 04d0 9C23     		mov	r3, #156
 1035 04d2 CA50     		str	r2, [r1, r3]
 1036              	.LVL145:
 1037              	.L96:
 1038              		.loc 1 1918 0
 1039 04d4 2B68     		ldr	r3, [r5]
 1040 04d6 1869     		ldr	r0, [r3, #16]
 1041              	.LVL146:
 1042 04d8 FFF7FEFF 		bl	sys_sem_signal
 1043              	.LVL147:
 1044              		.loc 1 1919 0
 1045              		@ sp needed for prologue
 1046              	.LVL148:
 1047              	.LVL149:
 1048 04dc 30BC     		pop	{r4, r5}
 1049 04de 01BC     		pop	{r0}
 1050 04e0 0047     		bx	r0
 1051              	.L115:
 1052 04e2 C046     		.align	2
 1053              	.L114:
 1054 04e4 FF0F0000 		.word	4095
 1055 04e8 06100000 		.word	4102
 1056              	.LFE315:
 1058              		.align	2
 1059              		.code	16
 1060              		.thumb_func
 1062              	lwip_getsockopt_internal:
 1063              	.LFB313:
 1064              		.loc 1 1370 0
 1065 04ec 30B5     		push	{r4, r5, lr}
 1066              	.LCFI11:
 1067              	.LVL150:
 1068              		.loc 1 1382 0
 1069 04ee 0468     		ldr	r4, [r0]
 1070              	.LVL151:
 1071              		.loc 1 1387 0
 1072 04f0 C168     		ldr	r1, [r0, #12]
 1073              	.LVL152:
 1074              		.loc 1 1388 0
 1075 04f2 0569     		ldr	r5, [r0, #16]
 1076              	.LVL153:
 1077              		.loc 1 1390 0
 1078 04f4 8268     		ldr	r2, [r0, #8]
 1079 04f6 062A     		cmp	r2, #6
 1080 04f8 64D0     		beq	.L119
 1081 04fa 3F4B     		ldr	r3, .L143
 1082 04fc 9A42     		cmp	r2, r3
 1083 04fe 02D0     		beq	.L120
 1084 0500 002A     		cmp	r2, #0
 1085 0502 51D0     		beq	.L118
 1086 0504 70E0     		b	.L117
 1087              	.L120:
 1088              		.loc 1 1394 0
 1089 0506 3D4B     		ldr	r3, .L143+4
 1090 0508 9942     		cmp	r1, r3
 1091 050a 42D0     		beq	.L122
 1092 050c 9942     		cmp	r1, r3
 1093 050e 06DC     		bgt	.L126
 1094 0510 0829     		cmp	r1, #8
 1095 0512 0DD0     		beq	.L121
 1096 0514 2029     		cmp	r1, #32
 1097 0516 0BD0     		beq	.L121
 1098 0518 0229     		cmp	r1, #2
 1099 051a 65D1     		bne	.L117
 1100 051c 08E0     		b	.L121
 1101              	.L126:
 1102 051e 384B     		ldr	r3, .L143+8
 1103 0520 9942     		cmp	r1, r3
 1104 0522 0BD0     		beq	.L124
 1105 0524 9942     		cmp	r1, r3
 1106 0526 1FDB     		blt	.L123
 1107 0528 0233     		add	r3, r3, #2
 1108 052a 9942     		cmp	r1, r3
 1109 052c 5CD1     		bne	.L117
 1110 052e 34E0     		b	.L140
 1111              	.L121:
 1112              		.loc 1 1408 0
 1113 0530 2368     		ldr	r3, [r4]
 1114 0532 9B68     		ldr	r3, [r3, #8]
 1115 0534 1B89     		ldrh	r3, [r3, #8]
 1116 0536 0B40     		and	r3, r3, r1
 1117 0538 2B60     		str	r3, [r5]
 1118 053a 55E0     		b	.L117
 1119              	.L124:
 1120              		.loc 1 1414 0
 1121 053c 2368     		ldr	r3, [r4]
 1122 053e 1A68     		ldr	r2, [r3]
 1123 0540 F023     		mov	r3, #240
 1124 0542 1340     		and	r3, r3, r2
 1125 0544 202B     		cmp	r3, #32
 1126 0546 0AD0     		beq	.L129
 1127 0548 402B     		cmp	r3, #64
 1128 054a 02D0     		beq	.L130
 1129 054c 102B     		cmp	r3, #16
 1130 054e 09D1     		bne	.L139
 1131 0550 02E0     		b	.L141
 1132              	.L130:
 1133              		.loc 1 1416 0
 1134 0552 0323     		mov	r3, #3
 1135 0554 2B60     		str	r3, [r5]
 1136 0556 47E0     		b	.L117
 1137              	.L141:
 1138              		.loc 1 1419 0
 1139 0558 0123     		mov	r3, #1
 1140 055a 2B60     		str	r3, [r5]
 1141 055c 44E0     		b	.L117
 1142              	.L129:
 1143              		.loc 1 1422 0
 1144 055e 0223     		mov	r3, #2
 1145 0560 2B60     		str	r3, [r5]
 1146 0562 41E0     		b	.L117
 1147              	.L139:
 1148              		.loc 1 1425 0
 1149 0564 2A60     		str	r2, [r5]
 1150 0566 3FE0     		b	.L117
 1151              	.L123:
 1152              		.loc 1 1435 0
 1153 0568 2369     		ldr	r3, [r4, #16]
 1154 056a 002B     		cmp	r3, #0
 1155 056c 0CD1     		bne	.L131
 1156              		.loc 1 1436 0
 1157 056e 2368     		ldr	r3, [r4]
 1158 0570 1B7B     		ldrb	r3, [r3, #12]
 1159 0572 1B06     		lsl	r3, r3, #24
 1160 0574 1B16     		asr	r3, r3, #24
 1161 0576 5B42     		neg	r3, r3
 1162 0578 0E2B     		cmp	r3, #14
 1163 057a 01D9     		bls	.L132
 1164 057c 0523     		mov	r3, #5
 1165 057e 02E0     		b	.L133
 1166              	.L132:
 1167 0580 204A     		ldr	r2, .L143+12
 1168 0582 9B00     		lsl	r3, r3, #2
 1169 0584 9B58     		ldr	r3, [r3, r2]
 1170              	.L133:
 1171 0586 2361     		str	r3, [r4, #16]
 1172              	.L131:
 1173              		.loc 1 1438 0
 1174 0588 2369     		ldr	r3, [r4, #16]
 1175 058a 2B60     		str	r3, [r5]
 1176              		.loc 1 1439 0
 1177 058c 0023     		mov	r3, #0
 1178 058e 2361     		str	r3, [r4, #16]
 1179 0590 2AE0     		b	.L117
 1180              	.L122:
 1181              		.loc 1 1446 0
 1182 0592 2368     		ldr	r3, [r4]
 1183 0594 1B6A     		ldr	r3, [r3, #32]
 1184 0596 2B60     		str	r3, [r5]
 1185 0598 26E0     		b	.L117
 1186              	.L140:
 1187              		.loc 1 1456 0
 1188 059a 2368     		ldr	r3, [r4]
 1189 059c 9B68     		ldr	r3, [r3, #8]
 1190 059e 1B7C     		ldrb	r3, [r3, #16]
 1191 05a0 0122     		mov	r2, #1
 1192 05a2 1340     		and	r3, r3, r2
 1193 05a4 2B60     		str	r3, [r5]
 1194 05a6 1FE0     		b	.L117
 1195              	.L118:
 1196              		.loc 1 1464 0
 1197 05a8 0129     		cmp	r1, #1
 1198 05aa 06D0     		beq	.L134
 1199 05ac 0229     		cmp	r1, #2
 1200 05ae 1BD1     		bne	.L117
 1201              		.loc 1 1466 0
 1202 05b0 2368     		ldr	r3, [r4]
 1203 05b2 9B68     		ldr	r3, [r3, #8]
 1204 05b4 DB7A     		ldrb	r3, [r3, #11]
 1205 05b6 2B60     		str	r3, [r5]
 1206 05b8 16E0     		b	.L117
 1207              	.L134:
 1208              		.loc 1 1471 0
 1209 05ba 2368     		ldr	r3, [r4]
 1210 05bc 9B68     		ldr	r3, [r3, #8]
 1211 05be 9B7A     		ldrb	r3, [r3, #10]
 1212 05c0 2B60     		str	r3, [r5]
 1213 05c2 11E0     		b	.L117
 1214              	.L119:
 1215              		.loc 1 1493 0
 1216 05c4 0129     		cmp	r1, #1
 1217 05c6 02D0     		beq	.L136
 1218 05c8 0229     		cmp	r1, #2
 1219 05ca 0DD1     		bne	.L117
 1220 05cc 07E0     		b	.L142
 1221              	.L136:
 1222              		.loc 1 1495 0
 1223 05ce 2368     		ldr	r3, [r4]
 1224 05d0 9A68     		ldr	r2, [r3, #8]
 1225 05d2 2623     		mov	r3, #38
 1226 05d4 D35C     		ldrb	r3, [r2, r3]
 1227 05d6 5B06     		lsl	r3, r3, #25
 1228 05d8 DB0F     		lsr	r3, r3, #31
 1229 05da 2B60     		str	r3, [r5]
 1230 05dc 04E0     		b	.L117
 1231              	.L142:
 1232              		.loc 1 1500 0
 1233 05de 2368     		ldr	r3, [r4]
 1234 05e0 9A68     		ldr	r2, [r3, #8]
 1235 05e2 9C23     		mov	r3, #156
 1236 05e4 D358     		ldr	r3, [r2, r3]
 1237 05e6 2B60     		str	r3, [r5]
 1238              	.L117:
 1239              		.loc 1 1544 0
 1240 05e8 2368     		ldr	r3, [r4]
 1241 05ea 1869     		ldr	r0, [r3, #16]
 1242              	.LVL154:
 1243 05ec FFF7FEFF 		bl	sys_sem_signal
 1244              	.LVL155:
 1245              		.loc 1 1545 0
 1246              		@ sp needed for prologue
 1247              	.LVL156:
 1248              	.LVL157:
 1249 05f0 30BC     		pop	{r4, r5}
 1250 05f2 01BC     		pop	{r0}
 1251 05f4 0047     		bx	r0
 1252              	.L144:
 1253 05f6 C046     		.align	2
 1254              	.L143:
 1255 05f8 FF0F0000 		.word	4095
 1256 05fc 06100000 		.word	4102
 1257 0600 08100000 		.word	4104
 1258 0604 00000000 		.word	err_to_errno_table
 1259              	.LFE313:
 1261              		.align	2
 1262              		.code	16
 1263              		.thumb_func
 1265              	lwip_getaddrname:
 1266              	.LFB309:
 1267              		.loc 1 1140 0
 1268 0608 F0B5     		push	{r4, r5, r6, r7, lr}
 1269              	.LCFI12:
 1270 060a 4746     		mov	r7, r8
 1271 060c 80B4     		push	{r7}
 1272              	.LCFI13:
 1273              	.LVL158:
 1274 060e 85B0     		sub	sp, sp, #20
 1275              	.LCFI14:
 1276 0610 8846     		mov	r8, r1
 1277 0612 161C     		mov	r6, r2
 1278 0614 1B06     		lsl	r3, r3, #24
 1279              	.LVL159:
 1280 0616 1F0E     		lsr	r7, r3, #24
 1281              	.LVL160:
 1282              		.loc 1 1145 0
 1283 0618 FFF7F2FC 		bl	get_socket
 1284              	.LVL161:
 1285 061c 051C     		mov	r5, r0
 1286              	.LVL162:
 1287              		.loc 1 1146 0
 1288 061e 0028     		cmp	r0, #0
 1289 0620 02D1     		bne	.L146
 1290              	.LVL163:
 1291 0622 0120     		mov	r0, #1
 1292              	.LVL164:
 1293 0624 4042     		neg	r0, r0
 1294 0626 25E0     		b	.L147
 1295              	.LVL165:
 1296              	.L146:
 1297              		.loc 1 1149 0
 1298 0628 01AC     		add	r4, sp, #4
 1299 062a 0023     		mov	r3, #0
 1300 062c 2360     		str	r3, [r4]
 1301 062e 02AA     		add	r2, sp, #8
 1302 0630 1360     		str	r3, [r2]
 1303 0632 03AA     		add	r2, sp, #12
 1304 0634 1360     		str	r3, [r2]
 1305 0636 04AA     		add	r2, sp, #16
 1306 0638 1360     		str	r3, [r2]
 1307              		.loc 1 1150 0
 1308 063a 1023     		mov	r3, #16
 1309 063c 2370     		strb	r3, [r4]
 1310              		.loc 1 1151 0
 1311 063e 0223     		mov	r3, #2
 1312 0640 6370     		strb	r3, [r4, #1]
 1313              		.loc 1 1154 0
 1314 0642 0068     		ldr	r0, [r0]
 1315              	.LVL166:
 1316 0644 6946     		mov	r1, sp
 1317 0646 0A3A     		sub	r2, r2, #10
 1318 0648 3B1C     		mov	r3, r7
 1319 064a FFF7FEFF 		bl	netconn_getaddr
 1320              		.loc 1 1160 0
 1321 064e 6088     		ldrh	r0, [r4, #2]
 1322 0650 FFF7FEFF 		bl	htons
 1323 0654 6080     		strh	r0, [r4, #2]
 1324              		.loc 1 1161 0
 1325 0656 009B     		ldr	r3, [sp]
 1326 0658 6360     		str	r3, [r4, #4]
 1327              		.loc 1 1163 0
 1328 065a 3368     		ldr	r3, [r6]
 1329 065c 102B     		cmp	r3, #16
 1330 065e 01D9     		bls	.L148
 1331              		.loc 1 1164 0
 1332 0660 1023     		mov	r3, #16
 1333 0662 3360     		str	r3, [r6]
 1334              	.L148:
 1335              		.loc 1 1166 0
 1336 0664 3268     		ldr	r2, [r6]
 1337 0666 4046     		mov	r0, r8
 1338 0668 01A9     		add	r1, sp, #4
 1339 066a FFF7FEFF 		bl	memcpy
 1340              		.loc 1 1167 0
 1341 066e 0023     		mov	r3, #0
 1342 0670 2B61     		str	r3, [r5, #16]
 1343 0672 0020     		mov	r0, #0
 1344              	.L147:
 1345              		.loc 1 1169 0
 1346 0674 05B0     		add	sp, sp, #20
 1347              		@ sp needed for prologue
 1348              	.LVL167:
 1349              	.LVL168:
 1350              	.LVL169:
 1351              	.LVL170:
 1352 0676 04BC     		pop	{r2}
 1353 0678 9046     		mov	r8, r2
 1354 067a F0BC     		pop	{r4, r5, r6, r7}
 1355 067c 02BC     		pop	{r1}
 1356 067e 0847     		bx	r1
 1357              	.LFE309:
 1359              		.align	2
 1360              		.global	lwip_getsockname
 1361              		.code	16
 1362              		.thumb_func
 1364              	lwip_getsockname:
 1365              	.LFB311:
 1366              		.loc 1 1179 0
 1367 0680 00B5     		push	{lr}
 1368              	.LCFI15:
 1369              	.LVL171:
 1370              		.loc 1 1180 0
 1371 0682 0123     		mov	r3, #1
 1372 0684 FFF7C0FF 		bl	lwip_getaddrname
 1373              	.LVL172:
 1374              		.loc 1 1181 0
 1375              		@ sp needed for prologue
 1376 0688 02BC     		pop	{r1}
 1377 068a 0847     		bx	r1
 1378              	.LFE311:
 1380              		.align	2
 1381              		.global	lwip_getpeername
 1382              		.code	16
 1383              		.thumb_func
 1385              	lwip_getpeername:
 1386              	.LFB310:
 1387              		.loc 1 1173 0
 1388 068c 00B5     		push	{lr}
 1389              	.LCFI16:
 1390              	.LVL173:
 1391              		.loc 1 1174 0
 1392 068e 0023     		mov	r3, #0
 1393 0690 FFF7BAFF 		bl	lwip_getaddrname
 1394              	.LVL174:
 1395              		.loc 1 1175 0
 1396              		@ sp needed for prologue
 1397 0694 02BC     		pop	{r1}
 1398 0696 0847     		bx	r1
 1399              	.LFE310:
 1401              		.align	2
 1402              		.code	16
 1403              		.thumb_func
 1405              	alloc_socket:
 1406              	.LFB292:
 1407              		.loc 1 217 0
 1408 0698 30B5     		push	{r4, r5, lr}
 1409              	.LCFI17:
 1410              	.LVL175:
 1411 069a 051C     		mov	r5, r0
 1412              		.loc 1 221 0
 1413 069c 184B     		ldr	r3, .L160
 1414 069e 1868     		ldr	r0, [r3]
 1415              	.LVL176:
 1416 06a0 FFF7FEFF 		bl	sys_sem_wait
 1417 06a4 174A     		ldr	r2, .L160+4
 1418 06a6 0024     		mov	r4, #0
 1419              	.LVL177:
 1420              	.L157:
 1421              		.loc 1 225 0
 1422 06a8 1368     		ldr	r3, [r2]
 1423 06aa 002B     		cmp	r3, #0
 1424 06ac 19D1     		bne	.L155
 1425              		.loc 1 226 0
 1426 06ae 154A     		ldr	r2, .L160+4
 1427 06b0 A300     		lsl	r3, r4, #2
 1428 06b2 1B19     		add	r3, r3, r4
 1429 06b4 9800     		lsl	r0, r3, #2
 1430 06b6 8550     		str	r5, [r0, r2]
 1431              		.loc 1 227 0
 1432 06b8 0133     		add	r3, r3, #1
 1433 06ba 9B00     		lsl	r3, r3, #2
 1434 06bc 0021     		mov	r1, #0
 1435 06be 9950     		str	r1, [r3, r2]
 1436              		.loc 1 228 0
 1437 06c0 1218     		add	r2, r2, r0
 1438 06c2 131C     		mov	r3, r2
 1439 06c4 0833     		add	r3, r3, #8
 1440 06c6 1980     		strh	r1, [r3]
 1441              		.loc 1 229 0
 1442 06c8 5980     		strh	r1, [r3, #2]
 1443              		.loc 1 230 0
 1444 06ca 101C     		mov	r0, r2
 1445 06cc 0C30     		add	r0, r0, #12
 1446 06ce 0123     		mov	r3, #1
 1447 06d0 0380     		strh	r3, [r0]
 1448              		.loc 1 231 0
 1449 06d2 4180     		strh	r1, [r0, #2]
 1450              		.loc 1 232 0
 1451 06d4 1032     		add	r2, r2, #16
 1452 06d6 1160     		str	r1, [r2]
 1453              		.loc 1 233 0
 1454 06d8 094B     		ldr	r3, .L160
 1455 06da 1868     		ldr	r0, [r3]
 1456 06dc FFF7FEFF 		bl	sys_sem_signal
 1457 06e0 09E0     		b	.L156
 1458              	.L155:
 1459              		.loc 1 224 0
 1460 06e2 0134     		add	r4, r4, #1
 1461 06e4 1432     		add	r2, r2, #20
 1462 06e6 042C     		cmp	r4, #4
 1463 06e8 DED1     		bne	.L157
 1464              		.loc 1 237 0
 1465 06ea 054B     		ldr	r3, .L160
 1466 06ec 1868     		ldr	r0, [r3]
 1467 06ee FFF7FEFF 		bl	sys_sem_signal
 1468 06f2 0124     		mov	r4, #1
 1469 06f4 6442     		neg	r4, r4
 1470              	.L156:
 1471              		.loc 1 239 0
 1472 06f6 201C     		mov	r0, r4
 1473              		@ sp needed for prologue
 1474              	.LVL178:
 1475              	.LVL179:
 1476 06f8 30BC     		pop	{r4, r5}
 1477 06fa 02BC     		pop	{r1}
 1478 06fc 0847     		bx	r1
 1479              	.L161:
 1480 06fe C046     		.align	2
 1481              	.L160:
 1482 0700 54000000 		.word	socksem
 1483 0704 00000000 		.word	sockets
 1484              	.LFE292:
 1486              		.align	2
 1487              		.code	16
 1488              		.thumb_func
 1490              	event_callback:
 1491              	.LFB307:
 1492              		.loc 1 1038 0
 1493 0708 F0B5     		push	{r4, r5, r6, r7, lr}
 1494              	.LCFI18:
 1495 070a 5746     		mov	r7, sl
 1496 070c 4E46     		mov	r6, r9
 1497 070e 4546     		mov	r5, r8
 1498 0710 E0B4     		push	{r5, r6, r7}
 1499              	.LCFI19:
 1500              	.LVL180:
 1501 0712 041C     		mov	r4, r0
 1502 0714 0F1C     		mov	r7, r1
 1503              		.loc 1 1046 0
 1504 0716 0028     		cmp	r0, #0
 1505 0718 77D0     		beq	.L178
 1506              	.LVL181:
 1507              		.loc 1 1047 0
 1508 071a C569     		ldr	r5, [r0, #28]
 1509              	.LVL182:
 1510              		.loc 1 1048 0
 1511 071c 002D     		cmp	r5, #0
 1512 071e 13DA     		bge	.L164
 1513              		.loc 1 1054 0
 1514 0720 3D4B     		ldr	r3, .L182
 1515 0722 1868     		ldr	r0, [r3]
 1516              	.LVL183:
 1517 0724 FFF7FEFF 		bl	sys_sem_wait
 1518              	.LVL184:
 1519              		.loc 1 1055 0
 1520 0728 E569     		ldr	r5, [r4, #28]
 1521 072a 002D     		cmp	r5, #0
 1522 072c 08DA     		bge	.L165
 1523              		.loc 1 1056 0
 1524 072e 002F     		cmp	r7, #0
 1525 0730 01D1     		bne	.L166
 1526              		.loc 1 1057 0
 1527 0732 6B1E     		sub	r3, r5, #1
 1528 0734 E361     		str	r3, [r4, #28]
 1529              	.L166:
 1530              		.loc 1 1059 0
 1531 0736 384B     		ldr	r3, .L182
 1532 0738 1868     		ldr	r0, [r3]
 1533 073a FFF7FEFF 		bl	sys_sem_signal
 1534 073e 64E0     		b	.L178
 1535              	.L165:
 1536              		.loc 1 1063 0
 1537 0740 354B     		ldr	r3, .L182
 1538 0742 1868     		ldr	r0, [r3]
 1539 0744 FFF7FEFF 		bl	sys_sem_signal
 1540              	.LVL185:
 1541              	.L164:
 1542              		.loc 1 1066 0
 1543 0748 281C     		mov	r0, r5
 1544 074a FFF759FC 		bl	get_socket
 1545              	.LVL186:
 1546 074e 061C     		mov	r6, r0
 1547              	.LVL187:
 1548              		.loc 1 1067 0
 1549 0750 0028     		cmp	r0, #0
 1550 0752 5AD0     		beq	.L178
 1551              	.LVL188:
 1552              		.loc 1 1074 0
 1553 0754 314B     		ldr	r3, .L182+4
 1554 0756 1868     		ldr	r0, [r3]
 1555              	.LVL189:
 1556 0758 FFF7FEFF 		bl	sys_sem_wait
 1557              		.loc 1 1076 0
 1558 075c 012F     		cmp	r7, #1
 1559 075e 0AD0     		beq	.L169
 1560 0760 002F     		cmp	r7, #0
 1561 0762 04D0     		beq	.L168
 1562 0764 022F     		cmp	r7, #2
 1563 0766 0AD0     		beq	.L170
 1564 0768 032F     		cmp	r7, #3
 1565 076a 0DD1     		bne	.L167
 1566 076c 0AE0     		b	.L181
 1567              	.L168:
 1568              		.loc 1 1078 0
 1569 076e 7389     		ldrh	r3, [r6, #10]
 1570 0770 0133     		add	r3, r3, #1
 1571 0772 7381     		strh	r3, [r6, #10]
 1572 0774 08E0     		b	.L167
 1573              	.L169:
 1574              		.loc 1 1081 0
 1575 0776 7389     		ldrh	r3, [r6, #10]
 1576 0778 013B     		sub	r3, r3, #1
 1577 077a 7381     		strh	r3, [r6, #10]
 1578 077c 04E0     		b	.L167
 1579              	.L170:
 1580              		.loc 1 1084 0
 1581 077e 0123     		mov	r3, #1
 1582 0780 B381     		strh	r3, [r6, #12]
 1583 0782 01E0     		b	.L167
 1584              	.L181:
 1585              		.loc 1 1087 0
 1586 0784 0023     		mov	r3, #0
 1587 0786 B381     		strh	r3, [r6, #12]
 1588              	.L167:
 1589              		.loc 1 1093 0
 1590 0788 244B     		ldr	r3, .L182+4
 1591 078a 1868     		ldr	r0, [r3]
 1592 078c FFF7FEFF 		bl	sys_sem_signal
 1593              		.loc 1 1107 0
 1594 0790 6909     		lsr	r1, r5, #5
 1595 0792 1F23     		mov	r3, #31
 1596 0794 2A1C     		mov	r2, r5
 1597 0796 1A40     		and	r2, r2, r3
 1598 0798 0123     		mov	r3, #1
 1599 079a 1D1C     		mov	r5, r3
 1600              	.LVL190:
 1601 079c 9540     		lsl	r5, r5, r2
 1602              		.loc 1 1103 0
 1603 079e 1F4F     		ldr	r7, .L182+4
 1604              	.LVL191:
 1605              		.loc 1 1104 0
 1606 07a0 1F4B     		ldr	r3, .L182+8
 1607 07a2 9846     		mov	r8, r3
 1608              		.loc 1 1110 0
 1609 07a4 8C00     		lsl	r4, r1, #2
 1610              	.LVL192:
 1611              		.loc 1 1116 0
 1612 07a6 0121     		mov	r1, #1
 1613 07a8 8946     		mov	r9, r1
 1614              		.loc 1 1118 0
 1615 07aa BA46     		mov	sl, r7
 1616              	.L177:
 1617              		.loc 1 1103 0
 1618 07ac 3868     		ldr	r0, [r7]
 1619 07ae FFF7FEFF 		bl	sys_sem_wait
 1620              		.loc 1 1104 0
 1621 07b2 4346     		mov	r3, r8
 1622 07b4 1A68     		ldr	r2, [r3]
 1623              	.LVL193:
 1624 07b6 002A     		cmp	r2, #0
 1625 07b8 23D0     		beq	.L172
 1626              	.L179:
 1627              		.loc 1 1105 0
 1628 07ba 1369     		ldr	r3, [r2, #16]
 1629 07bc 002B     		cmp	r3, #0
 1630 07be 12D1     		bne	.L173
 1631              		.loc 1 1107 0
 1632 07c0 5368     		ldr	r3, [r2, #4]
 1633 07c2 002B     		cmp	r3, #0
 1634 07c4 06D0     		beq	.L174
 1635 07c6 1B59     		ldr	r3, [r3, r4]
 1636 07c8 1D42     		tst	r5, r3
 1637 07ca 03D0     		beq	.L174
 1638              		.loc 1 1108 0
 1639 07cc 0A21     		mov	r1, #10
 1640 07ce 735E     		ldrsh	r3, [r6, r1]
 1641 07d0 002B     		cmp	r3, #0
 1642 07d2 0CDC     		bgt	.L175
 1643              	.L174:
 1644              		.loc 1 1110 0
 1645 07d4 9368     		ldr	r3, [r2, #8]
 1646 07d6 002B     		cmp	r3, #0
 1647 07d8 05D0     		beq	.L173
 1648 07da 1B59     		ldr	r3, [r3, r4]
 1649 07dc 1D42     		tst	r5, r3
 1650 07de 02D0     		beq	.L173
 1651              		.loc 1 1111 0
 1652 07e0 B389     		ldrh	r3, [r6, #12]
 1653 07e2 002B     		cmp	r3, #0
 1654 07e4 03D1     		bne	.L175
 1655              	.L173:
 1656              		.loc 1 1104 0
 1657 07e6 1268     		ldr	r2, [r2]
 1658 07e8 002A     		cmp	r2, #0
 1659 07ea E6D1     		bne	.L179
 1660 07ec 09E0     		b	.L172
 1661              	.L175:
 1662              		.loc 1 1116 0
 1663 07ee 4B46     		mov	r3, r9
 1664 07f0 1361     		str	r3, [r2, #16]
 1665              		.loc 1 1117 0
 1666 07f2 5069     		ldr	r0, [r2, #20]
 1667 07f4 FFF7FEFF 		bl	sys_sem_signal
 1668              	.LVL194:
 1669              		.loc 1 1118 0
 1670 07f8 5146     		mov	r1, sl
 1671 07fa 0868     		ldr	r0, [r1]
 1672 07fc FFF7FEFF 		bl	sys_sem_signal
 1673 0800 D4E7     		b	.L177
 1674              	.LVL195:
 1675              	.L172:
 1676              		.loc 1 1120 0
 1677 0802 064B     		ldr	r3, .L182+4
 1678 0804 1868     		ldr	r0, [r3]
 1679 0806 FFF7FEFF 		bl	sys_sem_signal
 1680              	.LVL196:
 1681              	.L178:
 1682              		.loc 1 1124 0
 1683              		@ sp needed for prologue
 1684              	.LVL197:
 1685              	.LVL198:
 1686              	.LVL199:
 1687              	.LVL200:
 1688 080a 1CBC     		pop	{r2, r3, r4}
 1689 080c 9046     		mov	r8, r2
 1690 080e 9946     		mov	r9, r3
 1691 0810 A246     		mov	sl, r4
 1692 0812 F0BC     		pop	{r4, r5, r6, r7}
 1693 0814 01BC     		pop	{r0}
 1694 0816 0047     		bx	r0
 1695              	.L183:
 1696              		.align	2
 1697              	.L182:
 1698 0818 54000000 		.word	socksem
 1699 081c 58000000 		.word	selectsem
 1700 0820 50000000 		.word	select_cb_list
 1701              	.LFE307:
 1703              		.align	2
 1704              		.global	lwip_socket_init
 1705              		.code	16
 1706              		.thumb_func
 1708              	lwip_socket_init:
 1709              	.LFB290:
 1710              		.loc 1 176 0
 1711 0824 00B5     		push	{lr}
 1712              	.LCFI20:
 1713              		.loc 1 177 0
 1714 0826 0120     		mov	r0, #1
 1715 0828 FFF7FEFF 		bl	sys_sem_new
 1716 082c 044B     		ldr	r3, .L186
 1717 082e 1860     		str	r0, [r3]
 1718              		.loc 1 178 0
 1719 0830 0120     		mov	r0, #1
 1720 0832 FFF7FEFF 		bl	sys_sem_new
 1721 0836 034B     		ldr	r3, .L186+4
 1722 0838 1860     		str	r0, [r3]
 1723              		.loc 1 179 0
 1724              		@ sp needed for prologue
 1725 083a 01BC     		pop	{r0}
 1726 083c 0047     		bx	r0
 1727              	.L187:
 1728 083e C046     		.align	2
 1729              	.L186:
 1730 0840 54000000 		.word	socksem
 1731 0844 58000000 		.word	selectsem
 1732              	.LFE290:
 1734              		.global	__divsi3
 1735              		.align	2
 1736              		.global	lwip_select
 1737              		.code	16
 1738              		.thumb_func
 1740              	lwip_select:
 1741              	.LFB306:
 1742              		.loc 1 889 0
 1743 0848 F0B5     		push	{r4, r5, r6, r7, lr}
 1744              	.LCFI21:
 1745 084a 5746     		mov	r7, sl
 1746 084c 4E46     		mov	r6, r9
 1747 084e 4546     		mov	r5, r8
 1748 0850 E0B4     		push	{r5, r6, r7}
 1749              	.LCFI22:
 1750              	.LVL201:
 1751 0852 8CB0     		sub	sp, sp, #48
 1752              	.LCFI23:
 1753 0854 8146     		mov	r9, r0
 1754 0856 0D1C     		mov	r5, r1
 1755 0858 161C     		mov	r6, r2
 1756 085a 1F1C     		mov	r7, r3
 1757 085c 149C     		ldr	r4, [sp, #80]
 1758              		.loc 1 902 0
 1759 085e 6B46     		mov	r3, sp
 1760              	.LVL202:
 1761 0860 0022     		mov	r2, #0
 1762              	.LVL203:
 1763 0862 0092     		str	r2, [sp]
 1764              		.loc 1 903 0
 1765 0864 5960     		str	r1, [r3, #4]
 1766              		.loc 1 904 0
 1767 0866 0296     		str	r6, [sp, #8]
 1768              		.loc 1 905 0
 1769 0868 0397     		str	r7, [sp, #12]
 1770              		.loc 1 906 0
 1771 086a 0492     		str	r2, [sp, #16]
 1772              		.loc 1 909 0
 1773 086c 9B4B     		ldr	r3, .L244
 1774 086e 1868     		ldr	r0, [r3]
 1775              	.LVL204:
 1776 0870 FFF7FEFF 		bl	sys_sem_wait
 1777              	.LVL205:
 1778              		.loc 1 911 0
 1779 0874 002D     		cmp	r5, #0
 1780 0876 04D0     		beq	.L189
 1781              	.LVL206:
 1782              		.loc 1 912 0
 1783 0878 2A68     		ldr	r2, [r5]
 1784 087a 6B68     		ldr	r3, [r5, #4]
 1785 087c 0B93     		str	r3, [sp, #44]
 1786 087e 0A92     		str	r2, [sp, #40]
 1787 0880 07E0     		b	.L190
 1788              	.L189:
 1789              	.LBB7:
 1790              		.loc 1 914 0
 1791 0882 0AAB     		add	r3, sp, #40
 1792              	.LVL207:
 1793 0884 1A1C     		mov	r2, r3
 1794 0886 0021     		mov	r1, #0
 1795 0888 0833     		add	r3, r3, #8
 1796              	.LVL208:
 1797              	.L191:
 1798 088a 1170     		strb	r1, [r2]
 1799 088c 0132     		add	r2, r2, #1
 1800 088e 9A42     		cmp	r2, r3
 1801 0890 FBD1     		bne	.L191
 1802              	.L190:
 1803              	.LBE7:
 1804              		.loc 1 915 0
 1805 0892 002E     		cmp	r6, #0
 1806 0894 04D0     		beq	.L192
 1807              		.loc 1 916 0
 1808 0896 3268     		ldr	r2, [r6]
 1809              	.LVL209:
 1810 0898 7368     		ldr	r3, [r6, #4]
 1811 089a 0993     		str	r3, [sp, #36]
 1812 089c 0892     		str	r2, [sp, #32]
 1813 089e 07E0     		b	.L193
 1814              	.LVL210:
 1815              	.L192:
 1816              	.LBB8:
 1817              		.loc 1 918 0
 1818 08a0 08AB     		add	r3, sp, #32
 1819              	.LVL211:
 1820 08a2 1A1C     		mov	r2, r3
 1821              	.LVL212:
 1822 08a4 0021     		mov	r1, #0
 1823 08a6 0833     		add	r3, r3, #8
 1824              	.LVL213:
 1825              	.L194:
 1826 08a8 1170     		strb	r1, [r2]
 1827 08aa 0132     		add	r2, r2, #1
 1828 08ac 9A42     		cmp	r2, r3
 1829 08ae FBD1     		bne	.L194
 1830              	.L193:
 1831              	.LBE8:
 1832              		.loc 1 919 0
 1833 08b0 002F     		cmp	r7, #0
 1834 08b2 04D0     		beq	.L195
 1835              		.loc 1 920 0
 1836 08b4 3A68     		ldr	r2, [r7]
 1837              	.LVL214:
 1838 08b6 7B68     		ldr	r3, [r7, #4]
 1839 08b8 0793     		str	r3, [sp, #28]
 1840 08ba 0692     		str	r2, [sp, #24]
 1841 08bc 07E0     		b	.L196
 1842              	.LVL215:
 1843              	.L195:
 1844              	.LBB9:
 1845              		.loc 1 922 0
 1846 08be 06AB     		add	r3, sp, #24
 1847              	.LVL216:
 1848 08c0 1A1C     		mov	r2, r3
 1849              	.LVL217:
 1850 08c2 0021     		mov	r1, #0
 1851 08c4 0833     		add	r3, r3, #8
 1852              	.LVL218:
 1853              	.L197:
 1854 08c6 1170     		strb	r1, [r2]
 1855 08c8 0132     		add	r2, r2, #1
 1856 08ca 9A42     		cmp	r2, r3
 1857 08cc FBD1     		bne	.L197
 1858              	.L196:
 1859              	.LBE9:
 1860              		.loc 1 926 0
 1861 08ce 4846     		mov	r0, r9
 1862 08d0 0AA9     		add	r1, sp, #40
 1863 08d2 08AA     		add	r2, sp, #32
 1864              	.LVL219:
 1865 08d4 06AB     		add	r3, sp, #24
 1866 08d6 FFF7A1FB 		bl	lwip_selscan
 1867 08da 8046     		mov	r8, r0
 1868              	.LVL220:
 1869              		.loc 1 929 0
 1870 08dc 0028     		cmp	r0, #0
 1871 08de 00D0     		beq	.LCB1857
 1872 08e0 BBE0     		b	.L198	@long jump
 1873              	.LCB1857:
 1874              		.loc 1 930 0
 1875 08e2 002C     		cmp	r4, #0
 1876 08e4 2BD0     		beq	.L199
 1877 08e6 2368     		ldr	r3, [r4]
 1878 08e8 002B     		cmp	r3, #0
 1879 08ea 00D0     		beq	.LCB1862
 1880 08ec D4E0     		b	.L200	@long jump
 1881              	.LCB1862:
 1882 08ee 6368     		ldr	r3, [r4, #4]
 1883 08f0 002B     		cmp	r3, #0
 1884 08f2 00D0     		beq	.LCB1865
 1885 08f4 D0E0     		b	.L200	@long jump
 1886              	.LCB1865:
 1887              		.loc 1 931 0
 1888 08f6 794B     		ldr	r3, .L244
 1889 08f8 1868     		ldr	r0, [r3]
 1890 08fa FFF7FEFF 		bl	sys_sem_signal
 1891              		.loc 1 932 0
 1892 08fe 002D     		cmp	r5, #0
 1893 0900 07D0     		beq	.L201
 1894              	.LBB10:
 1895              		.loc 1 933 0
 1896 0902 281C     		mov	r0, r5
 1897              	.LVL221:
 1898 0904 0024     		mov	r4, #0
 1899              	.LVL222:
 1900 0906 291C     		mov	r1, r5
 1901 0908 0831     		add	r1, r1, #8
 1902              	.L202:
 1903 090a 0470     		strb	r4, [r0]
 1904 090c 0130     		add	r0, r0, #1
 1905              	.LVL223:
 1906 090e 8842     		cmp	r0, r1
 1907 0910 FBD1     		bne	.L202
 1908              	.LVL224:
 1909              	.L201:
 1910              	.LBE10:
 1911              		.loc 1 934 0
 1912 0912 002E     		cmp	r6, #0
 1913 0914 07D0     		beq	.L203
 1914              	.LBB11:
 1915              		.loc 1 935 0
 1916 0916 311C     		mov	r1, r6
 1917              	.LVL225:
 1918 0918 0020     		mov	r0, #0
 1919              	.LVL226:
 1920 091a 321C     		mov	r2, r6
 1921 091c 0832     		add	r2, r2, #8
 1922              	.L204:
 1923 091e 0870     		strb	r0, [r1]
 1924 0920 0131     		add	r1, r1, #1
 1925              	.LVL227:
 1926 0922 9142     		cmp	r1, r2
 1927 0924 FBD1     		bne	.L204
 1928              	.LVL228:
 1929              	.L203:
 1930              	.LBE11:
 1931              		.loc 1 936 0
 1932 0926 002F     		cmp	r7, #0
 1933 0928 00D1     		bne	.LCB1908
 1934 092a ACE0     		b	.L205	@long jump
 1935              	.LCB1908:
 1936              	.LBB12:
 1937              		.loc 1 937 0
 1938 092c 391C     		mov	r1, r7
 1939              	.LVL229:
 1940 092e 0020     		mov	r0, #0
 1941              	.LVL230:
 1942 0930 3A1C     		mov	r2, r7
 1943 0932 0832     		add	r2, r2, #8
 1944              	.L206:
 1945 0934 0870     		strb	r0, [r1]
 1946 0936 0131     		add	r1, r1, #1
 1947              	.LVL231:
 1948 0938 9142     		cmp	r1, r2
 1949 093a FBD1     		bne	.L206
 1950 093c A3E0     		b	.L205
 1951              	.LVL232:
 1952              	.L199:
 1953              	.LBE12:
 1954              		.loc 1 950 0
 1955 093e 0020     		mov	r0, #0
 1956 0940 FFF7FEFF 		bl	sys_sem_new
 1957 0944 6A46     		mov	r2, sp
 1958 0946 0590     		str	r0, [sp, #20]
 1959              		.loc 1 953 0
 1960 0948 6549     		ldr	r1, .L244+4
 1961 094a 0B68     		ldr	r3, [r1]
 1962 094c 0093     		str	r3, [sp]
 1963              		.loc 1 954 0
 1964 094e 0A60     		str	r2, [r1]
 1965              		.loc 1 957 0
 1966 0950 624B     		ldr	r3, .L244
 1967 0952 1868     		ldr	r0, [r3]
 1968 0954 FFF7FEFF 		bl	sys_sem_signal
 1969 0958 0021     		mov	r1, #0
 1970              	.LVL233:
 1971              	.L230:
 1972              		.loc 1 969 0
 1973 095a 0598     		ldr	r0, [sp, #20]
 1974 095c FFF7FEFF 		bl	sys_sem_wait_timeout
 1975              	.LVL234:
 1976 0960 8246     		mov	sl, r0
 1977              	.LVL235:
 1978              		.loc 1 972 0
 1979 0962 5E4B     		ldr	r3, .L244
 1980 0964 1868     		ldr	r0, [r3]
 1981 0966 FFF7FEFF 		bl	sys_sem_wait
 1982              		.loc 1 973 0
 1983 096a 5D4B     		ldr	r3, .L244+4
 1984 096c 1A68     		ldr	r2, [r3]
 1985              	.LVL236:
 1986 096e 6A45     		cmp	r2, sp
 1987 0970 0DD1     		bne	.L207
 1988              		.loc 1 974 0
 1989 0972 1A1C     		mov	r2, r3
 1990              	.LVL237:
 1991 0974 009B     		ldr	r3, [sp]
 1992 0976 1360     		str	r3, [r2]
 1993 0978 11E0     		b	.L208
 1994              	.LVL238:
 1995              	.L210:
 1996              		.loc 1 977 0
 1997 097a 1368     		ldr	r3, [r2]
 1998              	.LVL239:
 1999 097c 8B42     		cmp	r3, r1
 2000 097e 03D0     		beq	.L209
 2001 0980 1A1C     		mov	r2, r3
 2002              	.LVL240:
 2003              	.L211:
 2004              		.loc 1 976 0
 2005 0982 002A     		cmp	r2, #0
 2006 0984 F9D1     		bne	.L210
 2007 0986 0AE0     		b	.L208
 2008              	.LVL241:
 2009              	.L209:
 2010              		.loc 1 978 0
 2011 0988 009B     		ldr	r3, [sp]
 2012              	.LVL242:
 2013 098a 1360     		str	r3, [r2]
 2014 098c 07E0     		b	.L208
 2015              	.LVL243:
 2016              	.L207:
 2017              		.loc 1 976 0
 2018 098e 002A     		cmp	r2, #0
 2019 0990 05D0     		beq	.L208
 2020              		.loc 1 977 0
 2021 0992 1168     		ldr	r1, [r2]
 2022              	.LVL244:
 2023 0994 6945     		cmp	r1, sp
 2024 0996 F7D0     		beq	.L209
 2025 0998 0A1C     		mov	r2, r1
 2026 099a 6946     		mov	r1, sp
 2027              	.LVL245:
 2028 099c F1E7     		b	.L211
 2029              	.LVL246:
 2030              	.L208:
 2031              		.loc 1 983 0
 2032 099e 4F4B     		ldr	r3, .L244
 2033 09a0 1868     		ldr	r0, [r3]
 2034 09a2 FFF7FEFF 		bl	sys_sem_signal
 2035              	.LVL247:
 2036              		.loc 1 985 0
 2037 09a6 0598     		ldr	r0, [sp, #20]
 2038 09a8 FFF7FEFF 		bl	sys_sem_free
 2039              		.loc 1 986 0
 2040 09ac 5346     		mov	r3, sl
 2041 09ae 002B     		cmp	r3, #0
 2042 09b0 1ED1     		bne	.L212
 2043              		.loc 1 988 0
 2044 09b2 002D     		cmp	r5, #0
 2045 09b4 07D0     		beq	.L213
 2046              	.LBB13:
 2047              		.loc 1 989 0
 2048 09b6 281C     		mov	r0, r5
 2049              	.LVL248:
 2050 09b8 0024     		mov	r4, #0
 2051              	.LVL249:
 2052 09ba 291C     		mov	r1, r5
 2053 09bc 0831     		add	r1, r1, #8
 2054              	.L214:
 2055 09be 0470     		strb	r4, [r0]
 2056 09c0 0130     		add	r0, r0, #1
 2057              	.LVL250:
 2058 09c2 8842     		cmp	r0, r1
 2059 09c4 FBD1     		bne	.L214
 2060              	.LVL251:
 2061              	.L213:
 2062              	.LBE13:
 2063              		.loc 1 990 0
 2064 09c6 002E     		cmp	r6, #0
 2065 09c8 07D0     		beq	.L215
 2066              	.LBB14:
 2067              		.loc 1 991 0
 2068 09ca 311C     		mov	r1, r6
 2069              	.LVL252:
 2070 09cc 0020     		mov	r0, #0
 2071              	.LVL253:
 2072 09ce 321C     		mov	r2, r6
 2073 09d0 0832     		add	r2, r2, #8
 2074              	.L216:
 2075 09d2 0870     		strb	r0, [r1]
 2076 09d4 0131     		add	r1, r1, #1
 2077              	.LVL254:
 2078 09d6 9142     		cmp	r1, r2
 2079 09d8 FBD1     		bne	.L216
 2080              	.LVL255:
 2081              	.L215:
 2082              	.LBE14:
 2083              		.loc 1 992 0
 2084 09da 002F     		cmp	r7, #0
 2085 09dc 53D0     		beq	.L205
 2086              	.LBB15:
 2087              		.loc 1 993 0
 2088 09de 391C     		mov	r1, r7
 2089              	.LVL256:
 2090 09e0 0020     		mov	r0, #0
 2091              	.LVL257:
 2092 09e2 3A1C     		mov	r2, r7
 2093 09e4 0832     		add	r2, r2, #8
 2094              	.L217:
 2095 09e6 0870     		strb	r0, [r1]
 2096 09e8 0131     		add	r1, r1, #1
 2097              	.LVL258:
 2098 09ea 9142     		cmp	r1, r2
 2099 09ec FBD1     		bne	.L217
 2100 09ee 4AE0     		b	.L205
 2101              	.LVL259:
 2102              	.L212:
 2103              	.LBE15:
 2104              		.loc 1 1001 0
 2105 09f0 002D     		cmp	r5, #0
 2106 09f2 04D0     		beq	.L218
 2107              		.loc 1 1002 0
 2108 09f4 2A68     		ldr	r2, [r5]
 2109 09f6 6B68     		ldr	r3, [r5, #4]
 2110 09f8 0B93     		str	r3, [sp, #44]
 2111 09fa 0A92     		str	r2, [sp, #40]
 2112 09fc 07E0     		b	.L219
 2113              	.L218:
 2114              	.LBB16:
 2115              		.loc 1 1004 0
 2116 09fe 0AAB     		add	r3, sp, #40
 2117              	.LVL260:
 2118 0a00 1A1C     		mov	r2, r3
 2119 0a02 0021     		mov	r1, #0
 2120 0a04 0833     		add	r3, r3, #8
 2121              	.LVL261:
 2122              	.L220:
 2123 0a06 1170     		strb	r1, [r2]
 2124 0a08 0132     		add	r2, r2, #1
 2125 0a0a 9A42     		cmp	r2, r3
 2126 0a0c FBD1     		bne	.L220
 2127              	.L219:
 2128              	.LBE16:
 2129              		.loc 1 1005 0
 2130 0a0e 002E     		cmp	r6, #0
 2131 0a10 04D0     		beq	.L221
 2132              		.loc 1 1006 0
 2133 0a12 3268     		ldr	r2, [r6]
 2134              	.LVL262:
 2135 0a14 7368     		ldr	r3, [r6, #4]
 2136 0a16 0993     		str	r3, [sp, #36]
 2137 0a18 0892     		str	r2, [sp, #32]
 2138 0a1a 07E0     		b	.L222
 2139              	.LVL263:
 2140              	.L221:
 2141              	.LBB17:
 2142              		.loc 1 1008 0
 2143 0a1c 08AB     		add	r3, sp, #32
 2144              	.LVL264:
 2145 0a1e 1A1C     		mov	r2, r3
 2146              	.LVL265:
 2147 0a20 0021     		mov	r1, #0
 2148 0a22 0833     		add	r3, r3, #8
 2149              	.LVL266:
 2150              	.L223:
 2151 0a24 1170     		strb	r1, [r2]
 2152 0a26 0132     		add	r2, r2, #1
 2153 0a28 9A42     		cmp	r2, r3
 2154 0a2a FBD1     		bne	.L223
 2155              	.L222:
 2156              	.LBE17:
 2157              		.loc 1 1009 0
 2158 0a2c 002F     		cmp	r7, #0
 2159 0a2e 04D0     		beq	.L224
 2160              		.loc 1 1010 0
 2161 0a30 3A68     		ldr	r2, [r7]
 2162              	.LVL267:
 2163 0a32 7B68     		ldr	r3, [r7, #4]
 2164 0a34 0793     		str	r3, [sp, #28]
 2165 0a36 0692     		str	r2, [sp, #24]
 2166 0a38 07E0     		b	.L225
 2167              	.LVL268:
 2168              	.L224:
 2169              	.LBB18:
 2170              		.loc 1 1012 0
 2171 0a3a 06AB     		add	r3, sp, #24
 2172              	.LVL269:
 2173 0a3c 1A1C     		mov	r2, r3
 2174              	.LVL270:
 2175 0a3e 0021     		mov	r1, #0
 2176 0a40 0833     		add	r3, r3, #8
 2177              	.LVL271:
 2178              	.L226:
 2179 0a42 1170     		strb	r1, [r2]
 2180 0a44 0132     		add	r2, r2, #1
 2181 0a46 9A42     		cmp	r2, r3
 2182 0a48 FBD1     		bne	.L226
 2183              	.L225:
 2184              	.LBE18:
 2185              		.loc 1 1015 0
 2186 0a4a 4846     		mov	r0, r9
 2187 0a4c 0AA9     		add	r1, sp, #40
 2188 0a4e 08AA     		add	r2, sp, #32
 2189              	.LVL272:
 2190 0a50 06AB     		add	r3, sp, #24
 2191 0a52 FFF7E3FA 		bl	lwip_selscan
 2192 0a56 8046     		mov	r8, r0
 2193 0a58 03E0     		b	.L227
 2194              	.LVL273:
 2195              	.L198:
 2196              		.loc 1 1017 0
 2197 0a5a 204B     		ldr	r3, .L244
 2198 0a5c 1868     		ldr	r0, [r3]
 2199 0a5e FFF7FEFF 		bl	sys_sem_signal
 2200              	.LVL274:
 2201              	.L227:
 2202              		.loc 1 1019 0
 2203 0a62 002D     		cmp	r5, #0
 2204 0a64 03D0     		beq	.L228
 2205              		.loc 1 1020 0
 2206 0a66 0A9B     		ldr	r3, [sp, #40]
 2207 0a68 0B9C     		ldr	r4, [sp, #44]
 2208 0a6a 2B60     		str	r3, [r5]
 2209 0a6c 6C60     		str	r4, [r5, #4]
 2210              	.L228:
 2211              		.loc 1 1021 0
 2212 0a6e 002E     		cmp	r6, #0
 2213 0a70 03D0     		beq	.L229
 2214              		.loc 1 1022 0
 2215 0a72 089B     		ldr	r3, [sp, #32]
 2216 0a74 099C     		ldr	r4, [sp, #36]
 2217 0a76 3360     		str	r3, [r6]
 2218 0a78 7460     		str	r4, [r6, #4]
 2219              	.L229:
 2220              		.loc 1 1023 0
 2221 0a7a 002F     		cmp	r7, #0
 2222 0a7c 03D0     		beq	.L205
 2223              		.loc 1 1024 0
 2224 0a7e 069B     		ldr	r3, [sp, #24]
 2225 0a80 079C     		ldr	r4, [sp, #28]
 2226 0a82 3B60     		str	r3, [r7]
 2227 0a84 7C60     		str	r4, [r7, #4]
 2228              	.LVL275:
 2229              	.L205:
 2230              		.loc 1 1030 0
 2231 0a86 4046     		mov	r0, r8
 2232              	.LVL276:
 2233 0a88 0CB0     		add	sp, sp, #48
 2234              		@ sp needed for prologue
 2235              	.LVL277:
 2236              	.LVL278:
 2237              	.LVL279:
 2238              	.LVL280:
 2239              	.LVL281:
 2240              	.LVL282:
 2241 0a8a 1CBC     		pop	{r2, r3, r4}
 2242 0a8c 9046     		mov	r8, r2
 2243 0a8e 9946     		mov	r9, r3
 2244 0a90 A246     		mov	sl, r4
 2245 0a92 F0BC     		pop	{r4, r5, r6, r7}
 2246 0a94 02BC     		pop	{r1}
 2247 0a96 0847     		bx	r1
 2248              	.LVL283:
 2249              	.L200:
 2250              		.loc 1 950 0
 2251 0a98 0020     		mov	r0, #0
 2252 0a9a FFF7FEFF 		bl	sys_sem_new
 2253 0a9e 6A46     		mov	r2, sp
 2254 0aa0 0590     		str	r0, [sp, #20]
 2255              		.loc 1 953 0
 2256 0aa2 0F49     		ldr	r1, .L244+4
 2257 0aa4 0B68     		ldr	r3, [r1]
 2258 0aa6 0093     		str	r3, [sp]
 2259              		.loc 1 954 0
 2260 0aa8 0A60     		str	r2, [r1]
 2261              		.loc 1 957 0
 2262 0aaa 0C4B     		ldr	r3, .L244
 2263 0aac 1868     		ldr	r0, [r3]
 2264 0aae FFF7FEFF 		bl	sys_sem_signal
 2265              		.loc 1 964 0
 2266 0ab2 6068     		ldr	r0, [r4, #4]
 2267 0ab4 FA23     		mov	r3, #250
 2268 0ab6 5B00     		lsl	r3, r3, #1
 2269 0ab8 C018     		add	r0, r0, r3
 2270 0aba FA21     		mov	r1, #250
 2271 0abc 8900     		lsl	r1, r1, #2
 2272 0abe FFF7FEFF 		bl	__divsi3
 2273 0ac2 2268     		ldr	r2, [r4]
 2274 0ac4 5301     		lsl	r3, r2, #5
 2275 0ac6 9B1A     		sub	r3, r3, r2
 2276 0ac8 9B00     		lsl	r3, r3, #2
 2277 0aca 9B18     		add	r3, r3, r2
 2278 0acc DB00     		lsl	r3, r3, #3
 2279 0ace C118     		add	r1, r0, r3
 2280              	.LVL284:
 2281              		.loc 1 965 0
 2282 0ad0 0029     		cmp	r1, #0
 2283 0ad2 00D0     		beq	.LCB2265
 2284 0ad4 41E7     		b	.L230	@long jump
 2285              	.LCB2265:
 2286 0ad6 0121     		mov	r1, #1
 2287 0ad8 3FE7     		b	.L230
 2288              	.L245:
 2289 0ada C046     		.align	2
 2290              	.L244:
 2291 0adc 58000000 		.word	selectsem
 2292 0ae0 50000000 		.word	select_cb_list
 2293              	.LFE306:
 2295              		.align	2
 2296              		.global	lwip_socket
 2297              		.code	16
 2298              		.thumb_func
 2300              	lwip_socket:
 2301              	.LFB303:
 2302              		.loc 1 771 0
 2303 0ae4 30B5     		push	{r4, r5, lr}
 2304              	.LCFI24:
 2305              	.LVL285:
 2306              		.loc 1 778 0
 2307 0ae6 0229     		cmp	r1, #2
 2308 0ae8 0CD0     		beq	.L249
 2309 0aea 0329     		cmp	r1, #3
 2310 0aec 02D0     		beq	.L250
 2311 0aee 0129     		cmp	r1, #1
 2312 0af0 27D1     		bne	.L247
 2313 0af2 12E0     		b	.L257
 2314              	.L250:
 2315              		.loc 1 780 0
 2316 0af4 1106     		lsl	r1, r2, #24
 2317              	.LVL286:
 2318 0af6 090E     		lsr	r1, r1, #24
 2319 0af8 154A     		ldr	r2, .L258
 2320              	.LVL287:
 2321 0afa 4020     		mov	r0, #64
 2322              	.LVL288:
 2323 0afc FFF7FEFF 		bl	netconn_new_with_proto_and_callback
 2324 0b00 051C     		mov	r5, r0
 2325              	.LVL289:
 2326 0b02 10E0     		b	.L251
 2327              	.LVL290:
 2328              	.L249:
 2329              		.loc 1 785 0
 2330 0b04 882A     		cmp	r2, #136
 2331 0b06 01D0     		beq	.L252
 2332 0b08 2020     		mov	r0, #32
 2333              	.LVL291:
 2334 0b0a 00E0     		b	.L253
 2335              	.LVL292:
 2336              	.L252:
 2337 0b0c 2120     		mov	r0, #33
 2338              	.LVL293:
 2339              	.L253:
 2340 0b0e 104A     		ldr	r2, .L258
 2341              	.LVL294:
 2342 0b10 0021     		mov	r1, #0
 2343              	.LVL295:
 2344 0b12 FFF7FEFF 		bl	netconn_new_with_proto_and_callback
 2345 0b16 051C     		mov	r5, r0
 2346              	.LVL296:
 2347 0b18 05E0     		b	.L251
 2348              	.LVL297:
 2349              	.L257:
 2350              		.loc 1 791 0
 2351 0b1a 0D4A     		ldr	r2, .L258
 2352              	.LVL298:
 2353 0b1c 1020     		mov	r0, #16
 2354              	.LVL299:
 2355 0b1e 0021     		mov	r1, #0
 2356              	.LVL300:
 2357 0b20 FFF7FEFF 		bl	netconn_new_with_proto_and_callback
 2358 0b24 051C     		mov	r5, r0
 2359              	.LVL301:
 2360              	.L251:
 2361              		.loc 1 802 0
 2362 0b26 002D     		cmp	r5, #0
 2363 0b28 0BD0     		beq	.L247
 2364              		.loc 1 808 0
 2365 0b2a 281C     		mov	r0, r5
 2366 0b2c FFF7B4FD 		bl	alloc_socket
 2367 0b30 041C     		mov	r4, r0
 2368              	.LVL302:
 2369              		.loc 1 810 0
 2370 0b32 431C     		add	r3, r0, #1
 2371 0b34 03D1     		bne	.L254
 2372              	.LVL303:
 2373              		.loc 1 811 0
 2374 0b36 281C     		mov	r0, r5
 2375              	.LVL304:
 2376 0b38 FFF7FEFF 		bl	netconn_delete
 2377 0b3c 03E0     		b	.L255
 2378              	.LVL305:
 2379              	.L254:
 2380              		.loc 1 815 0
 2381 0b3e E861     		str	r0, [r5, #28]
 2382 0b40 01E0     		b	.L255
 2383              	.LVL306:
 2384              	.L247:
 2385              		.loc 1 818 0
 2386 0b42 0124     		mov	r4, #1
 2387              	.LVL307:
 2388 0b44 6442     		neg	r4, r4
 2389              	.LVL308:
 2390              	.L255:
 2391              		.loc 1 819 0
 2392 0b46 201C     		mov	r0, r4
 2393              	.LVL309:
 2394              		@ sp needed for prologue
 2395              	.LVL310:
 2396              	.LVL311:
 2397 0b48 30BC     		pop	{r4, r5}
 2398 0b4a 02BC     		pop	{r1}
 2399 0b4c 0847     		bx	r1
 2400              	.L259:
 2401 0b4e C046     		.align	2
 2402              	.L258:
 2403 0b50 00000000 		.word	event_callback
 2404              	.LFE303:
 2406              		.align	2
 2407              		.global	lwip_send
 2408              		.code	16
 2409              		.thumb_func
 2411              	lwip_send:
 2412              	.LFB301:
 2413              		.loc 1 642 0
 2414 0b54 F0B5     		push	{r4, r5, r6, r7, lr}
 2415              	.LCFI25:
 2416 0b56 4746     		mov	r7, r8
 2417 0b58 80B4     		push	{r7}
 2418              	.LCFI26:
 2419              	.LVL312:
 2420 0b5a 82B0     		sub	sp, sp, #8
 2421              	.LCFI27:
 2422 0b5c 051C     		mov	r5, r0
 2423 0b5e 8846     		mov	r8, r1
 2424 0b60 171C     		mov	r7, r2
 2425 0b62 1E1C     		mov	r6, r3
 2426              		.loc 1 649 0
 2427 0b64 FFF74CFA 		bl	get_socket
 2428              	.LVL313:
 2429 0b68 041C     		mov	r4, r0
 2430              	.LVL314:
 2431              		.loc 1 650 0
 2432 0b6a 0028     		cmp	r0, #0
 2433 0b6c 26D0     		beq	.L261
 2434              	.LVL315:
 2435              		.loc 1 653 0
 2436 0b6e 0068     		ldr	r0, [r0]
 2437              	.LVL316:
 2438 0b70 0368     		ldr	r3, [r0]
 2439 0b72 102B     		cmp	r3, #16
 2440 0b74 09D0     		beq	.L262
 2441              		.loc 1 655 0
 2442 0b76 0023     		mov	r3, #0
 2443 0b78 0093     		str	r3, [sp]
 2444 0b7a 0193     		str	r3, [sp, #4]
 2445 0b7c 281C     		mov	r0, r5
 2446 0b7e 4146     		mov	r1, r8
 2447 0b80 3A1C     		mov	r2, r7
 2448 0b82 331C     		mov	r3, r6
 2449 0b84 FFF7FEFF 		bl	lwip_sendto
 2450 0b88 1AE0     		b	.L263
 2451              	.L262:
 2452              		.loc 1 662 0
 2453 0b8a F306     		lsl	r3, r6, #27
 2454 0b8c 01D4     		bmi	.L264
 2455 0b8e 0123     		mov	r3, #1
 2456 0b90 00E0     		b	.L265
 2457              	.L264:
 2458 0b92 0323     		mov	r3, #3
 2459              	.L265:
 2460 0b94 4146     		mov	r1, r8
 2461 0b96 3A1C     		mov	r2, r7
 2462 0b98 FFF7FEFF 		bl	netconn_write
 2463 0b9c 0006     		lsl	r0, r0, #24
 2464              		.loc 1 665 0
 2465 0b9e 010E     		lsr	r1, r0, #24
 2466              	.LVL317:
 2467 0ba0 0016     		asr	r0, r0, #24
 2468 0ba2 4042     		neg	r0, r0
 2469 0ba4 0E28     		cmp	r0, #14
 2470 0ba6 01D9     		bls	.L266
 2471 0ba8 0520     		mov	r0, #5
 2472 0baa 02E0     		b	.L267
 2473              	.L266:
 2474 0bac 074A     		ldr	r2, .L269
 2475 0bae 8300     		lsl	r3, r0, #2
 2476 0bb0 9858     		ldr	r0, [r3, r2]
 2477              	.L267:
 2478 0bb2 2061     		str	r0, [r4, #16]
 2479              		.loc 1 666 0
 2480 0bb4 0029     		cmp	r1, #0
 2481 0bb6 01D1     		bne	.L261
 2482 0bb8 381C     		mov	r0, r7
 2483 0bba 01E0     		b	.L263
 2484              	.LVL318:
 2485              	.L261:
 2486 0bbc 0120     		mov	r0, #1
 2487 0bbe 4042     		neg	r0, r0
 2488              	.L263:
 2489              		.loc 1 667 0
 2490 0bc0 02B0     		add	sp, sp, #8
 2491              		@ sp needed for prologue
 2492              	.LVL319:
 2493              	.LVL320:
 2494              	.LVL321:
 2495              	.LVL322:
 2496              	.LVL323:
 2497 0bc2 04BC     		pop	{r2}
 2498 0bc4 9046     		mov	r8, r2
 2499 0bc6 F0BC     		pop	{r4, r5, r6, r7}
 2500 0bc8 02BC     		pop	{r1}
 2501 0bca 0847     		bx	r1
 2502              	.L270:
 2503              		.align	2
 2504              	.L269:
 2505 0bcc 00000000 		.word	err_to_errno_table
 2506              	.LFE301:
 2508              		.align	2
 2509              		.global	lwip_write
 2510              		.code	16
 2511              		.thumb_func
 2513              	lwip_write:
 2514              	.LFB304:
 2515              		.loc 1 823 0
 2516 0bd0 00B5     		push	{lr}
 2517              	.LCFI28:
 2518              	.LVL324:
 2519              		.loc 1 824 0
 2520 0bd2 0023     		mov	r3, #0
 2521 0bd4 FFF7FEFF 		bl	lwip_send
 2522              	.LVL325:
 2523              		.loc 1 825 0
 2524              		@ sp needed for prologue
 2525 0bd8 02BC     		pop	{r1}
 2526 0bda 0847     		bx	r1
 2527              	.LFE304:
 2529              		.align	2
 2530              		.global	lwip_sendto
 2531              		.code	16
 2532              		.thumb_func
 2534              	lwip_sendto:
 2535              	.LFB302:
 2536              		.loc 1 672 0
 2537 0bdc F0B5     		push	{r4, r5, r6, r7, lr}
 2538              	.LCFI29:
 2539 0bde 5746     		mov	r7, sl
 2540 0be0 4646     		mov	r6, r8
 2541 0be2 C0B4     		push	{r6, r7}
 2542              	.LCFI30:
 2543              	.LVL326:
 2544 0be4 85B0     		sub	sp, sp, #20
 2545              	.LCFI31:
 2546 0be6 041C     		mov	r4, r0
 2547 0be8 8A46     		mov	sl, r1
 2548 0bea 9046     		mov	r8, r2
 2549 0bec 1F1C     		mov	r7, r3
 2550 0bee 0C9D     		ldr	r5, [sp, #48]
 2551              		.loc 1 682 0
 2552 0bf0 FFF706FA 		bl	get_socket
 2553              	.LVL327:
 2554 0bf4 061C     		mov	r6, r0
 2555              	.LVL328:
 2556              		.loc 1 683 0
 2557 0bf6 0028     		cmp	r0, #0
 2558 0bf8 54D0     		beq	.L274
 2559              	.LVL329:
 2560              		.loc 1 686 0
 2561 0bfa 0368     		ldr	r3, [r0]
 2562 0bfc 1B68     		ldr	r3, [r3]
 2563 0bfe 102B     		cmp	r3, #16
 2564 0c00 07D1     		bne	.L275
 2565              		.loc 1 688 0
 2566 0c02 201C     		mov	r0, r4
 2567              	.LVL330:
 2568 0c04 5146     		mov	r1, sl
 2569 0c06 4246     		mov	r2, r8
 2570 0c08 3B1C     		mov	r3, r7
 2571 0c0a FFF7FEFF 		bl	lwip_send
 2572 0c0e 041C     		mov	r4, r0
 2573              	.LVL331:
 2574 0c10 4AE0     		b	.L276
 2575              	.LVL332:
 2576              	.L275:
 2577              		.loc 1 697 0
 2578 0c12 291C     		mov	r1, r5
 2579 0c14 4B1E     		sub	r3, r1, #1
 2580 0c16 9941     		sbc	r1, r1, r3
 2581 0c18 0029     		cmp	r1, #0
 2582 0c1a 02D1     		bne	.L286
 2583 0c1c 0D9A     		ldr	r2, [sp, #52]
 2584 0c1e 002A     		cmp	r2, #0
 2585 0c20 0AD0     		beq	.L277
 2586              	.L286:
 2587 0c22 0D9B     		ldr	r3, [sp, #52]
 2588 0c24 102B     		cmp	r3, #16
 2589 0c26 02D1     		bne	.L279
 2590              	.LVL333:
 2591 0c28 6B78     		ldrb	r3, [r5, #1]
 2592 0c2a 022B     		cmp	r3, #2
 2593 0c2c 04D0     		beq	.L277
 2594              	.L279:
 2595 0c2e 0523     		mov	r3, #5
 2596 0c30 3361     		str	r3, [r6, #16]
 2597 0c32 0124     		mov	r4, #1
 2598              	.LVL334:
 2599 0c34 6442     		neg	r4, r4
 2600 0c36 37E0     		b	.L276
 2601              	.LVL335:
 2602              	.L277:
 2603              		.loc 1 728 0
 2604 0c38 0023     		mov	r3, #0
 2605 0c3a 0193     		str	r3, [sp, #4]
 2606 0c3c 0093     		str	r3, [sp]
 2607              		.loc 1 729 0
 2608 0c3e 0029     		cmp	r1, #0
 2609 0c40 09D0     		beq	.L280
 2610              		.loc 1 730 0
 2611 0c42 6B68     		ldr	r3, [r5, #4]
 2612 0c44 0493     		str	r3, [sp, #16]
 2613              		.loc 1 731 0
 2614 0c46 6888     		ldrh	r0, [r5, #2]
 2615              	.LVL336:
 2616 0c48 FFF7FEFF 		bl	ntohs
 2617              		.loc 1 732 0
 2618 0c4c 6A46     		mov	r2, sp
 2619 0c4e 04AB     		add	r3, sp, #16
 2620 0c50 0293     		str	r3, [sp, #8]
 2621              		.loc 1 733 0
 2622 0c52 9081     		strh	r0, [r2, #12]
 2623 0c54 04E0     		b	.L281
 2624              	.LVL337:
 2625              	.L280:
 2626              		.loc 1 735 0
 2627 0c56 0023     		mov	r3, #0
 2628 0c58 0493     		str	r3, [sp, #16]
 2629              		.loc 1 737 0
 2630 0c5a 6A46     		mov	r2, sp
 2631 0c5c 0293     		str	r3, [sp, #8]
 2632              		.loc 1 738 0
 2633 0c5e 9381     		strh	r3, [r2, #12]
 2634              	.LVL338:
 2635              	.L281:
 2636              		.loc 1 755 0
 2637 0c60 4246     		mov	r2, r8
 2638 0c62 1304     		lsl	r3, r2, #16
 2639 0c64 1C0C     		lsr	r4, r3, #16
 2640              	.LVL339:
 2641 0c66 6846     		mov	r0, sp
 2642 0c68 5146     		mov	r1, sl
 2643 0c6a 221C     		mov	r2, r4
 2644 0c6c FFF7FEFF 		bl	netbuf_ref
 2645 0c70 0006     		lsl	r0, r0, #24
 2646 0c72 050E     		lsr	r5, r0, #24
 2647              	.LVL340:
 2648              		.loc 1 757 0
 2649 0c74 002D     		cmp	r5, #0
 2650 0c76 05D1     		bne	.L282
 2651              		.loc 1 759 0
 2652 0c78 3068     		ldr	r0, [r6]
 2653 0c7a 6946     		mov	r1, sp
 2654 0c7c FFF7FEFF 		bl	netconn_send
 2655 0c80 0006     		lsl	r0, r0, #24
 2656 0c82 050E     		lsr	r5, r0, #24
 2657              	.LVL341:
 2658              	.L282:
 2659              		.loc 1 763 0
 2660 0c84 6846     		mov	r0, sp
 2661 0c86 FFF7FEFF 		bl	netbuf_free
 2662              		.loc 1 765 0
 2663 0c8a 2B06     		lsl	r3, r5, #24
 2664 0c8c 1B16     		asr	r3, r3, #24
 2665 0c8e 5B42     		neg	r3, r3
 2666 0c90 0E2B     		cmp	r3, #14
 2667 0c92 01D9     		bls	.L283
 2668 0c94 0523     		mov	r3, #5
 2669 0c96 02E0     		b	.L284
 2670              	.L283:
 2671 0c98 074A     		ldr	r2, .L287
 2672 0c9a 9B00     		lsl	r3, r3, #2
 2673 0c9c 9B58     		ldr	r3, [r3, r2]
 2674              	.L284:
 2675 0c9e 3361     		str	r3, [r6, #16]
 2676              		.loc 1 766 0
 2677 0ca0 002D     		cmp	r5, #0
 2678 0ca2 01D0     		beq	.L276
 2679              	.LVL342:
 2680              	.L274:
 2681 0ca4 0124     		mov	r4, #1
 2682              	.LVL343:
 2683 0ca6 6442     		neg	r4, r4
 2684              	.L276:
 2685              		.loc 1 767 0
 2686 0ca8 201C     		mov	r0, r4
 2687 0caa 05B0     		add	sp, sp, #20
 2688              		@ sp needed for prologue
 2689              	.LVL344:
 2690              	.LVL345:
 2691              	.LVL346:
 2692              	.LVL347:
 2693              	.LVL348:
 2694 0cac 0CBC     		pop	{r2, r3}
 2695 0cae 9046     		mov	r8, r2
 2696 0cb0 9A46     		mov	sl, r3
 2697 0cb2 F0BC     		pop	{r4, r5, r6, r7}
 2698 0cb4 02BC     		pop	{r1}
 2699 0cb6 0847     		bx	r1
 2700              	.L288:
 2701              		.align	2
 2702              	.L287:
 2703 0cb8 00000000 		.word	err_to_errno_table
 2704              	.LFE302:
 2706              		.align	2
 2707              		.global	lwip_recvfrom
 2708              		.code	16
 2709              		.thumb_func
 2711              	lwip_recvfrom:
 2712              	.LFB298:
 2713              		.loc 1 477 0
 2714 0cbc F0B5     		push	{r4, r5, r6, r7, lr}
 2715              	.LCFI32:
 2716 0cbe 5F46     		mov	r7, fp
 2717 0cc0 5646     		mov	r6, sl
 2718 0cc2 4D46     		mov	r5, r9
 2719 0cc4 4446     		mov	r4, r8
 2720 0cc6 F0B4     		push	{r4, r5, r6, r7}
 2721              	.LCFI33:
 2722              	.LVL349:
 2723 0cc8 8AB0     		sub	sp, sp, #40
 2724              	.LCFI34:
 2725 0cca 0391     		str	r1, [sp, #12]
 2726 0ccc 9146     		mov	r9, r2
 2727 0cce 1C1C     		mov	r4, r3
 2728              		.loc 1 486 0
 2729 0cd0 FFF796F9 		bl	get_socket
 2730              	.LVL350:
 2731 0cd4 051C     		mov	r5, r0
 2732              	.LVL351:
 2733              		.loc 1 487 0
 2734 0cd6 0028     		cmp	r0, #0
 2735 0cd8 02D1     		bne	.L290
 2736              	.LVL352:
 2737 0cda 0120     		mov	r0, #1
 2738              	.LVL353:
 2739 0cdc 4042     		neg	r0, r0
 2740 0cde CAE0     		b	.L291
 2741              	.LVL354:
 2742              	.L290:
 2743 0ce0 0021     		mov	r1, #0
 2744 0ce2 8846     		mov	r8, r1
 2745              	.LVL355:
 2746              		.loc 1 497 0
 2747 0ce4 0823     		mov	r3, #8
 2748 0ce6 2340     		and	r3, r3, r4
 2749 0ce8 0293     		str	r3, [sp, #8]
 2750 0cea 8022     		mov	r2, #128
 2751 0cec 1201     		lsl	r2, r2, #4
 2752 0cee 0192     		str	r2, [sp, #4]
 2753              	.LBB19:
 2754              		.loc 1 572 0
 2755 0cf0 8B46     		mov	fp, r1
 2756              	.LBE19:
 2757              		.loc 1 607 0
 2758 0cf2 0123     		mov	r3, #1
 2759 0cf4 2340     		and	r3, r3, r4
 2760 0cf6 0093     		str	r3, [sp]
 2761              	.LVL356:
 2762              	.L311:
 2763              		.loc 1 493 0
 2764 0cf8 6E68     		ldr	r6, [r5, #4]
 2765 0cfa 002E     		cmp	r6, #0
 2766 0cfc 3BD1     		bne	.L292
 2767              		.loc 1 497 0
 2768 0cfe 0299     		ldr	r1, [sp, #8]
 2769 0d00 0029     		cmp	r1, #0
 2770 0d02 03D1     		bne	.L293
 2771 0d04 EB89     		ldrh	r3, [r5, #14]
 2772 0d06 019A     		ldr	r2, [sp, #4]
 2773 0d08 1342     		tst	r3, r2
 2774 0d0a 0FD0     		beq	.L294
 2775              	.L293:
 2776 0d0c 0A21     		mov	r1, #10
 2777 0d0e 6B5E     		ldrsh	r3, [r5, r1]
 2778 0d10 002B     		cmp	r3, #0
 2779 0d12 0BDC     		bgt	.L294
 2780              		.loc 1 499 0
 2781 0d14 4246     		mov	r2, r8
 2782 0d16 002A     		cmp	r2, #0
 2783 0d18 03D0     		beq	.L295
 2784              		.loc 1 501 0
 2785 0d1a 0023     		mov	r3, #0
 2786 0d1c 2B61     		str	r3, [r5, #16]
 2787              		.loc 1 502 0
 2788 0d1e 4046     		mov	r0, r8
 2789 0d20 A9E0     		b	.L291
 2790              	.LVL357:
 2791              	.L295:
 2792              		.loc 1 505 0
 2793 0d22 0B23     		mov	r3, #11
 2794 0d24 2B61     		str	r3, [r5, #16]
 2795 0d26 0120     		mov	r0, #1
 2796 0d28 4042     		neg	r0, r0
 2797 0d2a A4E0     		b	.L291
 2798              	.LVL358:
 2799              	.L294:
 2800              		.loc 1 511 0
 2801 0d2c 2868     		ldr	r0, [r5]
 2802 0d2e FFF7FEFF 		bl	netconn_recv
 2803 0d32 061C     		mov	r6, r0
 2804 0d34 6860     		str	r0, [r5, #4]
 2805              		.loc 1 514 0
 2806 0d36 0028     		cmp	r0, #0
 2807 0d38 1DD1     		bne	.L292
 2808              	.LVL359:
 2809              		.loc 1 515 0
 2810 0d3a 4346     		mov	r3, r8
 2811 0d3c 002B     		cmp	r3, #0
 2812 0d3e 03D0     		beq	.L296
 2813              		.loc 1 517 0
 2814 0d40 0023     		mov	r3, #0
 2815 0d42 2B61     		str	r3, [r5, #16]
 2816              		.loc 1 518 0
 2817 0d44 4046     		mov	r0, r8
 2818              	.LVL360:
 2819 0d46 96E0     		b	.L291
 2820              	.LVL361:
 2821              	.L296:
 2822              		.loc 1 522 0
 2823 0d48 2A68     		ldr	r2, [r5]
 2824 0d4a 9368     		ldr	r3, [r2, #8]
 2825 0d4c 002B     		cmp	r3, #0
 2826 0d4e 05D0     		beq	.L297
 2827 0d50 0C23     		mov	r3, #12
 2828 0d52 D356     		ldrsb	r3, [r2, r3]
 2829 0d54 002B     		cmp	r3, #0
 2830 0d56 01D1     		bne	.L297
 2831 0d58 6E23     		mov	r3, #110
 2832 0d5a 09E0     		b	.L298
 2833              	.L297:
 2834 0d5c 0C23     		mov	r3, #12
 2835 0d5e D356     		ldrsb	r3, [r2, r3]
 2836 0d60 5B42     		neg	r3, r3
 2837 0d62 0E2B     		cmp	r3, #14
 2838 0d64 01D9     		bls	.L299
 2839 0d66 0523     		mov	r3, #5
 2840 0d68 02E0     		b	.L298
 2841              	.L299:
 2842 0d6a 4B4A     		ldr	r2, .L317
 2843 0d6c 9B00     		lsl	r3, r3, #2
 2844 0d6e 9B58     		ldr	r3, [r3, r2]
 2845              	.L298:
 2846 0d70 2B61     		str	r3, [r5, #16]
 2847 0d72 0020     		mov	r0, #0
 2848              	.LVL362:
 2849 0d74 7FE0     		b	.L291
 2850              	.LVL363:
 2851              	.L292:
 2852              		.loc 1 528 0
 2853 0d76 3068     		ldr	r0, [r6]
 2854 0d78 0389     		ldrh	r3, [r0, #8]
 2855              	.LVL364:
 2856              		.loc 1 532 0
 2857 0d7a 2C89     		ldrh	r4, [r5, #8]
 2858              	.LVL365:
 2859 0d7c 1B1B     		sub	r3, r3, r4
 2860              	.LVL366:
 2861 0d7e 1B04     		lsl	r3, r3, #16
 2862 0d80 1B0C     		lsr	r3, r3, #16
 2863 0d82 9A46     		mov	sl, r3
 2864              	.LVL367:
 2865              		.loc 1 534 0
 2866 0d84 9945     		cmp	r9, r3
 2867 0d86 01D9     		bls	.L300
 2868              	.LVL368:
 2869 0d88 1F1C     		mov	r7, r3
 2870              	.LVL369:
 2871 0d8a 02E0     		b	.L301
 2872              	.L300:
 2873              		.loc 1 537 0
 2874 0d8c 4946     		mov	r1, r9
 2875 0d8e 0B04     		lsl	r3, r1, #16
 2876              	.LVL370:
 2877 0d90 1F0C     		lsr	r7, r3, #16
 2878              	.LVL371:
 2879              	.L301:
 2880              		.loc 1 542 0
 2881 0d92 0497     		str	r7, [sp, #16]
 2882 0d94 0399     		ldr	r1, [sp, #12]
 2883 0d96 4144     		add	r1, r1, r8
 2884 0d98 3A1C     		mov	r2, r7
 2885 0d9a 231C     		mov	r3, r4
 2886 0d9c FFF7FEFF 		bl	pbuf_copy_partial
 2887              		.loc 1 544 0
 2888 0da0 4246     		mov	r2, r8
 2889 0da2 BB18     		add	r3, r7, r2
 2890 0da4 1B04     		lsl	r3, r3, #16
 2891 0da6 1B0C     		lsr	r3, r3, #16
 2892 0da8 9846     		mov	r8, r3
 2893              	.LVL372:
 2894              		.loc 1 546 0
 2895 0daa 2868     		ldr	r0, [r5]
 2896 0dac 0268     		ldr	r2, [r0]
 2897 0dae 102A     		cmp	r2, #16
 2898 0db0 6AD1     		bne	.L302
 2899              	.LVL373:
 2900              		.loc 1 548 0
 2901 0db2 4B46     		mov	r3, r9
 2902 0db4 DB1B     		sub	r3, r3, r7
 2903 0db6 9946     		mov	r9, r3
 2904              		.loc 1 549 0
 2905 0db8 002B     		cmp	r3, #0
 2906 0dba 65D0     		beq	.L302
 2907 0dbc 3368     		ldr	r3, [r6]
 2908 0dbe 5B7B     		ldrb	r3, [r3, #13]
 2909 0dc0 0121     		mov	r1, #1
 2910 0dc2 0B42     		tst	r3, r1
 2911 0dc4 60D1     		bne	.L302
 2912 0dc6 0A21     		mov	r1, #10
 2913 0dc8 6B5E     		ldrsh	r3, [r5, r1]
 2914 0dca 002B     		cmp	r3, #0
 2915 0dcc 5CDD     		ble	.L302
 2916 0dce 009B     		ldr	r3, [sp]
 2917 0dd0 002B     		cmp	r3, #0
 2918 0dd2 59D1     		bne	.L302
 2919 0dd4 5C46     		mov	r4, fp
 2920              	.LVL374:
 2921 0dd6 37E0     		b	.L303
 2922              	.LVL375:
 2923              	.L312:
 2924              	.LBB20:
 2925              		.loc 1 564 0
 2926 0dd8 102A     		cmp	r2, #16
 2927 0dda 07D1     		bne	.L304
 2928              		.loc 1 565 0
 2929 0ddc 06AC     		add	r4, sp, #24
 2930              	.LVL376:
 2931              		.loc 1 566 0
 2932 0dde 211C     		mov	r1, r4
 2933 0de0 6A46     		mov	r2, sp
 2934 0de2 2632     		add	r2, r2, #38
 2935 0de4 5B46     		mov	r3, fp
 2936 0de6 FFF7FEFF 		bl	netconn_getaddr
 2937 0dea 04E0     		b	.L305
 2938              	.LVL377:
 2939              	.L304:
 2940              		.loc 1 568 0
 2941 0dec B468     		ldr	r4, [r6, #8]
 2942              	.LVL378:
 2943              		.loc 1 569 0
 2944 0dee B289     		ldrh	r2, [r6, #12]
 2945 0df0 6B46     		mov	r3, sp
 2946 0df2 2633     		add	r3, r3, #38
 2947 0df4 1A80     		strh	r2, [r3]
 2948              	.LVL379:
 2949              	.L305:
 2950              		.loc 1 572 0
 2951 0df6 5946     		mov	r1, fp
 2952 0df8 0591     		str	r1, [sp, #20]
 2953 0dfa 0691     		str	r1, [sp, #24]
 2954 0dfc 07AB     		add	r3, sp, #28
 2955 0dfe 1960     		str	r1, [r3]
 2956 0e00 08AB     		add	r3, sp, #32
 2957 0e02 1960     		str	r1, [r3]
 2958              		.loc 1 573 0
 2959 0e04 1023     		mov	r3, #16
 2960 0e06 6A46     		mov	r2, sp
 2961 0e08 1375     		strb	r3, [r2, #20]
 2962              		.loc 1 574 0
 2963 0e0a 0223     		mov	r3, #2
 2964 0e0c 5375     		strb	r3, [r2, #21]
 2965              		.loc 1 575 0
 2966 0e0e 6B46     		mov	r3, sp
 2967 0e10 2633     		add	r3, r3, #38
 2968 0e12 1888     		ldrh	r0, [r3]
 2969              	.LVL380:
 2970 0e14 FFF7FEFF 		bl	htons
 2971              	.LVL381:
 2972 0e18 6B46     		mov	r3, sp
 2973 0e1a D882     		strh	r0, [r3, #22]
 2974              		.loc 1 576 0
 2975 0e1c 2368     		ldr	r3, [r4]
 2976 0e1e 0693     		str	r3, [sp, #24]
 2977              		.loc 1 578 0
 2978 0e20 1499     		ldr	r1, [sp, #80]
 2979 0e22 0B68     		ldr	r3, [r1]
 2980 0e24 102B     		cmp	r3, #16
 2981 0e26 01D9     		bls	.L306
 2982              		.loc 1 579 0
 2983 0e28 1023     		mov	r3, #16
 2984 0e2a 0B60     		str	r3, [r1]
 2985              	.L306:
 2986              		.loc 1 582 0
 2987 0e2c 149B     		ldr	r3, [sp, #80]
 2988 0e2e 1A68     		ldr	r2, [r3]
 2989 0e30 1398     		ldr	r0, [sp, #76]
 2990 0e32 05A9     		add	r1, sp, #20
 2991 0e34 FFF7FEFF 		bl	memcpy
 2992              	.L314:
 2993              	.LBE20:
 2994              		.loc 1 607 0
 2995 0e38 0099     		ldr	r1, [sp]
 2996 0e3a 0029     		cmp	r1, #0
 2997 0e3c 18D1     		bne	.L307
 2998              	.LVL382:
 2999              		.loc 1 611 0
 3000 0e3e 2B68     		ldr	r3, [r5]
 3001 0e40 1B68     		ldr	r3, [r3]
 3002 0e42 102B     		cmp	r3, #16
 3003 0e44 0AD1     		bne	.L308
 3004 0e46 0124     		mov	r4, #1
 3005              	.LVL383:
 3006              	.L303:
 3007 0e48 5246     		mov	r2, sl
 3008 0e4a 0499     		ldr	r1, [sp, #16]
 3009 0e4c 531A     		sub	r3, r2, r1
 3010 0e4e 002B     		cmp	r3, #0
 3011 0e50 05DD     		ble	.L309
 3012              	.LVL384:
 3013              		.loc 1 612 0
 3014 0e52 6E60     		str	r6, [r5, #4]
 3015              		.loc 1 613 0
 3016 0e54 2B89     		ldrh	r3, [r5, #8]
 3017 0e56 FB18     		add	r3, r7, r3
 3018 0e58 2B81     		strh	r3, [r5, #8]
 3019 0e5a 06E0     		b	.L310
 3020              	.LVL385:
 3021              	.L308:
 3022              		.loc 1 611 0
 3023 0e5c 0124     		mov	r4, #1
 3024              	.LVL386:
 3025              	.L309:
 3026              		.loc 1 616 0
 3027 0e5e 5A46     		mov	r2, fp
 3028 0e60 6A60     		str	r2, [r5, #4]
 3029              		.loc 1 617 0
 3030 0e62 2A81     		strh	r2, [r5, #8]
 3031              		.loc 1 619 0
 3032 0e64 301C     		mov	r0, r6
 3033 0e66 FFF7FEFF 		bl	netbuf_delete
 3034              	.L310:
 3035              		.loc 1 622 0
 3036 0e6a 002C     		cmp	r4, #0
 3037 0e6c 00D1     		bne	.LCB3039
 3038 0e6e 43E7     		b	.L311	@long jump
 3039              	.LCB3039:
 3040              	.LVL387:
 3041              	.L307:
 3042              		.loc 1 624 0
 3043 0e70 0023     		mov	r3, #0
 3044 0e72 2B61     		str	r3, [r5, #16]
 3045              		.loc 1 625 0
 3046 0e74 4046     		mov	r0, r8
 3047              	.LVL388:
 3048              	.L291:
 3049              		.loc 1 626 0
 3050 0e76 0AB0     		add	sp, sp, #40
 3051              		@ sp needed for prologue
 3052              	.LVL389:
 3053              	.LVL390:
 3054              	.LVL391:
 3055              	.LVL392:
 3056              	.LVL393:
 3057              	.LVL394:
 3058              	.LVL395:
 3059 0e78 3CBC     		pop	{r2, r3, r4, r5}
 3060 0e7a 9046     		mov	r8, r2
 3061 0e7c 9946     		mov	r9, r3
 3062 0e7e A246     		mov	sl, r4
 3063 0e80 AB46     		mov	fp, r5
 3064 0e82 F0BC     		pop	{r4, r5, r6, r7}
 3065 0e84 02BC     		pop	{r1}
 3066 0e86 0847     		bx	r1
 3067              	.LVL396:
 3068              	.L302:
 3069              		.loc 1 561 0
 3070 0e88 1399     		ldr	r1, [sp, #76]
 3071 0e8a 0029     		cmp	r1, #0
 3072 0e8c D4D0     		beq	.L314
 3073              	.LVL397:
 3074 0e8e 149B     		ldr	r3, [sp, #80]
 3075 0e90 002B     		cmp	r3, #0
 3076 0e92 A1D1     		bne	.L312
 3077              	.LVL398:
 3078 0e94 D0E7     		b	.L314
 3079              	.L318:
 3080 0e96 C046     		.align	2
 3081              	.L317:
 3082 0e98 00000000 		.word	err_to_errno_table
 3083              	.LFE298:
 3085              		.align	2
 3086              		.global	lwip_recv
 3087              		.code	16
 3088              		.thumb_func
 3090              	lwip_recv:
 3091              	.LFB300:
 3092              		.loc 1 636 0
 3093 0e9c 10B5     		push	{r4, lr}
 3094              	.LCFI35:
 3095              	.LVL399:
 3096 0e9e 82B0     		sub	sp, sp, #8
 3097              	.LCFI36:
 3098              		.loc 1 637 0
 3099 0ea0 0024     		mov	r4, #0
 3100 0ea2 0094     		str	r4, [sp]
 3101 0ea4 0194     		str	r4, [sp, #4]
 3102 0ea6 FFF7FEFF 		bl	lwip_recvfrom
 3103              	.LVL400:
 3104              		.loc 1 638 0
 3105 0eaa 02B0     		add	sp, sp, #8
 3106              		@ sp needed for prologue
 3107 0eac 10BC     		pop	{r4}
 3108 0eae 02BC     		pop	{r1}
 3109 0eb0 0847     		bx	r1
 3110              	.LFE300:
 3112 0eb2 C046     		.align	2
 3113              		.global	lwip_read
 3114              		.code	16
 3115              		.thumb_func
 3117              	lwip_read:
 3118              	.LFB299:
 3119              		.loc 1 630 0
 3120 0eb4 00B5     		push	{lr}
 3121              	.LCFI37:
 3122              	.LVL401:
 3123 0eb6 82B0     		sub	sp, sp, #8
 3124              	.LCFI38:
 3125              		.loc 1 631 0
 3126 0eb8 0023     		mov	r3, #0
 3127 0eba 0093     		str	r3, [sp]
 3128 0ebc 0193     		str	r3, [sp, #4]
 3129 0ebe FFF7FEFF 		bl	lwip_recvfrom
 3130              	.LVL402:
 3131              		.loc 1 632 0
 3132 0ec2 02B0     		add	sp, sp, #8
 3133              		@ sp needed for prologue
 3134 0ec4 02BC     		pop	{r1}
 3135 0ec6 0847     		bx	r1
 3136              	.LFE299:
 3138              		.align	2
 3139              		.global	lwip_close
 3140              		.code	16
 3141              		.thumb_func
 3143              	lwip_close:
 3144              	.LFB295:
 3145              		.loc 1 368 0
 3146 0ec8 10B5     		push	{r4, lr}
 3147              	.LCFI39:
 3148              	.LVL403:
 3149              		.loc 1 373 0
 3150 0eca FFF799F8 		bl	get_socket
 3151              	.LVL404:
 3152 0ece 041C     		mov	r4, r0
 3153              	.LVL405:
 3154              		.loc 1 374 0
 3155 0ed0 0028     		cmp	r0, #0
 3156 0ed2 02D1     		bne	.L324
 3157              	.LVL406:
 3158 0ed4 0120     		mov	r0, #1
 3159              	.LVL407:
 3160 0ed6 4042     		neg	r0, r0
 3161 0ed8 15E0     		b	.L325
 3162              	.LVL408:
 3163              	.L324:
 3164              		.loc 1 378 0
 3165 0eda 0068     		ldr	r0, [r0]
 3166              	.LVL409:
 3167 0edc FFF7FEFF 		bl	netconn_delete
 3168              		.loc 1 380 0
 3169 0ee0 0A4B     		ldr	r3, .L328
 3170 0ee2 1868     		ldr	r0, [r3]
 3171 0ee4 FFF7FEFF 		bl	sys_sem_wait
 3172              		.loc 1 381 0
 3173 0ee8 6068     		ldr	r0, [r4, #4]
 3174 0eea 0028     		cmp	r0, #0
 3175 0eec 01D0     		beq	.L326
 3176              		.loc 1 382 0
 3177 0eee FFF7FEFF 		bl	netbuf_delete
 3178              	.L326:
 3179              		.loc 1 384 0
 3180 0ef2 0023     		mov	r3, #0
 3181 0ef4 6360     		str	r3, [r4, #4]
 3182              		.loc 1 385 0
 3183 0ef6 2381     		strh	r3, [r4, #8]
 3184              		.loc 1 386 0
 3185 0ef8 2360     		str	r3, [r4]
 3186              		.loc 1 387 0
 3187 0efa 2361     		str	r3, [r4, #16]
 3188              		.loc 1 388 0
 3189 0efc 034B     		ldr	r3, .L328
 3190 0efe 1868     		ldr	r0, [r3]
 3191 0f00 FFF7FEFF 		bl	sys_sem_signal
 3192 0f04 0020     		mov	r0, #0
 3193              	.L325:
 3194              		.loc 1 390 0
 3195              		@ sp needed for prologue
 3196              	.LVL410:
 3197 0f06 10BC     		pop	{r4}
 3198 0f08 02BC     		pop	{r1}
 3199 0f0a 0847     		bx	r1
 3200              	.L329:
 3201              		.align	2
 3202              	.L328:
 3203 0f0c 54000000 		.word	socksem
 3204              	.LFE295:
 3206              		.align	2
 3207              		.global	lwip_shutdown
 3208              		.code	16
 3209              		.thumb_func
 3211              	lwip_shutdown:
 3212              	.LFB308:
 3213              		.loc 1 1132 0
 3214 0f10 00B5     		push	{lr}
 3215              	.LCFI40:
 3216              	.LVL411:
 3217              		.loc 1 1135 0
 3218 0f12 FFF7FEFF 		bl	lwip_close
 3219              	.LVL412:
 3220              		.loc 1 1136 0
 3221              		@ sp needed for prologue
 3222 0f16 02BC     		pop	{r1}
 3223 0f18 0847     		bx	r1
 3224              	.LFE308:
 3226 0f1a C046     		.align	2
 3227              		.global	lwip_listen
 3228              		.code	16
 3229              		.thumb_func
 3231              	lwip_listen:
 3232              	.LFB297:
 3233              		.loc 1 444 0
 3234 0f1c 30B5     		push	{r4, r5, lr}
 3235              	.LCFI41:
 3236              	.LVL413:
 3237 0f1e 0C1C     		mov	r4, r1
 3238              		.loc 1 450 0
 3239 0f20 FFF76EF8 		bl	get_socket
 3240              	.LVL414:
 3241 0f24 051C     		mov	r5, r0
 3242              	.LVL415:
 3243              		.loc 1 451 0
 3244 0f26 0028     		cmp	r0, #0
 3245 0f28 02D1     		bne	.L333
 3246              	.LVL416:
 3247 0f2a 0120     		mov	r0, #1
 3248              	.LVL417:
 3249 0f2c 4042     		neg	r0, r0
 3250 0f2e 20E0     		b	.L334
 3251              	.LVL418:
 3252              	.L333:
 3253 0f30 211C     		mov	r1, r4
 3254 0f32 FF2C     		cmp	r4, #255
 3255 0f34 00DD     		ble	.L335
 3256 0f36 FF21     		mov	r1, #255
 3257              	.LVL419:
 3258              	.L335:
 3259              		.loc 1 462 0
 3260 0f38 2868     		ldr	r0, [r5]
 3261              	.LVL420:
 3262 0f3a 0029     		cmp	r1, #0
 3263 0f3c 00DA     		bge	.L336
 3264 0f3e 0021     		mov	r1, #0
 3265              	.LVL421:
 3266              	.L336:
 3267 0f40 0906     		lsl	r1, r1, #24
 3268              	.LVL422:
 3269 0f42 090E     		lsr	r1, r1, #24
 3270 0f44 FFF7FEFF 		bl	netconn_listen_with_backlog
 3271 0f48 0006     		lsl	r0, r0, #24
 3272 0f4a 000E     		lsr	r0, r0, #24
 3273              	.LVL423:
 3274              		.loc 1 464 0
 3275 0f4c 0028     		cmp	r0, #0
 3276 0f4e 0DD0     		beq	.L337
 3277              		.loc 1 466 0
 3278 0f50 0306     		lsl	r3, r0, #24
 3279 0f52 1B16     		asr	r3, r3, #24
 3280 0f54 5842     		neg	r0, r3
 3281              	.LVL424:
 3282 0f56 0E28     		cmp	r0, #14
 3283 0f58 01D9     		bls	.L338
 3284 0f5a 0520     		mov	r0, #5
 3285 0f5c 02E0     		b	.L339
 3286              	.L338:
 3287 0f5e 064A     		ldr	r2, .L341
 3288 0f60 8300     		lsl	r3, r0, #2
 3289 0f62 9858     		ldr	r0, [r3, r2]
 3290              	.L339:
 3291 0f64 2861     		str	r0, [r5, #16]
 3292 0f66 0120     		mov	r0, #1
 3293 0f68 4042     		neg	r0, r0
 3294 0f6a 02E0     		b	.L334
 3295              	.LVL425:
 3296              	.L337:
 3297              		.loc 1 470 0
 3298 0f6c 0023     		mov	r3, #0
 3299 0f6e 2B61     		str	r3, [r5, #16]
 3300 0f70 0020     		mov	r0, #0
 3301              	.LVL426:
 3302              	.L334:
 3303              		.loc 1 472 0
 3304              		@ sp needed for prologue
 3305              	.LVL427:
 3306              	.LVL428:
 3307 0f72 30BC     		pop	{r4, r5}
 3308 0f74 02BC     		pop	{r1}
 3309 0f76 0847     		bx	r1
 3310              	.L342:
 3311              		.align	2
 3312              	.L341:
 3313 0f78 00000000 		.word	err_to_errno_table
 3314              	.LFE297:
 3316              		.align	2
 3317              		.global	lwip_connect
 3318              		.code	16
 3319              		.thumb_func
 3321              	lwip_connect:
 3322              	.LFB296:
 3323              		.loc 1 394 0
 3324 0f7c 70B5     		push	{r4, r5, r6, lr}
 3325              	.LCFI42:
 3326              	.LVL429:
 3327 0f7e 81B0     		sub	sp, sp, #4
 3328              	.LCFI43:
 3329 0f80 0D1C     		mov	r5, r1
 3330 0f82 141C     		mov	r4, r2
 3331              		.loc 1 398 0
 3332 0f84 FFF73CF8 		bl	get_socket
 3333              	.LVL430:
 3334 0f88 061C     		mov	r6, r0
 3335              	.LVL431:
 3336              		.loc 1 399 0
 3337 0f8a 0028     		cmp	r0, #0
 3338 0f8c 02D1     		bne	.L344
 3339              	.LVL432:
 3340 0f8e 0120     		mov	r0, #1
 3341              	.LVL433:
 3342 0f90 4042     		neg	r0, r0
 3343 0f92 29E0     		b	.L345
 3344              	.LVL434:
 3345              	.L344:
 3346              		.loc 1 402 0
 3347 0f94 102C     		cmp	r4, #16
 3348 0f96 02D1     		bne	.L346
 3349 0f98 6B78     		ldrb	r3, [r5, #1]
 3350              	.LVL435:
 3351 0f9a 022B     		cmp	r3, #2
 3352 0f9c 04D0     		beq	.L347
 3353              	.LVL436:
 3354              	.L346:
 3355 0f9e 0523     		mov	r3, #5
 3356 0fa0 3361     		str	r3, [r6, #16]
 3357 0fa2 0120     		mov	r0, #1
 3358              	.LVL437:
 3359 0fa4 4042     		neg	r0, r0
 3360 0fa6 1FE0     		b	.L345
 3361              	.LVL438:
 3362              	.L347:
 3363              	.LBB21:
 3364              		.loc 1 413 0
 3365 0fa8 6B68     		ldr	r3, [r5, #4]
 3366 0faa 0093     		str	r3, [sp]
 3367              		.loc 1 420 0
 3368 0fac 0468     		ldr	r4, [r0]
 3369              	.LVL439:
 3370 0fae 6888     		ldrh	r0, [r5, #2]
 3371              	.LVL440:
 3372 0fb0 FFF7FEFF 		bl	ntohs
 3373 0fb4 021C     		mov	r2, r0
 3374 0fb6 201C     		mov	r0, r4
 3375 0fb8 6946     		mov	r1, sp
 3376 0fba FFF7FEFF 		bl	netconn_connect
 3377 0fbe 0006     		lsl	r0, r0, #24
 3378 0fc0 000E     		lsr	r0, r0, #24
 3379              	.LVL441:
 3380              	.LBE21:
 3381              		.loc 1 423 0
 3382 0fc2 0028     		cmp	r0, #0
 3383 0fc4 0DD0     		beq	.L348
 3384              		.loc 1 425 0
 3385 0fc6 0306     		lsl	r3, r0, #24
 3386 0fc8 1B16     		asr	r3, r3, #24
 3387 0fca 5842     		neg	r0, r3
 3388              	.LVL442:
 3389 0fcc 0E28     		cmp	r0, #14
 3390 0fce 01D9     		bls	.L349
 3391 0fd0 0520     		mov	r0, #5
 3392 0fd2 02E0     		b	.L350
 3393              	.L349:
 3394 0fd4 064A     		ldr	r2, .L352
 3395 0fd6 8300     		lsl	r3, r0, #2
 3396 0fd8 9858     		ldr	r0, [r3, r2]
 3397              	.L350:
 3398 0fda 3061     		str	r0, [r6, #16]
 3399 0fdc 0120     		mov	r0, #1
 3400 0fde 4042     		neg	r0, r0
 3401 0fe0 02E0     		b	.L345
 3402              	.LVL443:
 3403              	.L348:
 3404              		.loc 1 430 0
 3405 0fe2 0023     		mov	r3, #0
 3406 0fe4 3361     		str	r3, [r6, #16]
 3407 0fe6 0020     		mov	r0, #0
 3408              	.LVL444:
 3409              	.L345:
 3410              		.loc 1 432 0
 3411 0fe8 01B0     		add	sp, sp, #4
 3412              		@ sp needed for prologue
 3413              	.LVL445:
 3414              	.LVL446:
 3415              	.LVL447:
 3416 0fea 70BC     		pop	{r4, r5, r6}
 3417 0fec 02BC     		pop	{r1}
 3418 0fee 0847     		bx	r1
 3419              	.L353:
 3420              		.align	2
 3421              	.L352:
 3422 0ff0 00000000 		.word	err_to_errno_table
 3423              	.LFE296:
 3425              		.align	2
 3426              		.global	lwip_bind
 3427              		.code	16
 3428              		.thumb_func
 3430              	lwip_bind:
 3431              	.LFB294:
 3432              		.loc 1 332 0
 3433 0ff4 70B5     		push	{r4, r5, r6, lr}
 3434              	.LCFI44:
 3435              	.LVL448:
 3436 0ff6 81B0     		sub	sp, sp, #4
 3437              	.LCFI45:
 3438 0ff8 0D1C     		mov	r5, r1
 3439 0ffa 141C     		mov	r4, r2
 3440              		.loc 1 338 0
 3441 0ffc FFF700F8 		bl	get_socket
 3442              	.LVL449:
 3443 1000 061C     		mov	r6, r0
 3444              	.LVL450:
 3445              		.loc 1 339 0
 3446 1002 0028     		cmp	r0, #0
 3447 1004 02D1     		bne	.L355
 3448              	.LVL451:
 3449 1006 0120     		mov	r0, #1
 3450              	.LVL452:
 3451 1008 4042     		neg	r0, r0
 3452 100a 29E0     		b	.L356
 3453              	.LVL453:
 3454              	.L355:
 3455              		.loc 1 342 0
 3456 100c 102C     		cmp	r4, #16
 3457 100e 02D1     		bne	.L357
 3458 1010 6B78     		ldrb	r3, [r5, #1]
 3459              	.LVL454:
 3460 1012 022B     		cmp	r3, #2
 3461 1014 04D0     		beq	.L358
 3462              	.LVL455:
 3463              	.L357:
 3464 1016 0523     		mov	r3, #5
 3465 1018 3361     		str	r3, [r6, #16]
 3466 101a 0120     		mov	r0, #1
 3467              	.LVL456:
 3468 101c 4042     		neg	r0, r0
 3469 101e 1FE0     		b	.L356
 3470              	.LVL457:
 3471              	.L358:
 3472              		.loc 1 346 0
 3473 1020 6B68     		ldr	r3, [r5, #4]
 3474 1022 0093     		str	r3, [sp]
 3475              		.loc 1 353 0
 3476 1024 0468     		ldr	r4, [r0]
 3477              	.LVL458:
 3478 1026 6888     		ldrh	r0, [r5, #2]
 3479              	.LVL459:
 3480 1028 FFF7FEFF 		bl	ntohs
 3481 102c 021C     		mov	r2, r0
 3482 102e 201C     		mov	r0, r4
 3483 1030 6946     		mov	r1, sp
 3484 1032 FFF7FEFF 		bl	netconn_bind
 3485 1036 0006     		lsl	r0, r0, #24
 3486 1038 000E     		lsr	r0, r0, #24
 3487              	.LVL460:
 3488              		.loc 1 355 0
 3489 103a 0028     		cmp	r0, #0
 3490 103c 0DD0     		beq	.L359
 3491              		.loc 1 357 0
 3492 103e 0306     		lsl	r3, r0, #24
 3493 1040 1B16     		asr	r3, r3, #24
 3494 1042 5842     		neg	r0, r3
 3495              	.LVL461:
 3496 1044 0E28     		cmp	r0, #14
 3497 1046 01D9     		bls	.L360
 3498 1048 0520     		mov	r0, #5
 3499 104a 02E0     		b	.L361
 3500              	.L360:
 3501 104c 064A     		ldr	r2, .L363
 3502 104e 8300     		lsl	r3, r0, #2
 3503 1050 9858     		ldr	r0, [r3, r2]
 3504              	.L361:
 3505 1052 3061     		str	r0, [r6, #16]
 3506 1054 0120     		mov	r0, #1
 3507 1056 4042     		neg	r0, r0
 3508 1058 02E0     		b	.L356
 3509              	.LVL462:
 3510              	.L359:
 3511              		.loc 1 362 0
 3512 105a 0023     		mov	r3, #0
 3513 105c 3361     		str	r3, [r6, #16]
 3514 105e 0020     		mov	r0, #0
 3515              	.LVL463:
 3516              	.L356:
 3517              		.loc 1 364 0
 3518 1060 01B0     		add	sp, sp, #4
 3519              		@ sp needed for prologue
 3520              	.LVL464:
 3521              	.LVL465:
 3522              	.LVL466:
 3523 1062 70BC     		pop	{r4, r5, r6}
 3524 1064 02BC     		pop	{r1}
 3525 1066 0847     		bx	r1
 3526              	.L364:
 3527              		.align	2
 3528              	.L363:
 3529 1068 00000000 		.word	err_to_errno_table
 3530              	.LFE294:
 3532              		.align	2
 3533              		.global	lwip_accept
 3534              		.code	16
 3535              		.thumb_func
 3537              	lwip_accept:
 3538              	.LFB293:
 3539              		.loc 1 249 0
 3540 106c F0B5     		push	{r4, r5, r6, r7, lr}
 3541              	.LCFI46:
 3542 106e 4746     		mov	r7, r8
 3543 1070 80B4     		push	{r7}
 3544              	.LCFI47:
 3545              	.LVL467:
 3546 1072 86B0     		sub	sp, sp, #24
 3547              	.LCFI48:
 3548 1074 0E1C     		mov	r6, r1
 3549 1076 151C     		mov	r5, r2
 3550              		.loc 1 259 0
 3551 1078 FEF7C2FF 		bl	get_socket
 3552              	.LVL468:
 3553 107c 8046     		mov	r8, r0
 3554              	.LVL469:
 3555              		.loc 1 260 0
 3556 107e 0028     		cmp	r0, #0
 3557 1080 02D1     		bne	.L366
 3558 1082 0126     		mov	r6, #1
 3559              	.LVL470:
 3560 1084 7642     		neg	r6, r6
 3561 1086 86E0     		b	.L367
 3562              	.LVL471:
 3563              	.L366:
 3564              		.loc 1 263 0
 3565 1088 4146     		mov	r1, r8
 3566 108a CB89     		ldrh	r3, [r1, #14]
 3567 108c 1A05     		lsl	r2, r3, #20
 3568 108e 08D5     		bpl	.L368
 3569 1090 0A22     		mov	r2, #10
 3570 1092 8B5E     		ldrsh	r3, [r1, r2]
 3571 1094 002B     		cmp	r3, #0
 3572 1096 04DC     		bgt	.L368
 3573              		.loc 1 265 0
 3574 1098 0B23     		mov	r3, #11
 3575 109a 0B61     		str	r3, [r1, #16]
 3576 109c 0126     		mov	r6, #1
 3577              	.LVL472:
 3578 109e 7642     		neg	r6, r6
 3579 10a0 79E0     		b	.L367
 3580              	.LVL473:
 3581              	.L368:
 3582              		.loc 1 269 0
 3583 10a2 4346     		mov	r3, r8
 3584 10a4 1868     		ldr	r0, [r3]
 3585 10a6 FFF7FEFF 		bl	netconn_accept
 3586 10aa 071C     		mov	r7, r0
 3587              	.LVL474:
 3588              		.loc 1 270 0
 3589 10ac 0028     		cmp	r0, #0
 3590 10ae 11D1     		bne	.L369
 3591              	.LVL475:
 3592              		.loc 1 272 0
 3593 10b0 4146     		mov	r1, r8
 3594 10b2 0B68     		ldr	r3, [r1]
 3595 10b4 1B7B     		ldrb	r3, [r3, #12]
 3596 10b6 1B06     		lsl	r3, r3, #24
 3597 10b8 1B16     		asr	r3, r3, #24
 3598 10ba 5B42     		neg	r3, r3
 3599 10bc 0E2B     		cmp	r3, #14
 3600 10be 01D9     		bls	.L370
 3601 10c0 0523     		mov	r3, #5
 3602 10c2 02E0     		b	.L371
 3603              	.L370:
 3604 10c4 374A     		ldr	r2, .L379
 3605 10c6 9B00     		lsl	r3, r3, #2
 3606 10c8 9B58     		ldr	r3, [r3, r2]
 3607              	.L371:
 3608 10ca 4246     		mov	r2, r8
 3609 10cc 1361     		str	r3, [r2, #16]
 3610 10ce 0126     		mov	r6, #1
 3611              	.LVL476:
 3612 10d0 7642     		neg	r6, r6
 3613 10d2 60E0     		b	.L367
 3614              	.LVL477:
 3615              	.L369:
 3616              		.loc 1 277 0
 3617 10d4 05A9     		add	r1, sp, #20
 3618 10d6 6A46     		mov	r2, sp
 3619 10d8 1232     		add	r2, r2, #18
 3620 10da 0023     		mov	r3, #0
 3621 10dc FFF7FEFF 		bl	netconn_getaddr
 3622              	.LVL478:
 3623 10e0 0006     		lsl	r0, r0, #24
 3624 10e2 040E     		lsr	r4, r0, #24
 3625              	.LVL479:
 3626              		.loc 1 278 0
 3627 10e4 002C     		cmp	r4, #0
 3628 10e6 11D0     		beq	.L372
 3629              		.loc 1 279 0
 3630 10e8 381C     		mov	r0, r7
 3631 10ea FFF7FEFF 		bl	netconn_delete
 3632              		.loc 1 280 0
 3633 10ee 2306     		lsl	r3, r4, #24
 3634 10f0 1B16     		asr	r3, r3, #24
 3635 10f2 5842     		neg	r0, r3
 3636 10f4 0E28     		cmp	r0, #14
 3637 10f6 01D9     		bls	.L373
 3638 10f8 0520     		mov	r0, #5
 3639 10fa 02E0     		b	.L374
 3640              	.L373:
 3641 10fc 294A     		ldr	r2, .L379
 3642 10fe 8300     		lsl	r3, r0, #2
 3643 1100 9858     		ldr	r0, [r3, r2]
 3644              	.L374:
 3645 1102 4346     		mov	r3, r8
 3646 1104 1861     		str	r0, [r3, #16]
 3647 1106 0126     		mov	r6, #1
 3648              	.LVL480:
 3649 1108 7642     		neg	r6, r6
 3650 110a 44E0     		b	.L367
 3651              	.LVL481:
 3652              	.L372:
 3653              		.loc 1 287 0
 3654 110c 002E     		cmp	r6, #0
 3655 110e 1ED0     		beq	.L375
 3656              		.loc 1 289 0
 3657 1110 6C46     		mov	r4, sp
 3658              	.LVL482:
 3659 1112 0023     		mov	r3, #0
 3660 1114 0093     		str	r3, [sp]
 3661 1116 01AA     		add	r2, sp, #4
 3662 1118 1360     		str	r3, [r2]
 3663 111a 02AA     		add	r2, sp, #8
 3664 111c 1360     		str	r3, [r2]
 3665 111e 03AA     		add	r2, sp, #12
 3666 1120 1360     		str	r3, [r2]
 3667              		.loc 1 290 0
 3668 1122 1023     		mov	r3, #16
 3669 1124 2370     		strb	r3, [r4]
 3670              		.loc 1 291 0
 3671 1126 0223     		mov	r3, #2
 3672 1128 6370     		strb	r3, [r4, #1]
 3673              		.loc 1 292 0
 3674 112a 6B46     		mov	r3, sp
 3675 112c 1233     		add	r3, r3, #18
 3676 112e 1888     		ldrh	r0, [r3]
 3677              	.LVL483:
 3678 1130 FFF7FEFF 		bl	htons
 3679              	.LVL484:
 3680 1134 6080     		strh	r0, [r4, #2]
 3681              		.loc 1 293 0
 3682 1136 059B     		ldr	r3, [sp, #20]
 3683 1138 0193     		str	r3, [sp, #4]
 3684              		.loc 1 295 0
 3685 113a 2B68     		ldr	r3, [r5]
 3686 113c 102B     		cmp	r3, #16
 3687 113e 01D9     		bls	.L376
 3688              		.loc 1 296 0
 3689 1140 1023     		mov	r3, #16
 3690 1142 2B60     		str	r3, [r5]
 3691              	.L376:
 3692              		.loc 1 298 0
 3693 1144 2A68     		ldr	r2, [r5]
 3694 1146 301C     		mov	r0, r6
 3695 1148 6946     		mov	r1, sp
 3696 114a FFF7FEFF 		bl	memcpy
 3697              	.LVL485:
 3698              	.L375:
 3699              		.loc 1 301 0
 3700 114e 381C     		mov	r0, r7
 3701 1150 FFF7A2FA 		bl	alloc_socket
 3702 1154 061C     		mov	r6, r0
 3703              	.LVL486:
 3704              		.loc 1 302 0
 3705 1156 411C     		add	r1, r0, #1
 3706 1158 06D1     		bne	.L377
 3707              	.LVL487:
 3708              		.loc 1 303 0
 3709 115a 381C     		mov	r0, r7
 3710              	.LVL488:
 3711 115c FFF7FEFF 		bl	netconn_delete
 3712              		.loc 1 304 0
 3713 1160 1723     		mov	r3, #23
 3714 1162 4246     		mov	r2, r8
 3715 1164 1361     		str	r3, [r2, #16]
 3716 1166 16E0     		b	.L367
 3717              	.LVL489:
 3718              	.L377:
 3719              		.loc 1 308 0
 3720 1168 0F4B     		ldr	r3, .L379+4
 3721 116a 3B63     		str	r3, [r7, #48]
 3722              		.loc 1 309 0
 3723 116c 8300     		lsl	r3, r0, #2
 3724 116e 1B18     		add	r3, r3, r0
 3725 1170 9B00     		lsl	r3, r3, #2
 3726 1172 0E4C     		ldr	r4, .L379+8
 3727              	.LVL490:
 3728 1174 E418     		add	r4, r4, r3
 3729              	.LVL491:
 3730              		.loc 1 312 0
 3731 1176 0E4D     		ldr	r5, .L379+12
 3732              	.LVL492:
 3733 1178 2868     		ldr	r0, [r5]
 3734              	.LVL493:
 3735 117a FFF7FEFF 		bl	sys_sem_wait
 3736              		.loc 1 318 0
 3737 117e BB8B     		ldrh	r3, [r7, #28]
 3738 1180 DB43     		mvn	r3, r3
 3739 1182 6289     		ldrh	r2, [r4, #10]
 3740 1184 9B18     		add	r3, r3, r2
 3741 1186 6381     		strh	r3, [r4, #10]
 3742              		.loc 1 319 0
 3743 1188 FE61     		str	r6, [r7, #28]
 3744              		.loc 1 320 0
 3745 118a 2868     		ldr	r0, [r5]
 3746 118c FFF7FEFF 		bl	sys_sem_signal
 3747              		.loc 1 326 0
 3748 1190 0023     		mov	r3, #0
 3749 1192 4146     		mov	r1, r8
 3750 1194 0B61     		str	r3, [r1, #16]
 3751              	.LVL494:
 3752              	.L367:
 3753              		.loc 1 328 0
 3754 1196 301C     		mov	r0, r6
 3755 1198 06B0     		add	sp, sp, #24
 3756              		@ sp needed for prologue
 3757              	.LVL495:
 3758              	.LVL496:
 3759              	.LVL497:
 3760              	.LVL498:
 3761              	.LVL499:
 3762 119a 04BC     		pop	{r2}
 3763 119c 9046     		mov	r8, r2
 3764 119e F0BC     		pop	{r4, r5, r6, r7}
 3765 11a0 02BC     		pop	{r1}
 3766 11a2 0847     		bx	r1
 3767              	.L380:
 3768              		.align	2
 3769              	.L379:
 3770 11a4 00000000 		.word	err_to_errno_table
 3771 11a8 00000000 		.word	event_callback
 3772 11ac 00000000 		.word	sockets
 3773 11b0 54000000 		.word	socksem
 3774              	.LFE293:
 3776              		.section	.rodata
 3777              		.align	2
 3780              	err_to_errno_table:
 3781 0000 00000000 		.word	0
 3782 0004 0C000000 		.word	12
 3783 0008 69000000 		.word	105
 3784 000c 6E000000 		.word	110
 3785 0010 71000000 		.word	113
 3786 0014 67000000 		.word	103
 3787 0018 68000000 		.word	104
 3788 001c 6C000000 		.word	108
 3789 0020 6B000000 		.word	107
 3790 0024 16000000 		.word	22
 3791 0028 05000000 		.word	5
 3792 002c 62000000 		.word	98
 3793 0030 FFFFFFFF 		.word	-1
 3794 0034 FFFFFFFF 		.word	-1
 3795 0038 73000000 		.word	115
 3796              		.bss
 3797              		.align	2
 3798              	sockets:
 3799 0000 00000000 		.space	80
 3799      00000000 
 3799      00000000 
 3799      00000000 
 3799      00000000 
 3800              		.align	2
 3801              	select_cb_list:
 3802 0050 00000000 		.space	4
 3803              		.align	2
 3804              	socksem:
 3805 0054 00000000 		.space	4
 3806              		.align	2
 3807              	selectsem:
 3808 0058 00000000 		.space	4
 4453              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 sockets.c
     /tmp/ccwDJRTo.s:1      .text:00000000 $t
     /tmp/ccwDJRTo.s:15     .text:00000000 get_socket
     /tmp/ccwDJRTo.s:45     .text:00000018 $d
     /tmp/ccwDJRTo.s:3798   .bss:00000000 sockets
     /tmp/ccwDJRTo.s:49     .text:0000001c $t
     /tmp/ccwDJRTo.s:52     .text:0000001c lwip_selscan
     /tmp/ccwDJRTo.s:267    .text:00000124 lwip_ioctl
     /tmp/ccwDJRTo.s:398    .text:000001c0 $d
     /tmp/ccwDJRTo.s:408    .text:000001cc lwip_setsockopt
     /tmp/ccwDJRTo.s:405    .text:000001cc $t
     /tmp/ccwDJRTo.s:631    .text:000002cc $d
     /tmp/ccwDJRTo.s:878    .text:00000400 lwip_setsockopt_internal
     /tmp/ccwDJRTo.s:641    .text:000002d8 lwip_getsockopt
     /tmp/ccwDJRTo.s:638    .text:000002d8 $t
     /tmp/ccwDJRTo.s:869    .text:000003f4 $d
     /tmp/ccwDJRTo.s:1062   .text:000004ec lwip_getsockopt_internal
     /tmp/ccwDJRTo.s:875    .text:00000400 $t
     /tmp/ccwDJRTo.s:1054   .text:000004e4 $d
     /tmp/ccwDJRTo.s:1059   .text:000004ec $t
     /tmp/ccwDJRTo.s:1255   .text:000005f8 $d
     /tmp/ccwDJRTo.s:3780   .rodata:00000000 err_to_errno_table
     /tmp/ccwDJRTo.s:1262   .text:00000608 $t
     /tmp/ccwDJRTo.s:1265   .text:00000608 lwip_getaddrname
     /tmp/ccwDJRTo.s:1364   .text:00000680 lwip_getsockname
     /tmp/ccwDJRTo.s:1385   .text:0000068c lwip_getpeername
     /tmp/ccwDJRTo.s:1405   .text:00000698 alloc_socket
     /tmp/ccwDJRTo.s:1482   .text:00000700 $d
     /tmp/ccwDJRTo.s:3804   .bss:00000054 socksem
     /tmp/ccwDJRTo.s:1487   .text:00000708 $t
     /tmp/ccwDJRTo.s:1490   .text:00000708 event_callback
     /tmp/ccwDJRTo.s:1698   .text:00000818 $d
     /tmp/ccwDJRTo.s:3807   .bss:00000058 selectsem
     /tmp/ccwDJRTo.s:3801   .bss:00000050 select_cb_list
     /tmp/ccwDJRTo.s:1708   .text:00000824 lwip_socket_init
     /tmp/ccwDJRTo.s:1705   .text:00000824 $t
     /tmp/ccwDJRTo.s:1730   .text:00000840 $d
     /tmp/ccwDJRTo.s:1740   .text:00000848 lwip_select
     /tmp/ccwDJRTo.s:1737   .text:00000848 $t
     /tmp/ccwDJRTo.s:2291   .text:00000adc $d
     /tmp/ccwDJRTo.s:2300   .text:00000ae4 lwip_socket
     /tmp/ccwDJRTo.s:2297   .text:00000ae4 $t
     /tmp/ccwDJRTo.s:2403   .text:00000b50 $d
     /tmp/ccwDJRTo.s:2411   .text:00000b54 lwip_send
     /tmp/ccwDJRTo.s:2408   .text:00000b54 $t
     /tmp/ccwDJRTo.s:2534   .text:00000bdc lwip_sendto
     /tmp/ccwDJRTo.s:2505   .text:00000bcc $d
     /tmp/ccwDJRTo.s:2513   .text:00000bd0 lwip_write
     /tmp/ccwDJRTo.s:2510   .text:00000bd0 $t
     /tmp/ccwDJRTo.s:2703   .text:00000cb8 $d
     /tmp/ccwDJRTo.s:2711   .text:00000cbc lwip_recvfrom
     /tmp/ccwDJRTo.s:2708   .text:00000cbc $t
     /tmp/ccwDJRTo.s:3082   .text:00000e98 $d
     /tmp/ccwDJRTo.s:3090   .text:00000e9c lwip_recv
     /tmp/ccwDJRTo.s:3087   .text:00000e9c $t
     /tmp/ccwDJRTo.s:3117   .text:00000eb4 lwip_read
     /tmp/ccwDJRTo.s:3143   .text:00000ec8 lwip_close
     /tmp/ccwDJRTo.s:3203   .text:00000f0c $d
     /tmp/ccwDJRTo.s:3211   .text:00000f10 lwip_shutdown
     /tmp/ccwDJRTo.s:3208   .text:00000f10 $t
     /tmp/ccwDJRTo.s:3231   .text:00000f1c lwip_listen
     /tmp/ccwDJRTo.s:3313   .text:00000f78 $d
     /tmp/ccwDJRTo.s:3321   .text:00000f7c lwip_connect
     /tmp/ccwDJRTo.s:3318   .text:00000f7c $t
     /tmp/ccwDJRTo.s:3422   .text:00000ff0 $d
     /tmp/ccwDJRTo.s:3430   .text:00000ff4 lwip_bind
     /tmp/ccwDJRTo.s:3427   .text:00000ff4 $t
     /tmp/ccwDJRTo.s:3529   .text:00001068 $d
     /tmp/ccwDJRTo.s:3537   .text:0000106c lwip_accept
     /tmp/ccwDJRTo.s:3534   .text:0000106c $t
     /tmp/ccwDJRTo.s:3770   .text:000011a4 $d
     /tmp/ccwDJRTo.s:3781   .rodata:00000000 $d

UNDEFINED SYMBOLS
sys_arch_protect
sys_arch_unprotect
tcpip_callback_with_block
sys_arch_sem_wait
sys_sem_signal
netconn_getaddr
htons
memcpy
sys_sem_wait
sys_sem_new
__divsi3
sys_sem_wait_timeout
sys_sem_free
netconn_new_with_proto_and_callback
netconn_delete
netconn_write
ntohs
netbuf_ref
netconn_send
netbuf_free
netconn_recv
pbuf_copy_partial
netbuf_delete
netconn_listen_with_backlog
netconn_connect
netconn_bind
netconn_accept
